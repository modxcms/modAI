!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.modAI=t():e.modAI=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{chatHistory:()=>xe,executor:()=>r,history:()=>d,ui:()=>ke,window:()=>ze});const n={buffered:{chatgpt:{content:e=>{const t=e?.choices?.[0]?.message?.content;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}},image:e=>{let t=e?.data?.[0]?.url;if(!t){if(t=e?.data?.[0]?.b64_json,!t)throw new Error(_("modai.cmp.failed_request"));t=`data:image/png;base64,${t}`}return{id:`chatgpt-${Date.now()}-${Math.round(1e3*Math.random())}`,url:t}}},claude:{content:e=>{const t=e?.content?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}}},gemini:{content:e=>{const t=e?.candidates?.[0]?.content?.parts?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,content:t}},image:e=>{const t=e?.predictions?.[0]?.bytesBase64Encoded;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,url:`data:image/png;base64,${t}`}}}},stream:{chatgpt:{content:(e,t)=>{const n=t?.content??"",o=e.choices?.[0]?.delta?.content||"";return{...t,id:e.id,content:`${n}${o}`}}},claude:{content:(e,t)=>{const n=t?.content??"",o=e.delta?.text||"";return{...t,content:`${n}${o}`}}},gemini:{content:(e,t)=>{const n=t?.content??"",o=e.candidates?.[0]?.content?.parts?.[0]?.text||"";return{...t,content:`${n}${o}`}}}}},o=async e=>{if(!e.ok){const t=await e.json();if(t?.error)throw new Error(t.error.message);throw new Error(`${e.status} ${e.statusText}`)}},a=async(e,t,o,a,i)=>{if(!e.body)throw new Error("failed");const r=e.body.getReader(),s=new TextDecoder("utf-8");let d="",l={id:`${t}-${Date.now()}-${Math.round(1e3*Math.random())}`,content:""};for(;!i||!i.aborted;){const{done:e,value:i}=await r.read();if(e)break;const c=s.decode(i,{stream:!0});if("gemini"===t){const e=c.trim().split(",\r\n").map((e=>e.replace(/^\[|]$/g,""))).filter((e=>""!==e.trim()));for(const i of e)try{const e=JSON.parse(i);l=n.stream[t][o](e,l),a&&a(l)}catch{}}if("chatgpt"===t){d+=c;let e,i=0;for(;-1!==(e=d.indexOf("\n",i));){const r=d.slice(i,e).trim();if(i=e+1,r.startsWith("data: ")){const e=r.slice(6);if("[DONE]"===e)continue;try{const i=JSON.parse(e);l=n.stream[t][o](i,l),a&&a(l)}catch{}}}d=d.slice(i)}if("claude"===t){d+=c;let e,i=0;for(;-1!==(e=d.indexOf("\n",i));){const r=d.slice(i,e).trim();if(i=e+1,r.startsWith("data: ")){const e=r.slice(6);try{const i=JSON.parse(e);if("message_start"===i.type){l.id=i.message.id;continue}if("content_block_delta"!==i.type)continue;l=n.stream[t][o](i,l),a&&a(l)}catch{}}}d=d.slice(i)}}return l},i=async(e,t,i,r)=>{const s=(r=r||new AbortController).signal,d=await fetch(`${modAI.apiURL}?action=${e}`,{signal:s,method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!d.ok){const e=await d.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}const l=d.headers.get("x-modai-service")??"chatgpt",c=d.headers.get("x-modai-parser")??"content",p=1===parseInt(d.headers.get("x-modai-stream")??"0");if(1!==parseInt(d.headers.get("x-modai-proxy")??"0")){return(async(e,t,i)=>{if("object"!=typeof e||!e.forExecutor)return e;const r=e.forExecutor,s=(i=i||new AbortController).signal;if(!r.service||!r.parser)throw new Error(_("modai.cmp.service_required"));if(!n[r.stream?"stream":"buffered"]?.[r.service]?.[r.parser])throw new Error(_("modai.cmp.service_unsupported"));if(r.stream)return(async e=>{if("content"!==r.parser)throw new Error(_("modai.cmp.service_unsupported"));const n=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});return await o(n),a(n,r.service,r.parser,t)})(r);const d=await(async e=>{const t=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});await o(t);const n=await t.json();if(n.error)throw new Error(n.error.message);return n})(r);return n.buffered[r.service][r.parser](d)})(await d.json(),i,r)}if(!l||!c)throw r.abort(),new Error(_("modai.cmp.service_required"));if(!n[p?"stream":"buffered"]?.[l]?.[c])throw r.abort(),new Error(_("modai.cmp.service_unsupported"));if(!p){const e=await d.json();return n.buffered[l][c](e)}if("content"!==c)throw new Error(_("modai.cmp.service_unsupported"));return await a(d,l,c,i,s)},r={mgr:{download:{image:async e=>await(async(e,t)=>{const n=await fetch(`${modAI.apiURL}?action=Download\\Image`,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!n.ok){const e=await n.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}return await n.json()})(0,e)},prompt:{freeText:async(e,t,n)=>i("Prompt\\FreeText",e,t,n),text:async(e,t,n)=>i("Prompt\\Text",e,t,n),vision:async(e,t,n)=>i("Prompt\\Vision",e,t,n),image:async(e,t)=>i("Prompt\\Image",e,void 0,t)}}},s={},d={_formatOutput(e,t){const n=s[e],o=n.visible>0,a=n.visible!==n.values.length-1;return{value:void 0!==t?t:n.values[n.visible]??null,nextStatus:a,prevStatus:o,current:n.visible+1,total:n.values.length,context:n.context}},insert(e,t,n=!1){const o=s[e];n||(o.visible=o.values.push(t)-1);const a=this._formatOutput(e,t);return"function"==typeof o.syncUI&&o.syncUI(a,n),a},next(e){const t=s[e];if(t.visible===t.values.length-1)return this._formatOutput(e);t.visible++;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},prev(e){const t=s[e];if(t.visible<=0)return this._formatOutput(e);t.visible--;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},init(e,t,n,o){return s[e]||(s[e]={visible:-1,values:[],context:o}),s[e].syncUI=t,n&&(s[e].values=[n],s[e].visible=0),{cachedItem:s[e],getData:()=>this._formatOutput(e),getAll:()=>s[e].values,syncUI:()=>{"function"==typeof s[e].syncUI&&s[e].syncUI(this._formatOutput(e),!1)},insert:(t,n=!1)=>this.insert(e,t,n),next:()=>this.next(e),prev:()=>this.prev(e)}}},l=(e,t)=>{if(!t.isDragging)return;const n=e.clientX-t.offsetX,o=e.clientY-t.offsetY;t.style.left=n+"px",t.style.top=o+"px",t.style.transform="none"},c=e=>{e.isDragging=!1,document.body.style.userSelect=""},p={margin:"0",padding:"0",boxSizing:"border-box",fontFamily:"Arial, sans-serif"},g=(e,t)=>{Object.assign(e.style,{...p,...t})},h=(e,t,n="")=>{const o=document.createElement(e);return t&&g(o,t),n&&(o.textContent=n),o},m=e=>/<[^>]*>/g.test(e)?e:e.replace(/\r\n|\n|\r/g,"<br>"),u=(e,t,n={},o={},a)=>{const i="string"==typeof e?e:"";"string"==typeof e||Array.isArray(e)||(e=[e]);const r=h("button",n,i);return r.type="button",Array.isArray(e)&&e.forEach((e=>{"string"==typeof e?r.append(document.createTextNode(e)):r.append(e)})),r.addEventListener("click",t),r.enable=()=>{r.disabled=!1,g(r,n)},r.disable=()=>{r.disabled=!0,g(r,{...n,...o})},a&&Object.assign(r,a),r},f={loadingText:"Loading...",completedText:"Completed!",completedTextDuration:2e3,disabled:!1},y={backgroundColor:"#edf2f7",border:"1px solid #cbd5e0",borderRadius:"4px",padding:"3px 8px",fontSize:"12px",cursor:"pointer",display:"flex",alignItems:"center",color:"#4a5568",opacity:"1"},x={display:"inline-block",width:"14px",height:"14px",marginRight:"5px",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},b={opacity:"0.5",cursor:"not-allowed"},w={copy:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z'/%3E%3Cpath d='M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z'/%3E%3C/svg%3E",insert:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/%3E%3Cpath d='M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z'/%3E%3C/svg%3E"},v=e=>{e={...f,...e};const t=u([h("span",{...x,backgroundImage:`url("${w[e.icon]}")`}),e.label],(async()=>{const n=t.innerHTML,o=e.onClick(e.message,e.modal);if(o instanceof Promise){t.innerHTML=`\n        <span style="\n            display: inline-block;\n            margin-right: 5px;\n            width: 12px;\n            height: 12px;\n            position: relative;\n            animation: spin 1s linear infinite;\n        ">\n            <span style="\n                position: absolute;\n                width: 3px;\n                height: 3px;\n                background-color: currentColor;\n                border-radius: 50%;\n                top: 0;\n                left: 50%;\n                transform: translate(-50%, 0);\n            "></span>\n            <span style="\n                position: absolute;\n                width: 3px;\n                height: 3px;\n                background-color: currentColor;\n                border-radius: 50%;\n                top: 50%;\n                right: 0;\n                transform: translate(0, -50%);\n            "></span>\n            <span style="\n                position: absolute;\n                width: 3px;\n                height: 3px;\n                background-color: currentColor;\n                border-radius: 50%;\n                bottom: 0;\n                left: 50%;\n                transform: translate(-50%, 0);\n            "></span>\n            <span style="\n                position: absolute;\n                width: 3px;\n                height: 3px;\n                background-color: currentColor;\n                border-radius: 50%;\n                top: 50%;\n                left: 0;\n                transform: translate(0, -50%);\n            "></span>\n        </span>\n        ${e.loadingText}\n    `;const n=document.createElement("style");n.textContent="\n          @keyframes spin {\n              from { transform: rotate(0deg); }\n              to { transform: rotate(360deg); }\n          }\n      ",document.head.appendChild(n),await o,document.head.removeChild(n)}t.innerHTML=`\n                <span style="margin-right: 5px;">✓</span>\n                ${e.completedText}\n            `,await new Promise((e=>setTimeout(e,2e3))),t.innerHTML=n}),y,b);return t.className="action-button",e.disabled&&t.disable(),t},C={position:"fixed",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.3)",display:"none",zIndex:"100"},E={position:"fixed",width:"1000px",minHeight:"170px",maxHeight:"600px",backgroundColor:"#fff",borderRadius:"10px",boxShadow:"0 5px 15px rgba(0, 0, 0, 0.3)",display:"none",flexDirection:"column",overflow:"hidden",zIndex:"101",top:"50%",left:"50%",transform:"translate(-50%, -50%)",transition:"height 0.3s ease-in-out"},k={backgroundColor:"#00B6DE",color:"white",padding:"15px",display:"flex",justifyContent:"space-between",alignItems:"center",cursor:"move"},M={fontWeight:"bold",fontSize:"16px"},T={display:"flex",gap:"10px"},I={background:"none",border:"none",color:"white",fontSize:"16px",cursor:"pointer",transition:"opacity 0.2s ease"},A={flex:"1",padding:"15px",overflowY:"auto",backgroundColor:"#f9f9f9",width:"100%",boxSizing:"border-box",display:"none"},S={marginBottom:"20px",borderRadius:"8px",position:"relative",wordWrap:"break-word",width:"100%",boxSizing:"border-box"},L={width:"100%",backgroundColor:"#ffffff",border:"1px solid #e2e8f0",boxShadow:"0 2px 5px rgba(0, 0, 0, 0.05)"},B={width:"fit-content",padding:"10px 15px",backgroundColor:"#4299e1",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px"},O={padding:"12px",width:"100%",maxWidth:"100%",overflow:"hidden",boxSizing:"border-box"},z={display:"flex",padding:"8px 12px",gap:"8px",backgroundColor:"#f7fafc",borderTop:"1px solid #e2e8f0",borderRadius:"0 0 8px 8px"},D={display:"flex",padding:"15px",borderTop:"1px solid #e2e8f0",backgroundColor:"white",position:"relative"},$={display:"flex",width:"100%",gap:"10px"},H={flex:"1",position:"relative",minHeight:"48px",maxHeight:"150px",display:"flex"},R={width:"100%",padding:"12px 15px",border:"1px solid #e2e8f0",borderRadius:"10px",outline:"none",fontSize:"14px",resize:"none",minHeight:"48px",maxHeight:"150px",overflowY:"auto",backgroundColor:"#fff",cursor:"inherit"},j={display:"flex",flexDirection:"column",gap:"4px",width:"100px"},P={backgroundColor:"#6CB24A",color:"white",border:"none",borderRadius:"12px",padding:"8px 16px",cursor:"pointer",fontWeight:"bold",height:"40px",minWidth:"100px",fontSize:"14px",display:"flex",alignItems:"center",justifyContent:"center",gap:"6px",opacity:"1",transition:"background-color 0.2s ease"},U={display:"flex",gap:"4px",justifyContent:"space-between"},F={backgroundColor:"transparent",border:"1px solid #e2e8f0",borderRadius:"8px",width:"48px",height:"32px",padding:"0",cursor:"pointer",display:"flex",alignItems:"center",justifyContent:"center",transition:"all 0.2s ease",opacity:"1"},N={backgroundColor:"white",border:"1px solid #e2e8f0",borderRadius:"8px",padding:"6px 10px",cursor:"pointer",display:"flex",alignItems:"center",justifyContent:"center",transition:"all 0.2s ease",opacity:"1",justifyItems:"center"},q={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},W={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23DC2626'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M6 6h12v12H6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},V={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%234B5563'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},Y={opacity:"0.5",cursor:"not-allowed"},J={backgroundColor:"#f3f4f6",cursor:"not-allowed"},X={display:"none",position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(243, 244, 246, 0.9)",borderRadius:"10px",color:"#6B7280",fontSize:"14px",alignItems:"center",justifyContent:"center",gap:"4px",flexDirection:"row",zIndex:"10",backdropFilter:"blur(2px)",border:"1px solid #e2e8f0",pointerEvents:"none"},G={padding:"5px 15px",display:"flex",alignItems:"center",gap:"10px",borderTop:"1px solid #e2e8f0",backgroundColor:"white",justifyContent:"space-between"},K={display:"flex",alignItems:"center",gap:"10px"},Q={fontSize:"14px",color:"#4B5563",fontWeight:"500"},Z={display:"flex",gap:"4px"},ee={padding:"6px 12px",fontSize:"13px",border:"1px solid #e2e8f0",borderRadius:"6px",backgroundColor:"#fff",color:"#4B5563",cursor:"pointer",transition:"all 0.2s ease",opacity:"1"},te={backgroundColor:"#00B6DE",color:"#fff",borderColor:"#00B6DE",cursor:"default"},ne={width:"fit-content",padding:"10px 15px",backgroundColor:"#DC2626",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px",display:"flex",alignItems:"center",gap:"8px"},oe={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},ae={position:"absolute",top:"5px",left:"5px",width:"71px",height:"71px",borderRadius:"6px",overflow:"hidden",border:"1px solid #e2e8f0",backgroundColor:"#f8fafc",cursor:"pointer",transition:"transform 0.2s ease"},ie={width:"100%",height:"100%",objectFit:"cover"},re={position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.5)",color:"white",display:"flex",alignItems:"center",justifyContent:"center",fontSize:"24px",cursor:"pointer",opacity:"0",transition:"opacity 0.2s ease"},se=(e,t)=>{"none"===e.chatMessages.style.display&&(e.chatMessages.style.display="block");const n=h("div",{...S,...ne}),o=h("span",oe);n.appendChild(o);const a=h("span");return a.textContent=t,n.appendChild(a),e.chatMessages.appendChild(n),e.chatMessages.scrollTop=e.chatMessages.scrollHeight,n},de=(e,t,n,o)=>{"none"===e.chatMessages.style.display&&(e.chatMessages.style.display="block");const a=h("div",{...S,...L}),i=o||"msg-"+Date.now(),s=h("div",O),d=((e,t,n=[])=>{const o=m(e);let a=!1,i=null;const r=h("iframe",{width:"100%",border:"none",backgroundColor:"white",maxWidth:"100%",boxSizing:"border-box"}),s=()=>r.contentDocument||r.contentWindow?.document,d=e=>`\n        <html>\n        <head>\n            <style>\n            html {\n                width: 100%;\n                max-width: 100%;\n                padding: 0;\n                margin: 0;\n            }\n            body {\n                margin: 0;\n                padding: 0;\n                font-family: Arial, sans-serif;\n                overflow-x: hidden;\n                width: 100%;\n                max-width: 100%;\n                box-sizing: border-box;\n            }\n            * {\n                box-sizing: border-box;\n                max-width: 100%;\n            }\n            pre {\n                white-space: pre-wrap;\n                word-wrap: break-word;\n                overflow-wrap: break-word;\n                max-width: 100%;\n                padding: 12px;\n                margin: 0;\n                background-color: #f5f7fa;\n                border-radius: 5px;\n                font-size: 14px;\n            }\n            img {\n                max-width: 100%;\n                height: auto;\n                display: block;\n            }\n            code {\n                white-space: pre-wrap;\n                word-wrap: break-word;\n                max-width: 100%;\n                display: block;\n                overflow-x: hidden;\n                font-size: 14px;\n            }\n            table {\n                width: 100%;\n                max-width: 100%;\n                overflow-x: hidden;\n                display: block;\n                border-collapse: collapse;\n            }\n            div {\n                max-width: 100%;\n                overflow-wrap: break-word;\n                word-wrap: break-word;\n                box-sizing: border-box;\n            }\n            p {\n                margin: 0 0 0.5em 0;\n                max-width: 100%;\n            }\n            h1, h2, h3, h4, h5, h6 {\n                margin: 0 0 0.1em 0;\n                max-width: 100%;\n            }\n        </style>\n            ${n.map((e=>`<link rel="stylesheet" type="text/css" href="${e}" />`)).join("")}\n        </head>\n        <body style="padding: 0; max-width: 100%; width: 100%; box-sizing: border-box;">${e}</body>\n        </html>\n    `,l=(e,t)=>{const o=e.createElement("style");o.textContent="\n            html {\n                width: 100%;\n                max-width: 100%;\n                padding: 0;\n                margin: 0;\n            }\n            body {\n                margin: 0;\n                padding: 0;\n                font-family: Arial, sans-serif;\n                overflow-x: hidden;\n                width: 100%;\n                max-width: 100%;\n                box-sizing: border-box;\n            }\n            * {\n                box-sizing: border-box;\n                max-width: 100%;\n            }\n            pre {\n                white-space: pre-wrap;\n                word-wrap: break-word;\n                overflow-wrap: break-word;\n                max-width: 100%;\n                padding: 12px;\n                margin: 0;\n                background-color: #f5f7fa;\n                border-radius: 5px;\n                font-size: 14px;\n            }\n            img {\n                max-width: 100%;\n                height: auto;\n                display: block;\n            }\n            code {\n                white-space: pre-wrap;\n                word-wrap: break-word;\n                max-width: 100%;\n                display: block;\n                overflow-x: hidden;\n                font-size: 14px;\n            }\n            table {\n                width: 100%;\n                max-width: 100%;\n                overflow-x: hidden;\n                display: block;\n                border-collapse: collapse;\n            }\n            div {\n                max-width: 100%;\n                overflow-wrap: break-word;\n                word-wrap: break-word;\n                box-sizing: border-box;\n            }\n            p {\n                margin: 0 0 0.5em 0;\n                max-width: 100%;\n            }\n            h1, h2, h3, h4, h5, h6 {\n                margin: 0 0 0.1em 0;\n                max-width: 100%;\n            }\n        ",e.head.appendChild(o),n.forEach((t=>{const n=e.createElement("link");n.rel="stylesheet",n.type="text/css",n.href=t,e.head.appendChild(n)})),e.body.innerHTML=t,e.body.style.padding="0",e.body.style.maxWidth="100%",e.body.style.width="100%",e.body.style.boxSizing="border-box"};return r.syncContent=e=>{(e=>{if(!a)return i=e,void(r.srcdoc=d(e));const t=s();if(!t)return i=e,void(r.srcdoc=d(e));t.head.querySelector("style")?t.body.innerHTML=e:l(t,e),r.syncHeight()})(e)},r.syncHeight=()=>{const e=r.contentWindow?.document.body;if(!e)return;const n=e.getElementsByTagName("*");let o=e.offsetHeight;for(let e=0;e<n.length;e++){const t=n[e],a=t.offsetTop+t.offsetHeight;o=Math.max(o,a)}r.style.height=o+5+"px",e.style.overflow="hidden",t.chatMessages.scrollTop=t.chatMessages.scrollHeight},r.onload=()=>{if(a=!0,null!==i){const e=i;i=null;const t=s();t&&(l(t,e),r.syncHeight())}r.syncHeight()},r.srcdoc=d(o),r})(Array.isArray(t)?t[0].value:t,e,n.customCSS??[]);s.appendChild(d);const l=h("div",z),c=e.history.getMessages().find((e=>e.id===i&&"assistant"===e.role));if(c&&("text"===n.type&&(!1!==n.textActions?.copy&&l.append(v({message:c,modal:e,disabled:e.isLoading,icon:"copy",label:"Copy",completedText:"Copied!",onClick:"function"==typeof n.textActions?.copy?n.textActions.copy:ce})),"function"==typeof n.textActions?.insert&&l.append(v({message:c,modal:e,disabled:e.isLoading,icon:"insert",label:"Insert",completedText:"Inserted!",onClick:n.textActions.insert}))),"image"===n.type)){!1!==n.imageActions?.copy&&l.append(v({message:c,modal:e,disabled:e.isLoading,icon:"copy",label:"Copy",loadingText:"Downloading...",completedText:"Copied!",onClick:async(e,t)=>{const o="function"==typeof n.textActions?.copy?n.textActions.copy:ce;if(!0===e.ctx.downloaded)return void o(e,t);const a=await r.mgr.download.image({url:e.content,field:n.field,namespace:n.namespace,resource:n.resource,mediaSource:n.image?.mediaSource});e.content=a.fullUrl,e.ctx.downloaded=!0,e.ctx.url=a.url,e.ctx.fullUrl=a.fullUrl,o(e,t)}}));const t=n.imageActions?.insert;"function"==typeof t&&l.append(v({message:c,modal:e,disabled:e.isLoading,icon:"insert",label:"Insert",completedText:"Inserted!",loadingText:"Downloading...",onClick:async(e,o)=>{if(!0===e.ctx.downloaded)return void t(e,o);const a=await r.mgr.download.image({url:e.content,field:n.field,namespace:n.namespace,resource:n.resource,mediaSource:n.image?.mediaSource});e.content=a.fullUrl,e.ctx.downloaded=!0,e.ctx.url=a.url,e.ctx.fullUrl=a.fullUrl,t(e,o)}}))}return a.append(s,l),e.chatMessages.appendChild(a),e.chatMessages.scrollTop=e.chatMessages.scrollHeight,a.update=e=>{const t=Array.isArray(e.content)?e.content[0].value:e.content,n="image"===e.type?`<img src="${t}" />`:m(t);d.syncContent(n),d.syncHeight()},a},le=(e,t,n)=>{if(!e.hidden)return"user"===e.role?((e,t)=>{"none"===e.chatMessages.style.display&&(e.chatMessages.style.display="block");const n=h("div",{...S,...B});let o,a=null;if(Array.isArray(t)){const[e,...n]=t;o=e.value,a=n}else o=t;const i=h("div",{display:"flex",flexDirection:"column",gap:"8px"}),r=h("div");if(r.innerHTML=m(o),i.appendChild(r),a){const e=h("div",{display:"flex",flexDirection:"row",gap:"8px",flexWrap:"wrap"});for(const t of a){const n=h("div",{width:"100px",height:"100px",borderRadius:"4px",overflow:"hidden",marginTop:"4px"}),o=h("img",{width:"100%",height:"100%",objectFit:"cover"});o.src=t.value,n.appendChild(o),e.appendChild(n)}i.appendChild(e)}return n.appendChild(i),n.update=e=>{const t=Array.isArray(e.content)?e.content[0].value:e.content;r.innerHTML=m(t)},e.chatMessages.appendChild(n),e.chatMessages.scrollTop=e.chatMessages.scrollHeight,n})(t,e.content):"image"===e.type?de(t,`<img src="${e.content}" />`,n,e.id):de(t,e.content,n,e.id)},ce=async(e,t)=>{const n=Array.isArray(e.content)?e.content[0].value:e.content;if(navigator.clipboard&&navigator.clipboard.writeText)try{await navigator.clipboard.writeText(n)}catch{se(t,_("modai.cmp.failed_copy"))}else try{const e=h("textarea");e.value=n,document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e)}catch{se(t,_("modai.cmp.failed_copy"))}},pe={modalOpen:!1},ge=(e,t,n)=>{e.isLoading=t,e.loadingIndicator.style.display=t?"flex":"none",e.messageInput.disabled=t,g(e.messageInput,t?{...R,...J}:R),t?(e.clearChatBtn.disable(),e.sendBtn.disable(),e.stopBtn.enable()):(e.clearChatBtn.enable(),e.sendBtn.enable(),e.stopBtn.disable());const o=e.history.getMessages().length>0;t||!o?e.tryAgainBtn.disable():e.tryAgainBtn.enable(),Object.values(e.typeButtons).forEach((e=>{e.disabled=t;const o=e.textContent?.toLowerCase()===n.type;g(e,t?{...ee,...o?te:{},...Y}:{...ee,...o?te:{}})})),e.chatMessages.querySelectorAll(".action-button").forEach((e=>{t?e.disable?.():e?.enable?.()}))},he=e=>{e.imagePreview&&(e.imagePreview.remove(),e.imagePreview=void 0),e.uploadedImage=void 0,e.messageInput.style.paddingLeft="15px"},me=async(e,t,n=!1)=>{if(!n&&t instanceof File&&!t.type.startsWith("image/"))return void se(e,"Only image files are allowed");e.uploadedImage&&he(e);const o=h("div",ae),a=h("img",ie),i=h("div",re,"×");if(n)a.src=t,e.uploadedImage=a.src;else{const n=await new Promise(((e,n)=>{const o=new FileReader;o.onload=function(t){e(t.target?.result)},o.onerror=function(e){n(e)},o.readAsDataURL(t)}));a.src=n,e.uploadedImage=n}i.addEventListener("click",(t=>{t.stopPropagation(),he(e)})),o.addEventListener("mouseenter",(()=>{o.style.transform="scale(1.05)",i.style.opacity="1"})),o.addEventListener("mouseleave",(()=>{o.style.transform="",i.style.opacity="0"})),o.append(a,i),e.imagePreview=o,e.messageInput.style.paddingLeft="85px",e.inputWrapper.append(o)},ue={},fe="assistant",ye=(e,t,n,o,a=!1,i="text")=>{const r=ue[e];if(!r)return;const s={content:t,role:n,id:o,hidden:a,type:i,ctx:{}},d=r.history.push(s)-1;o&&(r.idRef[o]=r.history[d]),s.el=r.onAddMessage(s)},xe={init:(e,t)=>(ue[e]||(ue[e]={history:[],idRef:{},onAddMessage:t}),ue[e].onAddMessage=t,{addUserMessage:(t,n,o,a="text")=>{ye(e,t,"user",n,o,a)},addAssistantMessage:(t,n,o="text")=>{ye(e,t,fe,n,!1,o)},updateAssistantMessage:(t,n,o="text")=>{((e,t,n,o="text")=>{const a=ue[e];if(!a)return;if(!a.idRef[t])return void ye(e,n,fe,t,!1,o);const i=a.idRef[t];i.content=n,i.el&&i.el.update&&i.el.update(i)})(e,t,n,o)},getAssistantMessage:t=>((e,t)=>{const n=ue[e];if(n)return n.idRef[t]})(e,t),getMessages:()=>ue[e].history,getMessagesHistory:()=>ue[e].history.map((e=>({role:e.role,content:e.content}))),clearHistory:()=>{ue[e].history=[]}})},be=e=>{document.removeEventListener("mousemove",(t=>l(t,e))),document.removeEventListener("mouseup",(()=>c(e))),e.modalOverlay&&e.modalOverlay.remove(),e&&e.remove(),pe.modalOpen=!1},we=async(e,t,n,o)=>{const a=n?n.trim():e.messageInput.value.trim();if(!a||e.isLoading)return;ge(e,!0,t),e.messageInput.value="",e.abortController=new AbortController;let i=a;e.uploadedImage&&"text"===t.type&&(i=[{type:"text",value:a},{type:"image",value:e.uploadedImage}]),he(e);const s=e.history.getMessagesHistory(),d="user-msg-"+Date.now()+Math.round(1e3*Math.random());e.history.addUserMessage(i,d,o);try{if("text"===t.type){const n=await r.mgr.prompt.freeText({namespace:t.namespace,context:t.context,prompt:i,field:t.field||"",messages:s},(t=>{e.history.updateAssistantMessage(t.id,t.content)}),e.abortController);e.history.updateAssistantMessage(n.id,n.content)}if("image"===t.type){const t=await r.mgr.prompt.image({prompt:i},e.abortController);e.history.addAssistantMessage(t.url,t.id,"image")}e.abortController=void 0}catch(t){if(t instanceof Error){if("AbortError"===t.name)return;return void se(e,t.message)}se(e,"Unknown error")}ge(e,!1,t)},ve=["text","image"],Ce=e=>{if(pe.modalOpen)return;if(!e.key)return void alert("key is required config property");void 0===e.overlay&&(e.overlay=!0),e.type||(e.type="text"),e.availableTypes||(e.availableTypes=[e.type]),e.availableTypes=e.availableTypes.filter((e=>ve.includes(e))),e.availableTypes.length>0&&!e.availableTypes.includes(e.type)&&e.availableTypes.unshift(e.type);const t=(e=>{const t=h("div",C),n=h("div",E);n.history=xe.init(`${e.key}/${e.type}`,(t=>le(t,n,e)));const o=h("div",k),a=h("div",M,"modAI Assistant"),i=h("div",T),r=u("✕",(()=>be(n)),I);i.append(r),o.append(a,i);const s=h("div",A),d=h("div",D),p=h("div",$),m=h("div",H),f=h("textarea",R);f.placeholder="Type your message...",f.addEventListener("dragover",(e=>{e.preventDefault(),e.stopPropagation(),f.style.borderColor="#00B6DE"})),f.addEventListener("dragleave",(e=>{e.preventDefault(),e.stopPropagation(),f.style.borderColor="#e2e8f0"})),f.addEventListener("drop",(async e=>{e.preventDefault(),e.stopPropagation(),f.style.borderColor="#e2e8f0";let t=null,o=null;const a=e.dataTransfer;if(!a)return;const i=a.files;if(i?.length>0){const e=i[0];e.type.startsWith("image/")&&(t=e)}if(!t){const e=a.getData("text/uri-list");e&&(o=e)}if(t)await me(n,t);else if(o){const e=new URL(window.location.href);if(!o.startsWith(e.origin))return void await me(n,o,!0);try{const e=await fetch(o);if(e.ok){const t=await e.blob();if(t.type.startsWith("image/")){const e=new File([t],"image.png",{type:t.type});await me(n,e)}}}catch{se(n,"Failed to fetch an image")}}else se(n,"Only image files are allowed")})),f.addEventListener("paste",(async e=>{const t=e.clipboardData?.items;if(t)for(let o=0;o<t.length;o++)if(-1!==t[o].type.indexOf("image")){const a=t[o].getAsFile();if(a){e.preventDefault(),await me(n,a);break}}})),r.addEventListener("click",(()=>{be(n)}));const y=h("div",j),x=u([h("span",q),"Send"],(()=>we(n,e)),P,Y),b=h("div",U),w=u(h("span",W),(()=>((e,t)=>{e.isLoading&&e.abortController&&(e.abortController.abort(),e.abortController=void 0,ge(e,!1,t))})(n,e)),F,Y,{title:"Stop Generation"});w.disable();const v=u(h("span",V),(()=>((e,t)=>{if(0!==e.history.getMessages().length)if("text"!==t.type){if("image"===t.type){const n=e.history.getMessages().reverse().find((e=>"user"===e.role));n&&we(e,t,n.content)}}else we(e,t,"Try again")})(n,e)),F,Y,{title:"Try Again"});b.append(w,v),y.append(x,b),m.append(f),p.append(m,y);const S=h("div",X);S.innerHTML='\n    <style>\n        @keyframes loadingDotPulse {\n            0%, 80%, 100% { transform: scale(0.6); opacity: 0.3; }\n            40% { transform: scale(1); opacity: 1; }\n        }\n        .loading-dots {\n            display: flex;\n            gap: 4px;\n            padding: 8px 16px;\n            background-color: rgba(255, 255, 255, 0.8);\n            border-radius: 16px;\n        }\n        .loading-dot {\n            width: 8px;\n            height: 8px;\n            background-color: #6B7280;\n            border-radius: 50%;\n            display: inline-block;\n            animation: loadingDotPulse 1.4s infinite ease-in-out both;\n        }\n        .loading-dot:nth-child(1) { animation-delay: -0.32s; }\n        .loading-dot:nth-child(2) { animation-delay: -0.16s; }\n        .loading-dot:nth-child(3) { animation-delay: 0s; }\n    </style>\n    <div class="loading-dots">\n        <div class="loading-dot"></div>\n        <div class="loading-dot"></div>\n        <div class="loading-dot"></div>\n    </div>\n',m.append(S);const L=h("div",G),B=h("div",K),O=h("div",Q,"Generate:"),_=h("div",Z),z={};(e.availableTypes??[]).forEach((t=>{const o=h("button",ee,t.charAt(0).toUpperCase()+t.slice(1));t===e.type&&(g(o,{...ee,...te}),o.disabled=!0),o.addEventListener("click",(()=>{t!==e.type&&(Object.values(z).forEach((e=>{g(e,ee),e.disabled=!1})),g(o,{...ee,...te}),o.disabled=!0,((e,t,n)=>{for(n.type=e,t.history=xe.init(`${n.key}/${n.type}`,(e=>le(e,t,n)));t.chatMessages.firstChild;)t.chatMessages.removeChild(t.chatMessages.firstChild);t.chatMessages.style.display="none";const o=t.history.getMessages().filter((e=>!e.hidden));o.length>0?(t.chatMessages.style.display="block",o.forEach((e=>{le(e,t,n)})),t.tryAgainBtn.enable(),t.clearChatBtn.enable()):(t.tryAgainBtn.disable(),t.clearChatBtn.disable())})(t,n,e))})),z[t]=o,_.appendChild(o)})),B.append(O,_),d.append(p),n.append(o,s,d),L.append(B);const J=u("Clear Chat",(()=>(e=>{for(;e.chatMessages.firstChild;)e.chatMessages.removeChild(e.chatMessages.firstChild);e.chatMessages.style.display="none",e.history.clearHistory(),e.tryAgainBtn.disable(),e.clearChatBtn.disable()})(n)),N,Y);return L.append(J),n.append(L),e.overlay&&document.body.append(t),document.body.append(n),0===n.history.getMessages().length&&(J.disable(),v.disable()),f.addEventListener("keydown",(t=>{if("Enter"===t.key){if(t.shiftKey)return;t.preventDefault(),we(n,e)}})),o.addEventListener("mousedown",(e=>((e,t)=>{t.isDragging=!0;const n=t.getBoundingClientRect();t.offsetX=e.clientX-n.left,t.offsetY=e.clientY-n.top,document.body.style.userSelect="none"})(e,n))),document.addEventListener("mousemove",(e=>l(e,n))),document.addEventListener("mouseup",(()=>c(n))),n.modalOverlay=t,n.chatHeader=o,n.closeBtn=r,n.chatMessages=s,n.messageInput=f,n.sendBtn=x,n.tryAgainBtn=v,n.stopBtn=w,n.clearChatBtn=J,n.loadingIndicator=S,n.typeSelector=B,n.typeButtons=z,n.inputWrapper=m,n.isDragging=!1,n.isLoading=!1,n.abortController=void 0,n.offsetX=0,n.offsetY=0,n})(e);return t.api={sendMessage:async(n,o)=>{await we(t,e,n,o)},closeModal:()=>{be(t)}},((e,t)=>{e.chatMessages.innerHTML="",e.chatMessages.style.display="none",e.style.visibility="hidden",e.style.display="flex",e.modalOverlay.style.display="block";const n=e.history.getMessages().filter((e=>!e.hidden));n.length>0&&(e.chatMessages.style.display="block",n.forEach((n=>{le(n,e,t)}))),setTimeout((()=>{e.chatMessages.scrollTop=e.chatMessages.scrollHeight,e.style.visibility="visible"}),100)})(t,e),pe.modalOpen=!0,t},Ee=(e,t={})=>{const n={indicatorType:t.indicatorType||"spinner",overlayColor:t.overlayColor||"rgba(255, 255, 255, 0.7)",indicatorColor:t.indicatorColor||"#3498db"},o=document.createElement("div"),a=document.createElement("div"),i=window.getComputedStyle(e),r=e.getBoundingClientRect();t.indicatorColor||(n.indicatorType=r.height<=50?"dots":"spinner"),o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.backgroundColor=n.overlayColor,o.style.display="flex",o.style.justifyContent="center",o.style.alignItems="center",o.style.zIndex="10000",o.style.borderRadius=i.borderRadius;let s="";if("spinner"===n.indicatorType)a.style.border="4px solid #f3f3f3",a.style.borderTop=`4px solid ${n.indicatorColor}`,a.style.borderRadius="50%",a.style.width="30px",a.style.height="30px",a.style.animation="textareaOverlaySpin 1s linear infinite",s="\n      @keyframes textareaOverlaySpin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    ";else if("dots"===n.indicatorType){a.style.display="flex",a.style.alignItems="center",a.style.justifyContent="center",a.style.height="20px";for(let e=0;e<3;e++){const t=document.createElement("div");t.style.width="8px",t.style.height="8px",t.style.borderRadius="50%",t.style.backgroundColor=n.indicatorColor,t.style.margin="0 4px",t.style.animation="textareaOverlayDotPulse 1.4s infinite ease-in-out",t.style.animationDelay=.2*e+"s",a.appendChild(t)}s="\n      @keyframes textareaOverlayDotPulse {\n        0%, 80%, 100% { transform: scale(0); opacity: 0.5; }\n        40% { transform: scale(1); opacity: 1; }\n      }\n    "}const d=document.createElement("style");d.textContent=s,document.head.appendChild(d),o.appendChild(a);const l=window.getComputedStyle(e.parentElement);let c;-1===["relative","absolute","fixed"].indexOf(l.position)?(c=document.createElement("div"),c.style.position="relative",c.style.width=`${r.width}px`,c.style.height=`${r.height}px`,c.style.display="inline-block",e.parentNode?.insertBefore(c,e),c.appendChild(e)):c=e.parentElement,o.style.display="none",c.appendChild(o);const p=e.getBoundingClientRect();return c!==e.parentElement&&(c.style.width=`${p.width}px`,c.style.height=`${p.height}px`),o.style.display="flex",e.setAttribute("disabled","disabled"),()=>{o.style.display="none",e.removeAttribute("disabled"),o.remove(),d.remove(),c!==e.parentElement&&(c.parentNode?.insertBefore(e,c),c.remove())}},ke={createLoadingOverlay:Ee,localChat:e=>Ce(e)},Me=(e,t)=>{e.context.els.forEach((({wrapper:n,field:o})=>{const a=o.getValue();o.setValue(e.value),o.fireEvent("change",o,e.value,a),t&&(o.el.dom.scrollTop=o.el.dom.scrollHeight),e.total>0&&n.historyNav.show(),n.historyNav.info.update(e.current,e.total),e.prevStatus?n.historyNav.prevButton.enable():n.historyNav.prevButton.disable(),e.nextStatus?n.historyNav.nextButton.enable():n.historyNav.nextButton.disable()}))},Te=()=>{const e=document.createElement("button");return e.className="modai-generate",e.innerText="✦",e.type="button",e.title="Generate using AI",e},Ie=e=>{const t=document.createElement("button");t.type="button",t.title="Previous Version",t.className="modai-history_prev",t.disable=()=>{t.disabled=!0},t.enable=()=>{t.disabled=!1},t.innerHTML="prev",t.addEventListener("click",(()=>{e.prev()}));const n=document.createElement("button");n.type="button",n.title="Next Version",n.className="modai-history_next",n.disable=()=>{n.disabled=!0},n.enable=()=>{n.disabled=!1},n.innerHTML="next",n.addEventListener("click",(()=>{e.next()}));const o=document.createElement("span");o.update=(e,t)=>{o.innerText=`${e}/${t}`},o.innerText="";const a=document.createElement("span");return a.show=()=>{a.style.display="initial"},a.hide=()=>{a.style.display="none"},a.prevButton=t,a.nextButton=n,a.info=o,a.appendChild(t),a.appendChild(n),a.appendChild(o),a.hide(),t.disable(),n.disable(),a},Ae=e=>{const t=Te();return t.addEventListener("click",(()=>{ke.localChat({key:e,field:e,overlay:!1,type:"text",availableTypes:["text","image"],resource:MODx.request.id})})),t},Se=(e,t)=>{const n=document.createElement("span"),o=Te();o.addEventListener("click",(async()=>{const n=Ee(e.el.dom);try{const e=await r.mgr.prompt.text({id:MODx.request.id,field:t});a.insert(e.content),n()}catch(e){n(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e instanceof Error?e.message:""}))}})),n.appendChild(o);const a=d.init(t,Me,e.getValue(),{});a.cachedItem.context.els||(a.cachedItem.context.els=[]),a.cachedItem.context.els.push({field:e,wrapper:n});const i=Ie(a);return n.appendChild(i),n.historyNav=i,n},Le=(e,t,n)=>{const o=Te();return o.addEventListener("click",(()=>{ke.localChat({key:t,field:t,type:"image",resource:MODx.request.id,image:{mediaSource:parseInt(e)||void 0},imageActions:{copy:!1,insert:(e,t)=>{n(e),t.api.closeModal()}}})})),o},Be=(e,t)=>{const n=Ext.getCmp(e);if(!n)return;const o=document.createElement("span"),a=Te();a.addEventListener("click",(async()=>{const e=Ee(n.el.dom);try{const n=await r.mgr.prompt.text({id:MODx.request.id,field:t},(e=>{i.insert(e.content,!0)}));i.insert(n.content),e()}catch(t){e(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:t instanceof Error?t.message:""}))}})),o.appendChild(a);const i=d.init(t,Me,n.getValue(),{});i.cachedItem.context.els||(i.cachedItem.context.els=[]),i.cachedItem.context.els.push({field:n,wrapper:o});const s=Ie(i);o.appendChild(s),o.historyNav=s,n.label.appendChild(o)},Oe=(e,t)=>{const n=Ext.getCmp(e.firstElementChild?.id),o=Le(n.imageBrowser.source,t,(function(e){n.imageBrowser.setValue(e.ctx.url),n.onImageChange(e.ctx.url)})),a=Te();a.style.marginTop="6px",a.addEventListener("click",(async()=>{const e=n.imagePreview.el.dom,o=document.createElement("canvas"),a=o.getContext("2d");if(!a)return;o.width=e.width,o.height=e.height,a.drawImage(e,0,0);const i=o.toDataURL("image/png"),s=Ee(n.altTextField.items.items[0].el.dom);try{const e=await r.mgr.prompt.vision({image:i,field:t},(e=>{n.altTextField.items.items[0].setValue(e.content),n.altTextField.items.items[0].el.dom.scrollTop=n.altTextField.items.items[0].el.dom.scrollHeight,n.image.altTag=e.content,n.updateValue()}));n.altTextField.items.items[0].setValue(e.content),n.image.altTag=e.content,n.updateValue(),s()}catch(e){s(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e instanceof Error?e.message:""}))}})),n.altTextField.el.dom.style.display="flex",n.altTextField.el.dom.style.justifyItems="center",n.altTextField.el.dom.style.alignItems="center",n.el.dom.parentElement?.parentElement?.parentElement?.querySelector("label")?.appendChild(o),n.altTextField.el.dom.appendChild(a)},_e=()=>{const e=Ext.getCmp("modx-resource-content").el.dom.querySelector("label");e?.appendChild(Ae("res.content"))};Ext.onReady((function(){Ext.defer((function(){(()=>{const e={pagetitle:["modx-resource-pagetitle"],longtitle:["modx-resource-longtitle","seosuite-longtitle"],introtext:["modx-resource-introtext"],description:["modx-resource-description","seosuite-description"],content:["modx-resource-content"]};for(const t of modAI?.resourceFields||[])e[t]&&("content"!==t?e[t].forEach((e=>{Be(e,`res.${t}`)})):_e())})(),(()=>{const e=Ext.getCmp("modx-panel-resource").getForm();for(const[t,n]of modAI?.tvs||[]){const o=Ext.get(`tv${t}-tr`);if(!o)continue;const a=e.findField(`tv${t}`),i=`tv.${n}`;if(a){if("textfield"===a.xtype||"textarea"===a.xtype){const e=MODx.config[`modai.tv.${n}.text.prompt`],t=o.dom.querySelector("label");if(!t)return;e?t.appendChild(Se(a,i)):t.appendChild(Ae(i))}if("modx-panel-tv-image"===a.xtype){const e=Le(a.source,i,(function(e){const t={relativeUrl:e.ctx.url,url:e.ctx.url};a.items.items[1].fireEvent("select",t),a.fireEvent("select",t)})),t=o.dom.querySelector("label");if(!t)return;t.appendChild(e)}}else{const e=o.dom.querySelector(".imageplus-panel-input");e&&Oe(e,i)}}})()}),500)}));const ze={};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
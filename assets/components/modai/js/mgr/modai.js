!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.modAI=t():e.modAI=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{chatHistory:()=>h,executor:()=>r,history:()=>d,ui:()=>ie,window:()=>ue});const n={buffered:{chatgpt:{content:e=>{const t=e?.choices?.[0]?.message?.content;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}},image:e=>{const t=e?.data?.[0]?.url;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`chatgpt-${Date.now()}-${Math.round(1e3*Math.random())}`,url:t}}},claude:{content:e=>{const t=e?.content?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}}},gemini:{content:e=>{const t=e?.candidates?.[0]?.content?.parts?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,content:t}},image:e=>{const t=e?.predictions?.[0]?.bytesBase64Encoded;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,url:`data:image/png;base64,${t}`}}}},stream:{chatgpt:{content:(e,t)=>{const n=t?.content??"",o=e.choices[0]?.delta?.content||"";return{...t,id:e.id,content:`${n}${o}`}}},claude:{content:(e,t)=>{const n=t?.content??"",o=e.delta?.text||"";return{...t,content:`${n}${o}`}}},gemini:{content:(e,t)=>{const n=t?.content??"",o=e.candidates[0]?.content?.parts[0]?.text||"";return{...t,content:`${n}${o}`}}}}},o=async e=>{if(!e.ok){const t=await e.json();if(t?.error)throw new Error(t.error.message);throw new Error(`${e.status} ${e.statusText}`)}},a=async(e,t,o,a,i)=>{if(!e.body)throw new Error("failed");const r=e.body.getReader(),s=new TextDecoder("utf-8");let d="",l={id:`${t}-${Date.now()}-${Math.round(1e3*Math.random())}`,content:""};for(;!i||!i.aborted;){const{done:e,value:i}=await r.read();if(e)break;const c=s.decode(i,{stream:!0});if("gemini"===t){const e=c.trim().split(",\r\n").map((e=>e.replace(/^\[|]$/g,""))).filter((e=>""!==e.trim()));for(const i of e)try{const e=JSON.parse(i);l=n.stream[t][o](e,l),a&&a(l)}catch{}}if("chatgpt"===t){d+=c;let e,i=0;for(;-1!==(e=d.indexOf("\n",i));){const r=d.slice(i,e).trim();if(i=e+1,r.startsWith("data: ")){const e=r.slice(6);if("[DONE]"===e)continue;try{const i=JSON.parse(e);l=n.stream[t][o](i,l),a&&a(l)}catch{}}}d=d.slice(i)}if("claude"===t){d+=c;let e,i=0;for(;-1!==(e=d.indexOf("\n",i));){const r=d.slice(i,e).trim();if(i=e+1,r.startsWith("data: ")){const e=r.slice(6);try{const i=JSON.parse(e);if("message_start"===i.type){l.id=i.message.id;continue}if("content_block_delta"!==i.type)continue;l=n.stream[t][o](i,l),a&&a(l)}catch{}}}d=d.slice(i)}}return l},i=async(e,t,i,r)=>{const s=(r=r||new AbortController).signal,d=await fetch(`${modAI.apiURL}?action=${e}`,{signal:s,method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!d.ok){const e=await d.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}const l=d.headers.get("x-modai-service")??"chatgpt",c=d.headers.get("x-modai-parser")??"content",p=1===parseInt(d.headers.get("x-modai-stream")??"0");if(1!==parseInt(d.headers.get("x-modai-proxy")??"0")){return(async(e,t,i)=>{if("object"!=typeof e||!e.forExecutor)return e;const r=e.forExecutor,s=(i=i||new AbortController).signal;if(!r.service||!r.parser)throw new Error(_("modai.cmp.service_required"));if(!n[r.stream?"stream":"buffered"]?.[r.service]?.[r.parser])throw new Error(_("modai.cmp.service_unsupported"));if(r.stream)return(async e=>{if("content"!==r.parser)throw new Error(_("modai.cmp.service_unsupported"));const n=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});return await o(n),a(n,r.service,r.parser,t)})(r);const d=await(async e=>{const t=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});await o(t);const n=await t.json();if(n.error)throw new Error(n.error.message);return n})(r);return n.buffered[r.service][r.parser](d)})(await d.json(),i,r)}if(!l||!c)throw r.abort(),new Error(_("modai.cmp.service_required"));if(!n[p?"stream":"buffered"]?.[l]?.[c])throw r.abort(),new Error(_("modai.cmp.service_unsupported"));if(!p){const e=await d.json();return n.buffered[l][c](e)}if("content"!==c)throw new Error(_("modai.cmp.service_unsupported"));return await a(d,l,c,i,s)},r={mgr:{download:{image:async e=>await(async(e,t)=>{const n=await fetch(`${modAI.apiURL}?action=Download\\Image`,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!n.ok){const e=await n.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}return await n.json()})(0,e)},prompt:{freeText:async(e,t,n)=>i("Prompt\\FreeText",e,t,n),text:async(e,t,n)=>i("Prompt\\Text",e,t,n),vision:async(e,t,n)=>i("Prompt\\Vision",e,t,n),image:async(e,t)=>i("Prompt\\Image",e,void 0,t)}}},s={},d={_formatOutput(e,t){const n=s[e],o=n.visible>0,a=n.visible!==n.values.length-1;return{value:void 0!==t?t:n.values[n.visible]??null,nextStatus:a,prevStatus:o,current:n.visible+1,total:n.values.length,context:n.context}},insert(e,t,n=!1){const o=s[e];n||(o.visible=o.values.push(t)-1);const a=this._formatOutput(e,t);return"function"==typeof o.syncUI&&o.syncUI(a,n),a},next(e){const t=s[e];if(t.visible===t.values.length-1)return this._formatOutput(e);t.visible++;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},prev(e){const t=s[e];if(t.visible<=0)return this._formatOutput(e);t.visible--;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},init(e,t,n,o){return s[e]||(s[e]={visible:-1,values:[],context:o}),s[e].syncUI=t,n&&(s[e].values=[n],s[e].visible=0),{cachedItem:s[e],getData:()=>this._formatOutput(e),getAll:()=>s[e].values,syncUI:()=>{"function"==typeof s[e].syncUI&&s[e].syncUI(this._formatOutput(e),!1)},insert:(t,n=!1)=>this.insert(e,t,n),next:()=>this.next(e),prev:()=>this.prev(e)}}},l=(e,t)=>{Object.assign(e.style,t)},c=(e,t,n="")=>{const o=document.createElement(e);return t&&l(o,t),n&&(o.textContent=n),o},p=e=>/<[^>]*>/g.test(e)?e:e.replace(/\r\n|\n|\r/g,"<br>"),g={},m="assistant",u=(e,t,n,o,a=!1,i="text")=>{const r=g[e];if(!r)return;const s={content:t,role:n,id:o,hidden:a,type:i,ctx:{}},d=r.history.push(s)-1;o&&(r.idRef[o]=r.history[d]),s.el=r.onAddMessage(s)},h={init:(e,t)=>(g[e]||(g[e]={history:[],idRef:{},onAddMessage:t}),g[e].onAddMessage=t,{addUserMessage:(t,n,o,a="text")=>{u(e,t,"user",n,o,a)},addAssistantMessage:(t,n,o="text")=>{u(e,t,m,n,!1,o)},updateAssistantMessage:(t,n,o="text")=>{((e,t,n,o="text")=>{const a=g[e];if(!a)return;if(!a.idRef[t])return void u(e,n,m,t,!1,o);const i=a.idRef[t];i.content=n,i.el&&i.el.update&&i.el.update(i)})(e,t,n,o)},getAssistantMessage:t=>((e,t)=>{const n=g[e];if(n)return n.idRef[t]})(e,t),getMessages:()=>g[e].history,getMessagesHistory:()=>g[e].history.map((e=>({role:e.role,content:e.content})))})},f={loadingText:"Loading...",completedText:"Completed!",completedTextDuration:2e3,disabled:!1},x={backgroundColor:"#edf2f7",border:"1px solid #cbd5e0",borderRadius:"4px",padding:"3px 8px",fontSize:"12px",cursor:"pointer",display:"flex",alignItems:"center",color:"#4a5568",opacity:"1"},y={display:"inline-block",width:"14px",height:"14px",marginRight:"5px",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},b={opacity:"0.5",cursor:"not-allowed"},v={copy:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z'/%3E%3Cpath d='M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z'/%3E%3C/svg%3E",insert:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/%3E%3Cpath d='M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z'/%3E%3C/svg%3E"},w=e=>{e={...f,...e};const t=c("button",x);t.className="action-button",t.enable=()=>{t.disabled=!1,l(t,x)},t.disable=()=>{t.disabled=!0,l(t,{...x,...b})},e.disabled&&t.disable();const n=c("span",{...y,backgroundImage:`url("${v[e.icon]}")`});return t.append(n),t.append(document.createTextNode(e.label)),t.addEventListener("click",(async()=>{const n=t.innerHTML,o=e.onClick(e.message,e.modal);if(o instanceof Promise){t.innerHTML=`\n                <span style="\n                    display: inline-block;\n                    margin-right: 5px;\n                    width: 12px;\n                    height: 12px;\n                    position: relative;\n                    animation: spin 1s linear infinite;\n                ">\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        top: 0;\n                        left: 50%;\n                        transform: translate(-50%, 0);\n                    "></span>\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        top: 50%;\n                        right: 0;\n                        transform: translate(0, -50%);\n                    "></span>\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        bottom: 0;\n                        left: 50%;\n                        transform: translate(-50%, 0);\n                    "></span>\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        top: 50%;\n                        left: 0;\n                        transform: translate(0, -50%);\n                    "></span>\n                </span>\n                ${e.loadingText}\n            `;const n=document.createElement("style");n.textContent="\n                @keyframes spin {\n                    from { transform: rotate(0deg); }\n                    to { transform: rotate(360deg); }\n                }\n            ",document.head.appendChild(n),await o,document.head.removeChild(n)}t.innerHTML=`\n                <span style="margin-right: 5px;">✓</span>\n                ${e.completedText}\n            `,await new Promise((e=>setTimeout(e,2e3))),t.innerHTML=n})),t},C=["text","image"],E={position:"fixed",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.3)",display:"none",zIndex:"100"},k={position:"fixed",width:"1000px",minHeight:"170px",maxHeight:"600px",backgroundColor:"#fff",borderRadius:"10px",boxShadow:"0 5px 15px rgba(0, 0, 0, 0.3)",display:"none",flexDirection:"column",overflow:"hidden",zIndex:"101",top:"50%",left:"50%",transform:"translate(-50%, -50%)",transition:"height 0.3s ease-in-out"},M={backgroundColor:"#00B6DE",color:"white",padding:"15px",display:"flex",justifyContent:"space-between",alignItems:"center",cursor:"move"},T={fontWeight:"bold",fontSize:"16px"},I={display:"flex",gap:"10px"},S={background:"none",border:"none",color:"white",fontSize:"16px",cursor:"pointer"},A={flex:"1",padding:"15px",overflowY:"auto",backgroundColor:"#f9f9f9",width:"100%",boxSizing:"border-box",display:"none"},L={marginBottom:"20px",borderRadius:"8px",position:"relative",wordWrap:"break-word",width:"100%",boxSizing:"border-box"},$={width:"100%",backgroundColor:"#ffffff",border:"1px solid #e2e8f0",boxShadow:"0 2px 5px rgba(0, 0, 0, 0.05)"},B={width:"fit-content",padding:"10px 15px",backgroundColor:"#4299e1",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px"},O={padding:"12px",width:"100%",maxWidth:"100%",overflow:"hidden",boxSizing:"border-box"},z={display:"flex",padding:"8px 12px",gap:"8px",backgroundColor:"#f7fafc",borderTop:"1px solid #e2e8f0",borderRadius:"0 0 8px 8px"},H={display:"flex",padding:"15px",borderTop:"1px solid #e2e8f0",backgroundColor:"white",position:"relative"},D={display:"flex",width:"100%",gap:"10px"},R={flex:"1",position:"relative",minHeight:"48px",maxHeight:"150px",display:"flex"},j={width:"100%",padding:"12px 15px",border:"1px solid #e2e8f0",borderRadius:"10px",outline:"none",fontSize:"14px",resize:"none",minHeight:"48px",maxHeight:"150px",overflowY:"auto",backgroundColor:"#fff",cursor:"inherit"},P={display:"flex",flexDirection:"column",gap:"4px",width:"100px"},N={backgroundColor:"#6CB24A",color:"white",border:"none",borderRadius:"12px",padding:"8px 16px",cursor:"pointer",fontWeight:"bold",height:"40px",minWidth:"100px",fontSize:"14px",display:"flex",alignItems:"center",justifyContent:"center",gap:"6px",opacity:"1"},U={display:"flex",gap:"4px",justifyContent:"space-between"},q={backgroundColor:"transparent",border:"1px solid #e2e8f0",borderRadius:"8px",width:"48px",height:"32px",padding:"0",cursor:"pointer",display:"flex",alignItems:"center",justifyContent:"center",transition:"background-color 0.2s",opacity:"1"},V={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},F={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23DC2626'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M6 6h12v12H6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},W={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%234B5563'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},Y={opacity:"0.5",cursor:"not-allowed"},J={backgroundColor:"#f3f4f6",cursor:"not-allowed"},X={display:"none",position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(243, 244, 246, 0.9)",borderRadius:"10px",color:"#6B7280",fontSize:"14px",alignItems:"center",justifyContent:"center",gap:"4px",flexDirection:"row",zIndex:"10",backdropFilter:"blur(2px)",border:"1px solid #e2e8f0",pointerEvents:"none"},G={padding:"5px 15px",display:"flex",alignItems:"center",gap:"10px",borderTop:"1px solid #e2e8f0",backgroundColor:"white"},K={fontSize:"14px",color:"#4B5563",fontWeight:"500"},Q={display:"flex",gap:"4px"},Z={padding:"6px 12px",fontSize:"13px",border:"1px solid #e2e8f0",borderRadius:"6px",backgroundColor:"#fff",color:"#4B5563",cursor:"pointer",transition:"all 0.2s",opacity:"1"},ee={backgroundColor:"#00B6DE",color:"#fff",borderColor:"#00B6DE"},te={width:"fit-content",padding:"10px 15px",backgroundColor:"#DC2626",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px",display:"flex",alignItems:"center",gap:"8px"},ne={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},oe=e=>{if(!e.key)return void alert("key is required config property");e.type||(e.type="text"),e.availableTypes||(e.availableTypes=[]),e.availableTypes=e.availableTypes.filter((e=>C.includes(e))),e.availableTypes.length>0&&!e.availableTypes.includes(e.type)&&e.availableTypes.unshift(e.type);const t=()=>{document.removeEventListener("mousemove",o),document.removeEventListener("mouseup",a),b.modalOverlay&&b.modalOverlay.remove(),b&&b.remove()},n=e=>{b.isDragging=!0;const t=b.getBoundingClientRect();b.offsetX=e.clientX-t.left,b.offsetY=e.clientY-t.top,document.body.style.userSelect="none"},o=e=>{if(!b.isDragging)return;const t=e.clientX-b.offsetX,n=e.clientY-b.offsetY;b.style.left=t+"px",b.style.top=n+"px",b.style.transform="none"},a=()=>{b.isDragging=!1,document.body.style.userSelect=""},i=()=>{b.isLoading&&b.abortController&&(b.abortController.abort(),b.abortController=void 0,f(!1))},s=()=>{if(0!==y.getMessages().length)if("text"!==e.type)if("image"!==e.type);else{const e=y.getMessages().reverse().find((e=>"user"===e.role));e&&x(e.content)}else x("Try again")},d=e=>{"none"===b.chatMessages.style.display&&(b.chatMessages.style.display="block");const t=c("div",{...L,...te}),n=c("span",ne);t.appendChild(n);const o=c("span");return o.textContent=e,t.appendChild(o),b.chatMessages.appendChild(t),b.chatMessages.scrollTop=b.chatMessages.scrollHeight,t},g=(t,n)=>{"none"===b.chatMessages.style.display&&(b.chatMessages.style.display="block");const o=c("div",{...L,...$}),a=n||"msg-"+Date.now(),i=c("div",O),s=((e,t,n=[])=>{const o=p(e),a=c("iframe",{width:"100%",border:"none",backgroundColor:"white",pointerEvents:"none",maxWidth:"100%",boxSizing:"border-box"});return a.srcdoc=`\n        <html>\n        <head>\n            <style>\n                html {\n                    width: 100%;\n                    max-width: 100%;\n                    padding: 0;\n                    margin: 0;\n                }\n                body {\n                    margin: 0;\n                    padding: 0;\n                    font-family: Arial, sans-serif;\n                    overflow-x: hidden;\n                    width: 100%;\n                    max-width: 100%;\n                    box-sizing: border-box;\n                }\n                * {\n                    box-sizing: border-box;\n                    max-width: 100%;\n                }\n                pre {\n                    white-space: pre-wrap;\n                    word-wrap: break-word;\n                    overflow-wrap: break-word;\n                    max-width: 100%;\n                    padding: 12px;\n                    margin: 0;\n                    background-color: #f5f7fa;\n                    border-radius: 5px;\n                    font-size: 14px;\n                }\n                img {\n                    max-width: 100%;\n                    height: auto;\n                    display: block;\n                }\n                code {\n                    white-space: pre-wrap;\n                    word-wrap: break-word;\n                    max-width: 100%;\n                    display: block;\n                    overflow-x: hidden;\n                    font-size: 14px;\n                }\n                table {\n                    width: 100%;\n                    max-width: 100%;\n                    overflow-x: hidden;\n                    display: block;\n                    border-collapse: collapse;\n                }\n                div {\n                    max-width: 100%;\n                    overflow-wrap: break-word;\n                    word-wrap: break-word;\n                    box-sizing: border-box;\n                }\n                p {\n                    margin: 0 0 0.5em 0;\n                    max-width: 100%;\n                }\n                h1, h2, h3, h4, h5, h6 {\n                    margin: 0 0 0.1em 0;\n                    max-width: 100%;\n                }\n            </style>\n            ${n.map((e=>`<link rel="stylesheet" type="text/css" href="${e}" />`)).join("")}\n        </head>\n        <body style="padding: 0; max-width: 100%; width: 100%; box-sizing: border-box;">${o}</body>\n        </html>\n    `,a.syncHeight=()=>{const e=a.contentWindow?.document.body;if(!e)return;const n=e.getElementsByTagName("*");let o=e.offsetHeight;for(let e=0;e<n.length;e++){const t=n[e],a=t.offsetTop+t.offsetHeight;o=Math.max(o,a)}a.style.height=o+5+"px",e.style.overflow="hidden",t.chatMessages.scrollTop=t.chatMessages.scrollHeight},a.onload=a.syncHeight,a})(t,b,e.customCSS??[]);i.appendChild(s);const d=c("div",z),l=y.getAssistantMessage(a);if(l&&("text"===e.type&&(!1!==e.textActions?.copy&&d.append(w({message:l,modal:b,disabled:b.isLoading,icon:"copy",label:"Copy",completedText:"Copied!",onClick:"function"==typeof e.textActions?.copy?e.textActions.copy:u})),"function"==typeof e.textActions?.insert&&d.append(w({message:l,modal:b,disabled:b.isLoading,icon:"insert",label:"Insert",completedText:"Inserted!",onClick:e.textActions.insert}))),"image"===e.type)){!1!==e.imageActions?.copy&&d.append(w({message:l,modal:b,disabled:b.isLoading,icon:"copy",label:"Copy",loadingText:"Downloading...",completedText:"Copied!",onClick:async(t,n)=>{const o="function"==typeof e.textActions?.copy?e.textActions.copy:u;if(!0===t.ctx.downloaded)return void o(t,n);const a=await r.mgr.download.image({url:t.content,field:e.field,namespace:e.namespace,resource:e.resource,mediaSource:e.image?.mediaSource});t.content=a.fullUrl,t.ctx.downloaded=!0,t.ctx.url=a.url,t.ctx.fullUrl=a.fullUrl,o(t,n)}}));const t=e.imageActions?.insert;"function"==typeof t&&d.append(w({message:l,modal:b,disabled:b.isLoading,icon:"insert",label:"Insert",completedText:"Inserted!",loadingText:"Downloading...",onClick:async(n,o)=>{if(!0===n.ctx.downloaded)return void t(n,o);const a=await r.mgr.download.image({url:n.content,field:e.field,namespace:e.namespace,resource:e.resource,mediaSource:e.image?.mediaSource});n.content=a.fullUrl,n.ctx.downloaded=!0,n.ctx.url=a.url,n.ctx.fullUrl=a.fullUrl,t(n,o)}}))}return o.append(i,d),b.chatMessages.appendChild(o),b.chatMessages.scrollTop=b.chatMessages.scrollHeight,o.update=e=>{const t=s.contentDocument;t&&("image"===e.type?t.body.innerHTML=`<img src="${e.content}" />`:t.body.innerHTML=p(e.content),s.syncHeight())},o},m=e=>{if(!e.hidden)return"user"===e.role?(e=>{"none"===b.chatMessages.style.display&&(b.chatMessages.style.display="block");const t=c("div",{...L,...B});return t.innerHTML=p(e),t.update=e=>{t.innerHTML=p(e.content)},b.chatMessages.appendChild(t),b.chatMessages.scrollTop=b.chatMessages.scrollHeight,t})(e.content):"image"===e.type?g(`<img src="${e.content}" />`,e.id):g(e.content,e.id)},u=async e=>{if(navigator.clipboard&&navigator.clipboard.writeText)try{await navigator.clipboard.writeText(e.content)}catch{d(_("modai.cmp.failed_copy"))}else try{const t=c("textarea");t.value=e.content,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}catch(e){d(_("modai.cmp.failed_copy"))}},f=t=>{b.isLoading=t,b.loadingIndicator.style.display=t?"flex":"none",b.messageInput.disabled=t,l(b.messageInput,t?{...j,...J}:j),b.sendBtn.disabled=t,l(b.sendBtn,t?{...N,...Y}:N),b.stopBtn.disabled=!t,l(b.stopBtn,t?q:{...q,...Y});const n=y.getMessages().length>0;b.tryAgainBtn.disabled=t||!n,l(b.tryAgainBtn,t||!n?{...q,...Y}:q),Object.values(b.typeButtons).forEach((n=>{n.disabled=t;const o=n.textContent?.toLowerCase()===e.type;l(n,t?{...Z,...o?ee:{},...Y}:{...Z,...o?ee:{}})})),b.chatMessages.querySelectorAll(".action-button").forEach((e=>{t?e.disable?.():e?.enable?.()}))},x=async(t,n)=>{const o=t?t.trim():b.messageInput.value.trim();if(!o||b.isLoading)return;f(!0),b.messageInput.value="",b.abortController=new AbortController;const a=y.getMessagesHistory(),i="user-msg-"+Date.now()+Math.round(1e3*Math.random());y.addUserMessage(o,i,n);try{if("text"===e.type){const t=await r.mgr.prompt.freeText({namespace:e.namespace,context:e.context,prompt:o,field:e.field||"",messages:a},(e=>{y.updateAssistantMessage(e.id,e.content)}),b.abortController);y.updateAssistantMessage(t.id,t.content)}if("image"===e.type){const e=await r.mgr.prompt.image({prompt:o},b.abortController);y.addAssistantMessage(e.url,e.id,"image")}b.abortController=void 0}catch(e){if(e instanceof Error){if("AbortError"===e.name)return;return void d(e.message)}d("Unknown error")}f(!1)};let y=h.init(`${e.key}/${e.type}`,(e=>m(e)));const b=(()=>{const r=c("div",E),d=c("div",k),p=c("div",M),g=c("div",T,"modAI Assistant"),u=c("div",I),f=c("button",S,"✕");u.append(f),p.append(g,u);const v=c("div",A),w=c("div",H),C=c("div",D),_=c("div",R),L=c("textarea",j);L.placeholder="Type your message...";const $=c("div",P),B=c("button",N),O=c("span",V),z=document.createTextNode("Send");B.append(O,z);const J=c("div",U),te=c("button",{...q,...Y}),ne=c("span",F);te.appendChild(ne),te.title="Stop Generation";const oe=c("button",q),ae=c("span",W);oe.appendChild(ae),oe.title="Try Again",0===y.getMessages().length&&(oe.disabled=!0,l(oe,{...q,...Y})),J.append(te,oe),$.append(B,J),_.append(L),C.append(_,$);const ie=c("div",X);ie.innerHTML='\n        <style>\n            @keyframes loadingDotPulse {\n                0%, 80%, 100% { transform: scale(0.6); opacity: 0.3; }\n                40% { transform: scale(1); opacity: 1; }\n            }\n            .loading-dots {\n                display: flex;\n                gap: 4px;\n                padding: 8px 16px;\n                background-color: rgba(255, 255, 255, 0.8);\n                border-radius: 16px;\n            }\n            .loading-dot {\n                width: 8px;\n                height: 8px;\n                background-color: #6B7280;\n                border-radius: 50%;\n                display: inline-block;\n                animation: loadingDotPulse 1.4s infinite ease-in-out both;\n            }\n            .loading-dot:nth-child(1) { animation-delay: -0.32s; }\n            .loading-dot:nth-child(2) { animation-delay: -0.16s; }\n            .loading-dot:nth-child(3) { animation-delay: 0s; }\n        </style>\n        <div class="loading-dots">\n            <div class="loading-dot"></div>\n            <div class="loading-dot"></div>\n            <div class="loading-dot"></div>\n        </div>\n    ',_.append(ie);const re=c("div",G),se=c("div",K,"Generate:"),de=c("div",Q),le={},ce=e.availableTypes??[];return ce.forEach((t=>{const n=c("button",Z,t.charAt(0).toUpperCase()+t.slice(1));t===e.type&&l(n,{...Z,...ee}),n.addEventListener("click",(()=>{Object.values(le).forEach((e=>{l(e,Z)})),l(n,{...Z,...ee}),(t=>{for(e.type=t,y=h.init(`${e.key}/${e.type}`,(e=>m(e)));b.chatMessages.firstChild;)b.chatMessages.removeChild(b.chatMessages.firstChild);b.chatMessages.style.display="none";const n=y.getMessages().filter((e=>!e.hidden));n.length>0&&(b.chatMessages.style.display="block",n.forEach((e=>{m(e)})))})(t)})),le[t]=n,de.appendChild(n)})),re.append(se,de),w.append(C),d.append(p,v,w),ce.length>0&&d.append(re),document.body.append(r,d),f.addEventListener("click",t),B.addEventListener("click",(()=>x())),te.addEventListener("click",i),oe.addEventListener("click",s),L.addEventListener("keydown",(e=>{if("Enter"===e.key){if(e.shiftKey)return;e.preventDefault(),x()}})),p.addEventListener("mousedown",n),document.addEventListener("mousemove",o),document.addEventListener("mouseup",a),d.modalOverlay=r,d.chatHeader=p,d.closeBtn=f,d.chatMessages=v,d.messageInput=L,d.sendBtn=B,d.tryAgainBtn=oe,d.stopBtn=te,d.loadingIndicator=ie,d.typeSelector=re,d.typeButtons=le,d.isDragging=!1,d.isLoading=!1,d.abortController=void 0,d.offsetX=0,d.offsetY=0,d})();return b.api={sendMessage:x,closeModal:t},(()=>{b.chatMessages.innerHTML="",b.chatMessages.style.display="none",b.style.visibility="hidden",b.style.display="flex",b.modalOverlay.style.display="block";const e=y.getMessages().filter((e=>!e.hidden));e.length>0&&(b.chatMessages.style.display="block",e.forEach((e=>{m(e)}))),setTimeout((()=>{b.chatMessages.scrollTop=b.chatMessages.scrollHeight,b.style.visibility="visible"}),100)})(),b},ae=(e,t={})=>{const n={indicatorType:t.indicatorType||"spinner",overlayColor:t.overlayColor||"rgba(255, 255, 255, 0.7)",indicatorColor:t.indicatorColor||"#3498db"},o=document.createElement("div"),a=document.createElement("div"),i=window.getComputedStyle(e),r=e.getBoundingClientRect();t.indicatorColor||(n.indicatorType=r.height<=50?"dots":"spinner"),o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.backgroundColor=n.overlayColor,o.style.display="flex",o.style.justifyContent="center",o.style.alignItems="center",o.style.zIndex="10000",o.style.borderRadius=i.borderRadius;let s="";if("spinner"===n.indicatorType)a.style.border="4px solid #f3f3f3",a.style.borderTop=`4px solid ${n.indicatorColor}`,a.style.borderRadius="50%",a.style.width="30px",a.style.height="30px",a.style.animation="textareaOverlaySpin 1s linear infinite",s="\n      @keyframes textareaOverlaySpin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    ";else if("dots"===n.indicatorType){a.style.display="flex",a.style.alignItems="center",a.style.justifyContent="center",a.style.height="20px";for(let e=0;e<3;e++){const t=document.createElement("div");t.style.width="8px",t.style.height="8px",t.style.borderRadius="50%",t.style.backgroundColor=n.indicatorColor,t.style.margin="0 4px",t.style.animation="textareaOverlayDotPulse 1.4s infinite ease-in-out",t.style.animationDelay=.2*e+"s",a.appendChild(t)}s="\n      @keyframes textareaOverlayDotPulse {\n        0%, 80%, 100% { transform: scale(0); opacity: 0.5; }\n        40% { transform: scale(1); opacity: 1; }\n      }\n    "}const d=document.createElement("style");d.textContent=s,document.head.appendChild(d),o.appendChild(a);const l=window.getComputedStyle(e.parentElement);let c;-1===["relative","absolute","fixed"].indexOf(l.position)?(c=document.createElement("div"),c.style.position="relative",c.style.width=`${r.width}px`,c.style.height=`${r.height}px`,c.style.display="inline-block",e.parentNode?.insertBefore(c,e),c.appendChild(e)):c=e.parentElement,o.style.display="none",c.appendChild(o);const p=e.getBoundingClientRect();return c!==e.parentElement&&(c.style.width=`${p.width}px`,c.style.height=`${p.height}px`),o.style.display="flex",e.setAttribute("disabled","disabled"),()=>{o.style.display="none",e.removeAttribute("disabled"),o.remove(),d.remove(),c!==e.parentElement&&(c.parentNode?.insertBefore(e,c),c.remove())}},ie={createLoadingOverlay:ae,localChat:e=>oe(e)},re=(e,t)=>{e.context.els.forEach((({wrapper:n,field:o})=>{const a=o.getValue();o.setValue(e.value),o.fireEvent("change",o,e.value,a),t&&(o.el.dom.scrollTop=o.el.dom.scrollHeight),e.total>0&&n.historyNav.show(),n.historyNav.info.update(e.current,e.total),e.prevStatus?n.historyNav.prevButton.enable():n.historyNav.prevButton.disable(),e.nextStatus?n.historyNav.nextButton.enable():n.historyNav.nextButton.disable()}))},se=()=>{const e=document.createElement("button");return e.className="modai-generate",e.innerText="✦",e.type="button",e.title="Generate using AI",e},de=e=>{const t=document.createElement("button");t.type="button",t.title="Previous Version",t.className="modai-history_prev",t.disable=()=>{t.disabled=!0},t.enable=()=>{t.disabled=!1},t.innerHTML="prev",t.addEventListener("click",(()=>{e.prev()}));const n=document.createElement("button");n.type="button",n.title="Next Version",n.className="modai-history_next",n.disable=()=>{n.disabled=!0},n.enable=()=>{n.disabled=!1},n.innerHTML="next",n.addEventListener("click",(()=>{e.next()}));const o=document.createElement("span");o.update=(e,t)=>{o.innerText=`${e}/${t}`},o.innerText="";const a=document.createElement("span");return a.show=()=>{a.style.display="initial"},a.hide=()=>{a.style.display="none"},a.prevButton=t,a.nextButton=n,a.info=o,a.appendChild(t),a.appendChild(n),a.appendChild(o),a.hide(),t.disable(),n.disable(),a},le=e=>{const t=se();return t.addEventListener("click",(()=>{ie.localChat({key:e,field:e,type:"text",availableTypes:["text","image"],resource:MODx.request.id})})),t},ce=(e,t)=>{const n=document.createElement("span"),o=se();o.addEventListener("click",(async()=>{const n=ae(e.el.dom);try{const e=await r.mgr.prompt.text({id:MODx.request.id,field:t});a.insert(e.content),n()}catch(e){n(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e.message}))}})),n.appendChild(o);const a=d.init(t,re,e.getValue(),{});a.cachedItem.context.els||(a.cachedItem.context.els=[]),a.cachedItem.context.els.push({field:e,wrapper:n});const i=de(a);return n.appendChild(i),n.historyNav=i,n},pe=(e,t,n)=>{const o=se();return o.addEventListener("click",(()=>{ie.localChat({key:t,field:t,type:"image",resource:MODx.request.id,image:{mediaSource:parseInt(e)||void 0},imageActions:{copy:!1,insert:(e,t)=>{n(e),t.api.closeModal()}}})})),o},ge=(e,t)=>{const n=Ext.getCmp(e);if(!n)return;const o=document.createElement("span"),a=se();a.addEventListener("click",(async()=>{const e=ae(n.el.dom);try{const n=await r.mgr.prompt.text({id:MODx.request.id,field:t},(e=>{i.insert(e.content,!0)}));i.insert(n.content),e()}catch(t){e(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:t.message}))}})),o.appendChild(a);const i=d.init(t,re,n.getValue(),{});i.cachedItem.context.els||(i.cachedItem.context.els=[]),i.cachedItem.context.els.push({field:n,wrapper:o});const s=de(i);o.appendChild(s),o.historyNav=s,n.label.appendChild(o)},me=(e,t)=>{const n=Ext.getCmp(e.firstElementChild?.id),o=pe(n.imageBrowser.source,t,(function(e){n.imageBrowser.setValue(e.ctx.url),n.onImageChange(e.ctx.url)})),a=se();a.style.marginTop="6px",a.addEventListener("click",(async()=>{const e=n.imagePreview.el.dom,o=document.createElement("canvas"),a=o.getContext("2d");if(!a)return;o.width=e.width,o.height=e.height,a.drawImage(e,0,0);const i=o.toDataURL("image/png"),s=ae(n.altTextField.items.items[0].el.dom);try{const e=await r.mgr.prompt.vision({image:i,field:t},(e=>{n.altTextField.items.items[0].setValue(e.content),n.altTextField.items.items[0].el.dom.scrollTop=n.altTextField.items.items[0].el.dom.scrollHeight,n.image.altTag=e.content,n.updateValue()}));n.altTextField.items.items[0].setValue(e.content),n.image.altTag=e.content,n.updateValue(),s()}catch(e){s(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e.message}))}})),n.altTextField.el.dom.style.display="flex",n.altTextField.el.dom.style.justifyItems="center",n.altTextField.el.dom.style.alignItems="center",n.el.dom.parentElement.parentElement.parentElement.querySelector("label").appendChild(o),n.altTextField.el.dom.appendChild(a)};Ext.onReady((function(){Ext.defer((function(){(()=>{const e={pagetitle:["modx-resource-pagetitle"],longtitle:["modx-resource-longtitle","seosuite-longtitle"],introtext:["modx-resource-introtext"],description:["modx-resource-description","seosuite-description"],content:["modx-resource-content"]};for(const t of modAI?.resourceFields||[])e[t]&&("content"!==t?e[t].forEach((e=>{ge(e,`res.${t}`)})):Ext.getCmp("modx-resource-content").el.dom.querySelector("label").appendChild(le("res.content")))})(),(()=>{const e=Ext.getCmp("modx-panel-resource").getForm();for(const[t,n]of modAI?.tvs||[]){const o=Ext.get(`tv${t}-tr`);if(!o)continue;const a=e.findField(`tv${t}`),i=`tv.${n}`;if(a){if("textfield"===a.xtype||"textarea"===a.xtype){const e=MODx.config[`modai.tv.${n}.text.prompt`],t=o.dom.querySelector("label");if(!t)return;e?t.appendChild(ce(a,i)):t.appendChild(le(i))}if("modx-panel-tv-image"===a.xtype){const e=pe(a.source,i,(function(e){const t={relativeUrl:e.ctx.url,url:e.ctx.url};a.items.items[1].fireEvent("select",t),a.fireEvent("select",t)})),t=o.dom.querySelector("label");if(!t)return;t.appendChild(e)}}else{const e=o.dom.querySelector(".imageplus-panel-input");e&&me(e,i)}}})()}),500)}));const ue={};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
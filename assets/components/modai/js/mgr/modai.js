!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.modAI=t():e.modAI=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{chatHistory:()=>u,executor:()=>r,history:()=>d,ui:()=>J,window:()=>oe});const n={buffered:{chatgpt:{content:e=>{const t=e?.choices?.[0]?.message?.content;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}},image:e=>{const t=e?.data?.[0]?.url;if(!t)throw new Error(_("modai.cmp.failed_request"));return{url:t}}},claude:{content:e=>{const t=e?.content?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}}},gemini:{content:e=>{const t=e?.candidates?.[0]?.content?.parts?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,content:t}},image:e=>{const t=e?.predictions?.[0]?.bytesBase64Encoded;if(!t)throw new Error(_("modai.cmp.failed_request"));return{base64:`data:image/png;base64,${t}`}}}},stream:{chatgpt:{content:(e,t)=>{const n=t?.content??"",o=e.choices[0]?.delta?.content||"";return{...t,id:e.id,content:`${n}${o}`}}},claude:{content:(e,t)=>{const n=t?.content??"",o=e.delta?.text||"";return{...t,content:`${n}${o}`}}},gemini:{content:(e,t)=>{const n=t?.content??"",o=e.candidates[0]?.content?.parts[0]?.text||"";return{...t,content:`${n}${o}`}}}}},o=async e=>{if(!e.ok){const t=await e.json();if(t?.error)throw new Error(t.error.message);throw new Error(`${e.status} ${e.statusText}`)}},i=async(e,t,o,i,a)=>{if(!e.body)throw new Error("failed");const r=e.body.getReader(),s=new TextDecoder("utf-8");let d="",l={id:`${t}-${Date.now()}-${Math.round(1e3*Math.random())}`,content:""};for(;!a||!a.aborted;){const{done:e,value:a}=await r.read();if(e)break;const c=s.decode(a,{stream:!0});if("gemini"===t){const e=c.trim().split(",\r\n").map((e=>e.replace(/^\[|]$/g,""))).filter((e=>""!==e.trim()));for(const a of e)try{const e=JSON.parse(a);l=n.stream[t][o](e,l),i&&i(l)}catch{}}if("chatgpt"===t){d+=c;let e,a=0;for(;-1!==(e=d.indexOf("\n",a));){const r=d.slice(a,e).trim();if(a=e+1,r.startsWith("data: ")){const e=r.slice(6);if("[DONE]"===e)continue;try{const a=JSON.parse(e);l=n.stream[t][o](a,l),i&&i(l)}catch{}}}d=d.slice(a)}if("claude"===t){d+=c;let e,a=0;for(;-1!==(e=d.indexOf("\n",a));){const r=d.slice(a,e).trim();if(a=e+1,r.startsWith("data: ")){const e=r.slice(6);try{const a=JSON.parse(e);if("message_start"===a.type){l.id=a.message.id;continue}if("content_block_delta"!==a.type)continue;l=n.stream[t][o](a,l),i&&i(l)}catch{}}}d=d.slice(a)}}return l},a=async(e,t,a,r)=>{const s=(r=r||new AbortController).signal,d=await fetch(`${modAI.apiURL}?action=${e}`,{signal:s,method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!d.ok){const e=await d.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}const l=d.headers.get("x-modai-service")??"chatgpt",c=d.headers.get("x-modai-parser")??"content",p=1===parseInt(d.headers.get("x-modai-stream")??"0");if(1!==parseInt(d.headers.get("x-modai-proxy")??"0")){return(async(e,t,a)=>{if("object"!=typeof e||!e.forExecutor)return e;const r=e.forExecutor,s=(a=a||new AbortController).signal;if(!r.service||!r.parser)throw new Error(_("modai.cmp.service_required"));if(!n[r.stream?"stream":"buffered"]?.[r.service]?.[r.parser])throw new Error(_("modai.cmp.service_unsupported"));if(r.stream)return(async e=>{if("content"!==r.parser)throw new Error(_("modai.cmp.service_unsupported"));const n=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});return await o(n),i(n,r.service,r.parser,t)})(r);const d=await(async e=>{const t=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});await o(t);const n=await t.json();if(n.error)throw new Error(n.error.message);return n})(r);return n.buffered[r.service][r.parser](d)})(await d.json(),a,r)}if(!l||!c)throw r.abort(),new Error(_("modai.cmp.service_required"));if(!n[p?"stream":"buffered"]?.[l]?.[c])throw r.abort(),new Error(_("modai.cmp.service_unsupported"));if(!p){const e=await d.json();return n.buffered[l][c](e)}if("content"!==c)throw new Error(_("modai.cmp.service_unsupported"));return await i(d,l,c,a,s)},r={mgr:{download:{image:async e=>await(async(e,t)=>{const n=await fetch(`${modAI.apiURL}?action=Download\\Image`,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!n.ok){const e=await n.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}return n.json()})(0,e)},prompt:{freeText:async(e,t,n)=>a("Prompt\\FreeText",e,t,n),text:async(e,t,n)=>a("Prompt\\Text",e,t,n),vision:async(e,t,n)=>a("Prompt\\Vision",e,t,n),image:async(e,t)=>a("Prompt\\Image",e,void 0,t)}}},s={},d={_formatOutput(e,t){const n=s[e],o=n.visible>0,i=n.visible!==n.values.length-1;return{value:void 0!==t?t:n.values[n.visible]??null,nextStatus:i,prevStatus:o,current:n.visible+1,total:n.values.length,context:n.context}},insert(e,t,n=!1){const o=s[e];n||(o.visible=o.values.push(t)-1);const i=this._formatOutput(e,t);return"function"==typeof o.syncUI&&o.syncUI(i,n),i},next(e){const t=s[e];if(t.visible===t.values.length-1)return this._formatOutput(e);t.visible++;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},prev(e){const t=s[e];if(t.visible<=0)return this._formatOutput(e);t.visible--;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},init(e,t,n,o){return s[e]||(s[e]={visible:-1,values:[],context:o}),s[e].syncUI=t,n&&(s[e].values=[n],s[e].visible=0),{cachedItem:s[e],getData:()=>this._formatOutput(e),getAll:()=>s[e].values,syncUI:()=>{"function"==typeof s[e].syncUI&&s[e].syncUI(this._formatOutput(e),!1)},insert:(t,n=!1)=>this.insert(e,t,n),next:()=>this.next(e),prev:()=>this.prev(e)}}},l=(e,t)=>{Object.assign(e.style,t)},c=(e,t,n="")=>{const o=document.createElement(e);return t&&l(o,t),n&&(o.textContent=n),o},p=e=>/<[^>]*>/g.test(e)?e:e.replace(/\r\n|\n|\r/g,"<br>"),g={},m="assistant",h=(e,t,n,o,i=!1)=>{const a=g[e];if(!a)return;const r={content:t,role:n,id:o,hidden:i};r.el=a.onAddMessage(r);const s=a.history.push(r)-1;o&&(a.idRef[o]=a.history[s])},u={init:(e,t,n)=>(g[e]||(g[e]={history:[],idRef:{},onAddMessage:t,onUpdateMessage:n}),g[e].onAddMessage=t,g[e].onUpdateMessage=n,{addUserMessage:(t,n)=>{h(e,t,"user",void 0,n)},addAssistantMessage:(t,n)=>{h(e,t,m,n)},updateAssistantMessage:(t,n)=>{((e,t,n)=>{const o=g[e];o&&(o.idRef[t]?(o.idRef[t].content=n,o.onUpdateMessage(o.idRef[t])):h(e,n,m,t))})(e,t,n)},getAssistantMessage:t=>((e,t)=>{const n=g[e];if(n)return n.idRef[t]})(e,t),getMessages:()=>g[e].history,getMessagesHistory:()=>g[e].history.map((e=>({role:e.role,content:e.content})))})},f={position:"fixed",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.3)",display:"none",zIndex:"100"},x={position:"fixed",width:"1000px",minHeight:"170px",maxHeight:"600px",backgroundColor:"#fff",borderRadius:"10px",boxShadow:"0 5px 15px rgba(0, 0, 0, 0.3)",display:"none",flexDirection:"column",overflow:"hidden",zIndex:"101",top:"50%",left:"50%",transform:"translate(-50%, -50%)",transition:"height 0.3s ease-in-out"},y={backgroundColor:"#00B6DE",color:"white",padding:"15px",display:"flex",justifyContent:"space-between",alignItems:"center",cursor:"move"},b={fontWeight:"bold",fontSize:"16px"},v={display:"flex",gap:"10px"},w={background:"none",border:"none",color:"white",fontSize:"16px",cursor:"pointer"},C={flex:"1",padding:"15px",overflowY:"auto",backgroundColor:"#f9f9f9",width:"100%",boxSizing:"border-box",display:"none"},E={marginBottom:"20px",borderRadius:"8px",position:"relative",wordWrap:"break-word",width:"100%",boxSizing:"border-box"},k={width:"100%",backgroundColor:"#ffffff",border:"1px solid #e2e8f0",boxShadow:"0 2px 5px rgba(0, 0, 0, 0.05)"},M={width:"fit-content",padding:"10px 15px",backgroundColor:"#4299e1",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px"},T={padding:"12px",width:"100%",maxWidth:"100%",overflow:"hidden",boxSizing:"border-box"},I={display:"flex",padding:"8px 12px",gap:"8px",backgroundColor:"#f7fafc",borderTop:"1px solid #e2e8f0",borderRadius:"0 0 8px 8px"},S={backgroundColor:"#edf2f7",border:"1px solid #cbd5e0",borderRadius:"4px",padding:"3px 8px",fontSize:"12px",cursor:"pointer",display:"flex",alignItems:"center",color:"#4a5568"},A={display:"flex",padding:"15px",borderTop:"1px solid #e2e8f0",backgroundColor:"white",position:"relative"},z={display:"flex",width:"100%",gap:"10px"},O={flex:"1",position:"relative",minHeight:"48px",maxHeight:"150px",display:"flex"},B={width:"100%",padding:"12px 15px",border:"1px solid #e2e8f0",borderRadius:"10px",outline:"none",fontSize:"14px",resize:"none",minHeight:"48px",maxHeight:"150px",overflowY:"auto",backgroundColor:"#fff",cursor:"inherit"},L={display:"flex",flexDirection:"column",gap:"4px",width:"100px"},H={backgroundColor:"#6CB24A",color:"white",border:"none",borderRadius:"12px",padding:"8px 16px",cursor:"pointer",fontWeight:"bold",height:"40px",minWidth:"100px",fontSize:"14px",display:"flex",alignItems:"center",justifyContent:"center",gap:"6px",opacity:"1"},R={display:"flex",gap:"4px",justifyContent:"space-between"},$={backgroundColor:"transparent",border:"1px solid #e2e8f0",borderRadius:"8px",width:"48px",height:"32px",padding:"0",cursor:"pointer",display:"flex",alignItems:"center",justifyContent:"center",transition:"background-color 0.2s",opacity:"1"},D={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},j={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23DC2626'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M6 6h12v12H6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},N={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%234B5563'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},P={display:"inline-block",width:"14px",height:"14px",marginRight:"5px",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},V={opacity:"0.5",cursor:"not-allowed"},U={backgroundColor:"#f3f4f6",cursor:"not-allowed"},F={display:"none",position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(243, 244, 246, 0.9)",borderRadius:"10px",color:"#6B7280",fontSize:"14px",alignItems:"center",justifyContent:"center",gap:"4px",flexDirection:"row",zIndex:"10",backdropFilter:"blur(2px)",border:"1px solid #e2e8f0",pointerEvents:"none"},q={width:"fit-content",padding:"10px 15px",backgroundColor:"#DC2626",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px",display:"flex",alignItems:"center",gap:"8px"},W={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},Y=(e,t={})=>{const n={indicatorType:t.indicatorType||"spinner",overlayColor:t.overlayColor||"rgba(255, 255, 255, 0.7)",indicatorColor:t.indicatorColor||"#3498db"},o=document.createElement("div"),i=document.createElement("div"),a=window.getComputedStyle(e),r=e.getBoundingClientRect();t.indicatorColor||(n.indicatorType=r.height<=50?"dots":"spinner"),o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.backgroundColor=n.overlayColor,o.style.display="flex",o.style.justifyContent="center",o.style.alignItems="center",o.style.zIndex="10000",o.style.borderRadius=a.borderRadius;let s="";if("spinner"===n.indicatorType)i.style.border="4px solid #f3f3f3",i.style.borderTop=`4px solid ${n.indicatorColor}`,i.style.borderRadius="50%",i.style.width="30px",i.style.height="30px",i.style.animation="textareaOverlaySpin 1s linear infinite",s="\n      @keyframes textareaOverlaySpin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    ";else if("dots"===n.indicatorType){i.style.display="flex",i.style.alignItems="center",i.style.justifyContent="center",i.style.height="20px";for(let e=0;e<3;e++){const t=document.createElement("div");t.style.width="8px",t.style.height="8px",t.style.borderRadius="50%",t.style.backgroundColor=n.indicatorColor,t.style.margin="0 4px",t.style.animation="textareaOverlayDotPulse 1.4s infinite ease-in-out",t.style.animationDelay=.2*e+"s",i.appendChild(t)}s="\n      @keyframes textareaOverlayDotPulse {\n        0%, 80%, 100% { transform: scale(0); opacity: 0.5; }\n        40% { transform: scale(1); opacity: 1; }\n      }\n    "}const d=document.createElement("style");d.textContent=s,document.head.appendChild(d),o.appendChild(i);const l=window.getComputedStyle(e.parentElement);let c;-1===["relative","absolute","fixed"].indexOf(l.position)?(c=document.createElement("div"),c.style.position="relative",c.style.width=`${r.width}px`,c.style.height=`${r.height}px`,c.style.display="inline-block",e.parentNode?.insertBefore(c,e),c.appendChild(e)):c=e.parentElement,o.style.display="none",c.appendChild(o);const p=e.getBoundingClientRect();return c!==e.parentElement&&(c.style.width=`${p.width}px`,c.style.height=`${p.height}px`),o.style.display="flex",e.setAttribute("disabled","disabled"),()=>{o.style.display="none",e.removeAttribute("disabled"),o.remove(),d.remove(),c!==e.parentElement&&(c.parentNode?.insertBefore(e,c),c.remove())}},J={createLoadingOverlay:Y,freePrompt:e=>(e=>{if(!e.key)return void alert("key is required config property");const t=()=>{document.removeEventListener("mousemove",o),document.removeEventListener("mouseup",i),G.modalOverlay&&G.modalOverlay.remove(),G&&G.remove()},n=e=>{G.isDragging=!0;const t=G.getBoundingClientRect();G.offsetX=e.clientX-t.left,G.offsetY=e.clientY-t.top,document.body.style.userSelect="none"},o=e=>{if(!G.isDragging)return;const t=e.clientX-G.offsetX,n=e.clientY-G.offsetY;G.style.left=t+"px",G.style.top=n+"px",G.style.transform="none"},i=()=>{G.isDragging=!1,document.body.style.userSelect=""},a=()=>{G.isLoading&&G.abortController&&(G.abortController.abort(),G.abortController=void 0,Y(!1))},s=()=>{0!==X.getMessages().length&&J("Try again")},d=e=>{"none"===G.chatMessages.style.display&&(G.chatMessages.style.display="block");const t=c("div",{...E,...M});return t.innerHTML=p(e),G.chatMessages.appendChild(t),G.chatMessages.scrollTop=G.chatMessages.scrollHeight,t},g=e=>{"none"===G.chatMessages.style.display&&(G.chatMessages.style.display="block");const t=c("div",{...E,...q}),n=c("span",W);t.appendChild(n);const o=c("span");return o.textContent=e,t.appendChild(o),G.chatMessages.appendChild(t),G.chatMessages.scrollTop=G.chatMessages.scrollHeight,t},m=(n,o)=>{"none"===G.chatMessages.style.display&&(G.chatMessages.style.display="block");const i=c("div",{...E,...k}),a=o||"msg-"+Date.now();i.dataset.messageId=a;const r=c("div",T),s=((e,t,n=[])=>{const o=p(e),i=c("iframe",{width:"100%",border:"none",backgroundColor:"white",pointerEvents:"none",maxWidth:"100%",boxSizing:"border-box"});return i.srcdoc=`\n        <html>\n        <head>\n            <style>\n                html {\n                    width: 100%;\n                    max-width: 100%;\n                    padding: 0;\n                    margin: 0;\n                }\n                body {\n                    margin: 0;\n                    padding: 0;\n                    font-family: Arial, sans-serif;\n                    overflow-x: hidden;\n                    width: 100%;\n                    max-width: 100%;\n                    box-sizing: border-box;\n                }\n                * {\n                    box-sizing: border-box;\n                    max-width: 100%;\n                }\n                pre {\n                    white-space: pre-wrap;\n                    word-wrap: break-word;\n                    overflow-wrap: break-word;\n                    max-width: 100%;\n                    padding: 12px;\n                    margin: 0;\n                    background-color: #f5f7fa;\n                    border-radius: 5px;\n                    font-size: 14px;\n                }\n                img {\n                    max-width: 100%;\n                    height: auto;\n                    display: block;\n                }\n                code {\n                    white-space: pre-wrap;\n                    word-wrap: break-word;\n                    max-width: 100%;\n                    display: block;\n                    overflow-x: hidden;\n                    font-size: 14px;\n                }\n                table {\n                    width: 100%;\n                    max-width: 100%;\n                    overflow-x: hidden;\n                    display: block;\n                    border-collapse: collapse;\n                }\n                div {\n                    max-width: 100%;\n                    overflow-wrap: break-word;\n                    word-wrap: break-word;\n                    box-sizing: border-box;\n                }\n                p {\n                    margin: 0 0 0.5em 0;\n                    max-width: 100%;\n                }\n                h1, h2, h3, h4, h5, h6 {\n                    margin: 0 0 0.1em 0;\n                    max-width: 100%;\n                }\n            </style>\n            ${n.map((e=>`<link rel="stylesheet" type="text/css" href="${e}" />`)).join("")}\n        </head>\n        <body style="padding: 0; max-width: 100%; width: 100%; box-sizing: border-box;">${o}</body>\n        </html>\n    `,i.syncHeight=()=>{const e=i.contentWindow?.document.body;if(!e)return;const n=e.getElementsByTagName("*");let o=e.offsetHeight;for(let e=0;e<n.length;e++){const t=n[e],i=t.offsetTop+t.offsetHeight;o=Math.max(o,i)}i.style.height=o+5+"px",e.style.overflow="hidden",t.chatMessages.scrollTop=t.chatMessages.scrollHeight},i.onload=i.syncHeight,i})(n,G,e.customCSS??[]);r.appendChild(s);const d=c("div",I),l=c("button",S),g=c("span",{...P,backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z'/%3E%3Cpath d='M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z'/%3E%3C/svg%3E\")"});l.append(g,document.createTextNode("Copy")),l.addEventListener("click",(()=>h(a,l))),d.append(l);const m=e.actions?.insert;if(m&&"function"==typeof m){const e=c("button",S),n=c("span",{...P,backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/%3E%3Cpath d='M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z'/%3E%3C/svg%3E\")"});e.append(n,document.createTextNode("Insert")),e.addEventListener("click",(()=>m(X.getAssistantMessage(a),t))),d.append(e)}return i.append(r,d),G.chatMessages.appendChild(i),G.chatMessages.scrollTop=G.chatMessages.scrollHeight,i},h=(e,t)=>{const n=X.getAssistantMessage(e);if(!n)return;if(navigator.clipboard&&navigator.clipboard.writeText)navigator.clipboard.writeText(n.content).then((()=>{})).catch((()=>{g(_("modai.cmp.failed_copy"))}));else try{const e=c("textarea");e.value=n.content,document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e)}catch(e){g(_("modai.cmp.failed_copy"))}const o=t.innerHTML,i=c("span",{...P,backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z'/%3E%3Cpath d='M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z'/%3E%3C/svg%3E\")"});t.innerHTML="",t.append(i,document.createTextNode("Copied!")),setTimeout((()=>{t.innerHTML=o}),2e3)},Y=e=>{G.isLoading=e,G.loadingIndicator.style.display=e?"flex":"none",G.messageInput.disabled=e,l(G.messageInput,e?{...B,...U}:B),G.sendBtn.disabled=e,l(G.sendBtn,e?{...H,...V}:H),G.stopBtn.disabled=!e,l(G.stopBtn,e?$:{...$,...V});const t=X.getMessages().length>0;G.tryAgainBtn.disabled=e||!t,l(G.tryAgainBtn,e||!t?{...$,...V}:$)},J=async(t,n)=>{const o=t?t.trim():G.messageInput.value.trim();if(!o||G.isLoading)return;Y(!0),G.messageInput.value="",G.abortController=new AbortController;const i=X.getMessagesHistory();X.addUserMessage(o,n);try{const t=await r.mgr.prompt.freeText({namespace:e.namespace,context:e.context,prompt:o,field:e.field||"",messages:i},(e=>{X.updateAssistantMessage(e.id,e.content)}),G.abortController);X.updateAssistantMessage(t.id,t.content),G.abortController=void 0}catch(e){if(e instanceof Error){if("AbortError"===e.name)return;return void g(e.message)}g("Unknown error")}Y(!1)},X=u.init(e.key,(e=>{if(!e.hidden)return"user"===e.role?d(e.content):m(e.content,e.id)}),(e=>{if(!e.el)return;if("user"===e.role)return void(e.el.textContent=e.content);const t=e.el?.firstChild?.firstChild;if(!t)return;const n=t.contentDocument;n&&(n.body.innerHTML=p(e.content),t.syncHeight())})),G=(()=>{const e=c("div",f),r=c("div",x),d=c("div",y),p=c("div",b,"modAI Assistant"),g=c("div",v),m=c("button",w,"✕");g.append(m),d.append(p,g);const h=c("div",C),u=c("div",A),E=c("div",z),k=c("div",O),M=c("textarea",B);M.placeholder="Type your message...";const T=c("div",L),I=c("button",H),S=c("span",D),_=document.createTextNode("Send");I.append(S,_);const P=c("div",R),U=c("button",{...$,...V}),q=c("span",j);U.appendChild(q),U.title="Stop Generation";const W=c("button",$),Y=c("span",N);W.appendChild(Y),W.title="Try Again",0===X.getMessages().length&&(W.disabled=!0,l(W,{...$,...V})),P.append(U,W),T.append(I,P),k.append(M),E.append(k,T);const G=c("div",F);return G.innerHTML='\n        <style>\n            @keyframes loadingDotPulse {\n                0%, 80%, 100% { transform: scale(0.6); opacity: 0.3; }\n                40% { transform: scale(1); opacity: 1; }\n            }\n            .loading-dots {\n                display: flex;\n                gap: 4px;\n                padding: 8px 16px;\n                background-color: rgba(255, 255, 255, 0.8);\n                border-radius: 16px;\n            }\n            .loading-dot {\n                width: 8px;\n                height: 8px;\n                background-color: #6B7280;\n                border-radius: 50%;\n                display: inline-block;\n                animation: loadingDotPulse 1.4s infinite ease-in-out both;\n            }\n            .loading-dot:nth-child(1) { animation-delay: -0.32s; }\n            .loading-dot:nth-child(2) { animation-delay: -0.16s; }\n            .loading-dot:nth-child(3) { animation-delay: 0s; }\n        </style>\n        <div class="loading-dots">\n            <div class="loading-dot"></div>\n            <div class="loading-dot"></div>\n            <div class="loading-dot"></div>\n        </div>\n    ',k.append(G),u.append(E),r.append(d,h,u),document.body.append(e,r),m.addEventListener("click",t),I.addEventListener("click",(()=>J())),U.addEventListener("click",a),W.addEventListener("click",s),M.addEventListener("keydown",(e=>{if("Enter"===e.key){if(e.shiftKey)return;e.preventDefault(),J()}})),d.addEventListener("mousedown",n),document.addEventListener("mousemove",o),document.addEventListener("mouseup",i),r.modalOverlay=e,r.chatHeader=d,r.closeBtn=m,r.chatMessages=h,r.messageInput=M,r.sendBtn=I,r.tryAgainBtn=W,r.stopBtn=U,r.loadingIndicator=G,r.isDragging=!1,r.isLoading=!1,r.abortController=void 0,r.offsetX=0,r.offsetY=0,r})();return G.api={sendMessage:J,closeModal:t},(()=>{G.chatMessages.innerHTML="",G.chatMessages.style.display="none",G.style.visibility="hidden",G.style.display="flex",G.modalOverlay.style.display="block";const e=X.getMessages().filter((e=>!e.hidden));e.length>0&&(G.chatMessages.style.display="block",e.forEach((e=>{"user"===e.role?d(e.content):m(e.content,e.id)}))),setTimeout((()=>{G.chatMessages.scrollTop=G.chatMessages.scrollHeight,G.style.visibility="visible"}),100)})(),G})(e)},X=(e,t)=>{e.context.els.forEach((({wrapper:n,field:o})=>{const i=o.getValue();o.setValue(e.value),o.fireEvent("change",o,e.value,i),t&&(o.el.dom.scrollTop=o.el.dom.scrollHeight),e.total>0&&n.historyNav.show(),n.historyNav.info.update(e.current,e.total),e.prevStatus?n.historyNav.prevButton.enable():n.historyNav.prevButton.disable(),e.nextStatus?n.historyNav.nextButton.enable():n.historyNav.nextButton.disable()}))},G=()=>{const e=document.createElement("button");return e.className="modai-generate",e.innerText="✦",e.type="button",e.title="Generate using AI",e},K=e=>{const t=document.createElement("button");t.type="button",t.title="Previous Version",t.className="modai-history_prev",t.disable=()=>{t.disabled=!0},t.enable=()=>{t.disabled=!1},t.innerHTML="prev",t.addEventListener("click",(()=>{e.prev()}));const n=document.createElement("button");n.type="button",n.title="Next Version",n.className="modai-history_next",n.disable=()=>{n.disabled=!0},n.enable=()=>{n.disabled=!1},n.innerHTML="next",n.addEventListener("click",(()=>{e.next()}));const o=document.createElement("span");o.update=(e,t)=>{o.innerText=`${e}/${t}`},o.innerText="";const i=document.createElement("span");return i.show=()=>{i.style.display="initial"},i.hide=()=>{i.style.display="none"},i.prevButton=t,i.nextButton=n,i.info=o,i.appendChild(t),i.appendChild(n),i.appendChild(o),i.hide(),t.disable(),n.disable(),i},Q=e=>{const t=G();return t.addEventListener("click",(()=>{J.freePrompt({key:e,field:e})})),t},Z=(e,t)=>{const n=document.createElement("span"),o=G();o.addEventListener("click",(async()=>{const n=Y(e.el.dom);try{const e=await r.mgr.prompt.text({id:MODx.request.id,field:t});i.insert(e.content),n()}catch(e){n(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e.message}))}})),n.appendChild(o);const i=d.init(t,X,e.getValue(),{});i.cachedItem.context.els||(i.cachedItem.context.els=[]),i.cachedItem.context.els.push({field:e,wrapper:n});const a=K(i);return n.appendChild(a),n.historyNav=a,n},ee=(e,t,n,o)=>{const i=G();return i.addEventListener("click",(()=>{MODx.load({xtype:"modai-window-image_prompt",title:"Image",cacheKey:n,record:{resource:MODx.request.id,prompt:e,mediaSource:t,field:n},listeners:{success:{fn:o,scope:void 0}}}).show()})),i},te=(e,t)=>{const n=Ext.getCmp(e);if(!n)return;const o=document.createElement("span"),i=G();i.addEventListener("click",(async()=>{const e=Y(n.el.dom);try{const n=await r.mgr.prompt.text({id:MODx.request.id,field:t},(e=>{a.insert(e.content,!0)}));a.insert(n.content),e()}catch(t){e(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:t.message}))}})),o.appendChild(i);const a=d.init(t,X,n.getValue(),{});a.cachedItem.context.els||(a.cachedItem.context.els=[]),a.cachedItem.context.els.push({field:n,wrapper:o});const s=K(a);o.appendChild(s),o.historyNav=s,n.label.appendChild(o)},ne=(e,t)=>{const n=Ext.getCmp(e.firstElementChild?.id),o=ee("",n.imageBrowser.source,t,(function(e){"url"in e&&(n.imageBrowser.setValue(e.url),n.onImageChange(e.url))})),i=G();i.style.marginTop="6px",i.addEventListener("click",(async()=>{const e=n.imagePreview.el.dom,o=document.createElement("canvas"),i=o.getContext("2d");if(!i)return;o.width=e.width,o.height=e.height,i.drawImage(e,0,0);const a=o.toDataURL("image/png"),s=Y(n.altTextField.items.items[0].el.dom);try{const e=await r.mgr.prompt.vision({image:a,field:t},(e=>{n.altTextField.items.items[0].setValue(e.content),n.altTextField.items.items[0].el.dom.scrollTop=n.altTextField.items.items[0].el.dom.scrollHeight,n.image.altTag=e.content,n.updateValue()}));n.altTextField.items.items[0].setValue(e.content),n.image.altTag=e.content,n.updateValue(),s()}catch(e){s(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e.message}))}})),n.altTextField.el.dom.style.display="flex",n.altTextField.el.dom.style.justifyItems="center",n.altTextField.el.dom.style.alignItems="center",n.el.dom.parentElement.parentElement.parentElement.querySelector("label").appendChild(o),n.altTextField.el.dom.appendChild(i)};Ext.onReady((function(){Ext.defer((function(){(()=>{const e={pagetitle:["modx-resource-pagetitle"],longtitle:["modx-resource-longtitle","seosuite-longtitle"],introtext:["modx-resource-introtext"],description:["modx-resource-description","seosuite-description"],content:["modx-resource-content"]};for(const t of modAI?.resourceFields||[])e[t]&&("content"!==t?e[t].forEach((e=>{te(e,`res.${t}`)})):Ext.getCmp("modx-resource-content").el.dom.querySelector("label").appendChild(Q("res.content")))})(),(()=>{const e=Ext.getCmp("modx-panel-resource").getForm();for(const[t,n]of modAI?.tvs||[]){const o=Ext.get(`tv${t}-tr`);if(!o)continue;const i=e.findField(`tv${t}`),a=`tv.${n}`;if(i){if("textfield"===i.xtype||"textarea"===i.xtype){const e=MODx.config[`modai.tv.${n}.text.prompt`],t=o.dom.querySelector("label");if(!t)return;e?t.appendChild(Z(i,a)):t.appendChild(Q(a))}if("modx-panel-tv-image"===i.xtype){const e=ee("",i.source,a,(function(e){if("url"in e){const t={relativeUrl:e.url,url:e.url};i.items.items[1].fireEvent("select",t),i.fireEvent("select",t)}})),t=o.dom.querySelector("label");if(!t)return;t.appendChild(e)}}else{const e=o.dom.querySelector(".imageplus-panel-input");e&&ne(e,a)}}})()}),500)}));const oe={};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.modAI=t():e.modAI=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{chatHistory:()=>h,executor:()=>r,history:()=>d,ui:()=>K,window:()=>re});const n={buffered:{chatgpt:{content:e=>{const t=e?.choices?.[0]?.message?.content;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}},image:e=>{const t=e?.data?.[0]?.url;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`chatgpt-${Date.now()}-${Math.round(1e3*Math.random())}`,url:t}}},claude:{content:e=>{const t=e?.content?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:e.id,content:t}}},gemini:{content:e=>{const t=e?.candidates?.[0]?.content?.parts?.[0]?.text;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,content:t}},image:e=>{const t=e?.predictions?.[0]?.bytesBase64Encoded;if(!t)throw new Error(_("modai.cmp.failed_request"));return{id:`gemini-${Date.now()}-${Math.round(1e3*Math.random())}`,url:`data:image/png;base64,${t}`}}}},stream:{chatgpt:{content:(e,t)=>{const n=t?.content??"",o=e.choices[0]?.delta?.content||"";return{...t,id:e.id,content:`${n}${o}`}}},claude:{content:(e,t)=>{const n=t?.content??"",o=e.delta?.text||"";return{...t,content:`${n}${o}`}}},gemini:{content:(e,t)=>{const n=t?.content??"",o=e.candidates[0]?.content?.parts[0]?.text||"";return{...t,content:`${n}${o}`}}}}},o=async e=>{if(!e.ok){const t=await e.json();if(t?.error)throw new Error(t.error.message);throw new Error(`${e.status} ${e.statusText}`)}},i=async(e,t,o,i,a)=>{if(!e.body)throw new Error("failed");const r=e.body.getReader(),s=new TextDecoder("utf-8");let d="",l={id:`${t}-${Date.now()}-${Math.round(1e3*Math.random())}`,content:""};for(;!a||!a.aborted;){const{done:e,value:a}=await r.read();if(e)break;const c=s.decode(a,{stream:!0});if("gemini"===t){const e=c.trim().split(",\r\n").map((e=>e.replace(/^\[|]$/g,""))).filter((e=>""!==e.trim()));for(const a of e)try{const e=JSON.parse(a);l=n.stream[t][o](e,l),i&&i(l)}catch{}}if("chatgpt"===t){d+=c;let e,a=0;for(;-1!==(e=d.indexOf("\n",a));){const r=d.slice(a,e).trim();if(a=e+1,r.startsWith("data: ")){const e=r.slice(6);if("[DONE]"===e)continue;try{const a=JSON.parse(e);l=n.stream[t][o](a,l),i&&i(l)}catch{}}}d=d.slice(a)}if("claude"===t){d+=c;let e,a=0;for(;-1!==(e=d.indexOf("\n",a));){const r=d.slice(a,e).trim();if(a=e+1,r.startsWith("data: ")){const e=r.slice(6);try{const a=JSON.parse(e);if("message_start"===a.type){l.id=a.message.id;continue}if("content_block_delta"!==a.type)continue;l=n.stream[t][o](a,l),i&&i(l)}catch{}}}d=d.slice(a)}}return l},a=async(e,t,a,r)=>{const s=(r=r||new AbortController).signal,d=await fetch(`${modAI.apiURL}?action=${e}`,{signal:s,method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!d.ok){const e=await d.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}const l=d.headers.get("x-modai-service")??"chatgpt",c=d.headers.get("x-modai-parser")??"content",p=1===parseInt(d.headers.get("x-modai-stream")??"0");if(1!==parseInt(d.headers.get("x-modai-proxy")??"0")){return(async(e,t,a)=>{if("object"!=typeof e||!e.forExecutor)return e;const r=e.forExecutor,s=(a=a||new AbortController).signal;if(!r.service||!r.parser)throw new Error(_("modai.cmp.service_required"));if(!n[r.stream?"stream":"buffered"]?.[r.service]?.[r.parser])throw new Error(_("modai.cmp.service_unsupported"));if(r.stream)return(async e=>{if("content"!==r.parser)throw new Error(_("modai.cmp.service_unsupported"));const n=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});return await o(n),i(n,r.service,r.parser,t)})(r);const d=await(async e=>{const t=await fetch(e.url,{signal:s,method:"POST",body:e.body,headers:e.headers});await o(t);const n=await t.json();if(n.error)throw new Error(n.error.message);return n})(r);return n.buffered[r.service][r.parser](d)})(await d.json(),a,r)}if(!l||!c)throw r.abort(),new Error(_("modai.cmp.service_required"));if(!n[p?"stream":"buffered"]?.[l]?.[c])throw r.abort(),new Error(_("modai.cmp.service_unsupported"));if(!p){const e=await d.json();return n.buffered[l][c](e)}if("content"!==c)throw new Error(_("modai.cmp.service_unsupported"));return await i(d,l,c,a,s)},r={mgr:{download:{image:async e=>await(async(e,t)=>{const n=await fetch(`${modAI.apiURL}?action=Download\\Image`,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(!n.ok){const e=await n.json();if(e.error)throw new Error(e.error.message);throw new Error(e.detail)}return await n.json()})(0,e)},prompt:{freeText:async(e,t,n)=>a("Prompt\\FreeText",e,t,n),text:async(e,t,n)=>a("Prompt\\Text",e,t,n),vision:async(e,t,n)=>a("Prompt\\Vision",e,t,n),image:async(e,t)=>a("Prompt\\Image",e,void 0,t)}}},s={},d={_formatOutput(e,t){const n=s[e],o=n.visible>0,i=n.visible!==n.values.length-1;return{value:void 0!==t?t:n.values[n.visible]??null,nextStatus:i,prevStatus:o,current:n.visible+1,total:n.values.length,context:n.context}},insert(e,t,n=!1){const o=s[e];n||(o.visible=o.values.push(t)-1);const i=this._formatOutput(e,t);return"function"==typeof o.syncUI&&o.syncUI(i,n),i},next(e){const t=s[e];if(t.visible===t.values.length-1)return this._formatOutput(e);t.visible++;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},prev(e){const t=s[e];if(t.visible<=0)return this._formatOutput(e);t.visible--;const n=this._formatOutput(e);return"function"==typeof t.syncUI&&t.syncUI(n),n},init(e,t,n,o){return s[e]||(s[e]={visible:-1,values:[],context:o}),s[e].syncUI=t,n&&(s[e].values=[n],s[e].visible=0),{cachedItem:s[e],getData:()=>this._formatOutput(e),getAll:()=>s[e].values,syncUI:()=>{"function"==typeof s[e].syncUI&&s[e].syncUI(this._formatOutput(e),!1)},insert:(t,n=!1)=>this.insert(e,t,n),next:()=>this.next(e),prev:()=>this.prev(e)}}},l=(e,t)=>{Object.assign(e.style,t)},c=(e,t,n="")=>{const o=document.createElement(e);return t&&l(o,t),n&&(o.textContent=n),o},p=e=>/<[^>]*>/g.test(e)?e:e.replace(/\r\n|\n|\r/g,"<br>"),g={},m="assistant",u=(e,t,n,o,i=!1,a="text")=>{const r=g[e];if(!r)return;const s={content:t,role:n,id:o,hidden:i,type:a,ctx:{}},d=r.history.push(s)-1;o&&(r.idRef[o]=r.history[d]),s.el=r.onAddMessage(s)},h={init:(e,t)=>(g[e]||(g[e]={history:[],idRef:{},onAddMessage:t}),g[e].onAddMessage=t,{addUserMessage:(t,n,o,i="text")=>{u(e,t,"user",n,o,i)},addAssistantMessage:(t,n,o="text")=>{u(e,t,m,n,!1,o)},updateAssistantMessage:(t,n,o="text")=>{((e,t,n,o="text")=>{const i=g[e];if(!i)return;if(!i.idRef[t])return void u(e,n,m,t,!1,o);const a=i.idRef[t];a.content=n,a.el&&a.el.update&&a.el.update(a)})(e,t,n,o)},getAssistantMessage:t=>((e,t)=>{const n=g[e];if(n)return n.idRef[t]})(e,t),getMessages:()=>g[e].history,getMessagesHistory:()=>g[e].history.map((e=>({role:e.role,content:e.content})))})},f={loadingText:"Loading...",completedText:"Completed!",completedTextDuration:2e3},x={backgroundColor:"#edf2f7",border:"1px solid #cbd5e0",borderRadius:"4px",padding:"3px 8px",fontSize:"12px",cursor:"pointer",display:"flex",alignItems:"center",color:"#4a5568"},y={display:"inline-block",width:"14px",height:"14px",marginRight:"5px",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},b={copy:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z'/%3E%3Cpath d='M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z'/%3E%3C/svg%3E",insert:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/%3E%3Cpath d='M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z'/%3E%3C/svg%3E"},w=e=>{e={...f,...e};const t=c("button",x),n=c("span",{...y,backgroundImage:`url("${b[e.icon]}")`});return t.append(n),t.append(document.createTextNode(e.label)),t.addEventListener("click",(async()=>{const n=t.innerHTML,o=e.onClick(e.message,e.modal);if(o instanceof Promise){t.innerHTML=`\n                <span style="\n                    display: inline-block;\n                    margin-right: 5px;\n                    width: 12px;\n                    height: 12px;\n                    position: relative;\n                    animation: spin 1s linear infinite;\n                ">\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        top: 0;\n                        left: 50%;\n                        transform: translate(-50%, 0);\n                    "></span>\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        top: 50%;\n                        right: 0;\n                        transform: translate(0, -50%);\n                    "></span>\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        bottom: 0;\n                        left: 50%;\n                        transform: translate(-50%, 0);\n                    "></span>\n                    <span style="\n                        position: absolute;\n                        width: 3px;\n                        height: 3px;\n                        background-color: currentColor;\n                        border-radius: 50%;\n                        top: 50%;\n                        left: 0;\n                        transform: translate(0, -50%);\n                    "></span>\n                </span>\n                ${e.loadingText}\n            `;const n=document.createElement("style");n.textContent="\n                @keyframes spin {\n                    from { transform: rotate(0deg); }\n                    to { transform: rotate(360deg); }\n                }\n            ",document.head.appendChild(n),await o,document.head.removeChild(n)}t.innerHTML=`\n                <span style="margin-right: 5px;">✓</span>\n                ${e.completedText}\n            `,await new Promise((e=>setTimeout(e,2e3))),t.innerHTML=n})),t},v={position:"fixed",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.3)",display:"none",zIndex:"100"},C={position:"fixed",width:"1000px",minHeight:"170px",maxHeight:"600px",backgroundColor:"#fff",borderRadius:"10px",boxShadow:"0 5px 15px rgba(0, 0, 0, 0.3)",display:"none",flexDirection:"column",overflow:"hidden",zIndex:"101",top:"50%",left:"50%",transform:"translate(-50%, -50%)",transition:"height 0.3s ease-in-out"},E={backgroundColor:"#00B6DE",color:"white",padding:"15px",display:"flex",justifyContent:"space-between",alignItems:"center",cursor:"move"},k={fontWeight:"bold",fontSize:"16px"},M={display:"flex",gap:"10px"},T={background:"none",border:"none",color:"white",fontSize:"16px",cursor:"pointer"},I={flex:"1",padding:"15px",overflowY:"auto",backgroundColor:"#f9f9f9",width:"100%",boxSizing:"border-box",display:"none"},S={marginBottom:"20px",borderRadius:"8px",position:"relative",wordWrap:"break-word",width:"100%",boxSizing:"border-box"},A={width:"100%",backgroundColor:"#ffffff",border:"1px solid #e2e8f0",boxShadow:"0 2px 5px rgba(0, 0, 0, 0.05)"},$={width:"fit-content",padding:"10px 15px",backgroundColor:"#4299e1",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px"},L={padding:"12px",width:"100%",maxWidth:"100%",overflow:"hidden",boxSizing:"border-box"},O={display:"flex",padding:"8px 12px",gap:"8px",backgroundColor:"#f7fafc",borderTop:"1px solid #e2e8f0",borderRadius:"0 0 8px 8px"},z={display:"flex",padding:"15px",borderTop:"1px solid #e2e8f0",backgroundColor:"white",position:"relative"},B={display:"flex",width:"100%",gap:"10px"},H={flex:"1",position:"relative",minHeight:"48px",maxHeight:"150px",display:"flex"},D={width:"100%",padding:"12px 15px",border:"1px solid #e2e8f0",borderRadius:"10px",outline:"none",fontSize:"14px",resize:"none",minHeight:"48px",maxHeight:"150px",overflowY:"auto",backgroundColor:"#fff",cursor:"inherit"},R={display:"flex",flexDirection:"column",gap:"4px",width:"100px"},P={backgroundColor:"#6CB24A",color:"white",border:"none",borderRadius:"12px",padding:"8px 16px",cursor:"pointer",fontWeight:"bold",height:"40px",minWidth:"100px",fontSize:"14px",display:"flex",alignItems:"center",justifyContent:"center",gap:"6px",opacity:"1"},j={display:"flex",gap:"4px",justifyContent:"space-between"},N={backgroundColor:"transparent",border:"1px solid #e2e8f0",borderRadius:"8px",width:"48px",height:"32px",padding:"0",cursor:"pointer",display:"flex",alignItems:"center",justifyContent:"center",transition:"background-color 0.2s",opacity:"1"},U={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},V={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23DC2626'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M6 6h12v12H6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},q={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%234B5563'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},F={opacity:"0.5",cursor:"not-allowed"},W={backgroundColor:"#f3f4f6",cursor:"not-allowed"},Y={display:"none",position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(243, 244, 246, 0.9)",borderRadius:"10px",color:"#6B7280",fontSize:"14px",alignItems:"center",justifyContent:"center",gap:"4px",flexDirection:"row",zIndex:"10",backdropFilter:"blur(2px)",border:"1px solid #e2e8f0",pointerEvents:"none"},J={width:"fit-content",padding:"10px 15px",backgroundColor:"#DC2626",color:"white",marginLeft:"auto",borderBottomRightRadius:"5px",display:"flex",alignItems:"center",gap:"8px"},X={width:"16px",height:"16px",backgroundImage:"url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E\")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center"},G=(e,t={})=>{const n={indicatorType:t.indicatorType||"spinner",overlayColor:t.overlayColor||"rgba(255, 255, 255, 0.7)",indicatorColor:t.indicatorColor||"#3498db"},o=document.createElement("div"),i=document.createElement("div"),a=window.getComputedStyle(e),r=e.getBoundingClientRect();t.indicatorColor||(n.indicatorType=r.height<=50?"dots":"spinner"),o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.backgroundColor=n.overlayColor,o.style.display="flex",o.style.justifyContent="center",o.style.alignItems="center",o.style.zIndex="10000",o.style.borderRadius=a.borderRadius;let s="";if("spinner"===n.indicatorType)i.style.border="4px solid #f3f3f3",i.style.borderTop=`4px solid ${n.indicatorColor}`,i.style.borderRadius="50%",i.style.width="30px",i.style.height="30px",i.style.animation="textareaOverlaySpin 1s linear infinite",s="\n      @keyframes textareaOverlaySpin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    ";else if("dots"===n.indicatorType){i.style.display="flex",i.style.alignItems="center",i.style.justifyContent="center",i.style.height="20px";for(let e=0;e<3;e++){const t=document.createElement("div");t.style.width="8px",t.style.height="8px",t.style.borderRadius="50%",t.style.backgroundColor=n.indicatorColor,t.style.margin="0 4px",t.style.animation="textareaOverlayDotPulse 1.4s infinite ease-in-out",t.style.animationDelay=.2*e+"s",i.appendChild(t)}s="\n      @keyframes textareaOverlayDotPulse {\n        0%, 80%, 100% { transform: scale(0); opacity: 0.5; }\n        40% { transform: scale(1); opacity: 1; }\n      }\n    "}const d=document.createElement("style");d.textContent=s,document.head.appendChild(d),o.appendChild(i);const l=window.getComputedStyle(e.parentElement);let c;-1===["relative","absolute","fixed"].indexOf(l.position)?(c=document.createElement("div"),c.style.position="relative",c.style.width=`${r.width}px`,c.style.height=`${r.height}px`,c.style.display="inline-block",e.parentNode?.insertBefore(c,e),c.appendChild(e)):c=e.parentElement,o.style.display="none",c.appendChild(o);const p=e.getBoundingClientRect();return c!==e.parentElement&&(c.style.width=`${p.width}px`,c.style.height=`${p.height}px`),o.style.display="flex",e.setAttribute("disabled","disabled"),()=>{o.style.display="none",e.removeAttribute("disabled"),o.remove(),d.remove(),c!==e.parentElement&&(c.parentNode?.insertBefore(e,c),c.remove())}},K={createLoadingOverlay:G,freePrompt:e=>(e=>{if(!e.key)return void alert("key is required config property");e.type||(e.type="text");const t=()=>{document.removeEventListener("mousemove",o),document.removeEventListener("mouseup",i),b.modalOverlay&&b.modalOverlay.remove(),b&&b.remove()},n=e=>{b.isDragging=!0;const t=b.getBoundingClientRect();b.offsetX=e.clientX-t.left,b.offsetY=e.clientY-t.top,document.body.style.userSelect="none"},o=e=>{if(!b.isDragging)return;const t=e.clientX-b.offsetX,n=e.clientY-b.offsetY;b.style.left=t+"px",b.style.top=n+"px",b.style.transform="none"},i=()=>{b.isDragging=!1,document.body.style.userSelect=""},a=()=>{b.isLoading&&b.abortController&&(b.abortController.abort(),b.abortController=void 0,f(!1))},s=()=>{if(0!==y.getMessages().length)if("text"!==e.type)if("image"!==e.type);else{const e=y.getMessages().reverse().find((e=>"user"===e.role));e&&x(e.content)}else x("Try again")},d=e=>{"none"===b.chatMessages.style.display&&(b.chatMessages.style.display="block");const t=c("div",{...S,...J}),n=c("span",X);t.appendChild(n);const o=c("span");return o.textContent=e,t.appendChild(o),b.chatMessages.appendChild(t),b.chatMessages.scrollTop=b.chatMessages.scrollHeight,t},g=(t,n)=>{"none"===b.chatMessages.style.display&&(b.chatMessages.style.display="block");const o=c("div",{...S,...A}),i=n||"msg-"+Date.now(),a=c("div",L),s=((e,t,n=[])=>{const o=p(e),i=c("iframe",{width:"100%",border:"none",backgroundColor:"white",pointerEvents:"none",maxWidth:"100%",boxSizing:"border-box"});return i.srcdoc=`\n        <html>\n        <head>\n            <style>\n                html {\n                    width: 100%;\n                    max-width: 100%;\n                    padding: 0;\n                    margin: 0;\n                }\n                body {\n                    margin: 0;\n                    padding: 0;\n                    font-family: Arial, sans-serif;\n                    overflow-x: hidden;\n                    width: 100%;\n                    max-width: 100%;\n                    box-sizing: border-box;\n                }\n                * {\n                    box-sizing: border-box;\n                    max-width: 100%;\n                }\n                pre {\n                    white-space: pre-wrap;\n                    word-wrap: break-word;\n                    overflow-wrap: break-word;\n                    max-width: 100%;\n                    padding: 12px;\n                    margin: 0;\n                    background-color: #f5f7fa;\n                    border-radius: 5px;\n                    font-size: 14px;\n                }\n                img {\n                    max-width: 100%;\n                    height: auto;\n                    display: block;\n                }\n                code {\n                    white-space: pre-wrap;\n                    word-wrap: break-word;\n                    max-width: 100%;\n                    display: block;\n                    overflow-x: hidden;\n                    font-size: 14px;\n                }\n                table {\n                    width: 100%;\n                    max-width: 100%;\n                    overflow-x: hidden;\n                    display: block;\n                    border-collapse: collapse;\n                }\n                div {\n                    max-width: 100%;\n                    overflow-wrap: break-word;\n                    word-wrap: break-word;\n                    box-sizing: border-box;\n                }\n                p {\n                    margin: 0 0 0.5em 0;\n                    max-width: 100%;\n                }\n                h1, h2, h3, h4, h5, h6 {\n                    margin: 0 0 0.1em 0;\n                    max-width: 100%;\n                }\n            </style>\n            ${n.map((e=>`<link rel="stylesheet" type="text/css" href="${e}" />`)).join("")}\n        </head>\n        <body style="padding: 0; max-width: 100%; width: 100%; box-sizing: border-box;">${o}</body>\n        </html>\n    `,i.syncHeight=()=>{const e=i.contentWindow?.document.body;if(!e)return;const n=e.getElementsByTagName("*");let o=e.offsetHeight;for(let e=0;e<n.length;e++){const t=n[e],i=t.offsetTop+t.offsetHeight;o=Math.max(o,i)}i.style.height=o+5+"px",e.style.overflow="hidden",t.chatMessages.scrollTop=t.chatMessages.scrollHeight},i.onload=i.syncHeight,i})(t,b,e.customCSS??[]);a.appendChild(s);const d=c("div",O),l=y.getAssistantMessage(i);if(l&&("text"===e.type&&(!1!==e.textActions?.copy&&d.append(w({message:l,modal:b,icon:"copy",label:"Copy",completedText:"Copied!",onClick:"function"==typeof e.textActions?.copy?e.textActions.copy:u})),"function"==typeof e.textActions?.insert&&d.append(w({message:l,modal:b,icon:"insert",label:"Insert",completedText:"Inserted!",onClick:e.textActions.insert}))),"image"===e.type)){!1!==e.imageActions?.copy&&d.append(w({message:l,modal:b,icon:"copy",label:"Copy",loadingText:"Downloading...",completedText:"Copied!",onClick:async(t,n)=>{const o="function"==typeof e.textActions?.copy?e.textActions.copy:u;if(!0===t.ctx.downloaded)return void o(t,n);const i=await r.mgr.download.image({url:t.content,field:e.field,namespace:e.namespace,resource:e.resource,mediaSource:e.image?.mediaSource});t.content=i.fullUrl,t.ctx.downloaded=!0,t.ctx.url=i.url,t.ctx.fullUrl=i.fullUrl,o(t,n)}}));const t=e.imageActions?.insert;"function"==typeof t&&d.append(w({message:l,modal:b,icon:"insert",label:"Insert",completedText:"Inserted!",loadingText:"Downloading...",onClick:async(n,o)=>{if(!0===n.ctx.downloaded)return void t(n,o);const i=await r.mgr.download.image({url:n.content,field:e.field,namespace:e.namespace,resource:e.resource,mediaSource:e.image?.mediaSource});n.content=i.fullUrl,n.ctx.downloaded=!0,n.ctx.url=i.url,n.ctx.fullUrl=i.fullUrl,t(n,o)}}))}return o.append(a,d),b.chatMessages.appendChild(o),b.chatMessages.scrollTop=b.chatMessages.scrollHeight,o.update=e=>{const t=s.contentDocument;t&&("image"===e.type?t.body.innerHTML=`<img src="${e.content}" />`:t.body.innerHTML=p(e.content),s.syncHeight())},o},m=e=>{if(!e.hidden)return"user"===e.role?(e=>{"none"===b.chatMessages.style.display&&(b.chatMessages.style.display="block");const t=c("div",{...S,...$});return t.innerHTML=p(e),t.update=e=>{t.innerHTML=p(e.content)},b.chatMessages.appendChild(t),b.chatMessages.scrollTop=b.chatMessages.scrollHeight,t})(e.content):"image"===e.type?g(`<img src="${e.content}" />`,e.id):g(e.content,e.id)},u=async e=>{if(navigator.clipboard&&navigator.clipboard.writeText)try{await navigator.clipboard.writeText(e.content)}catch{d(_("modai.cmp.failed_copy"))}else try{const t=c("textarea");t.value=e.content,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}catch(e){d(_("modai.cmp.failed_copy"))}},f=e=>{b.isLoading=e,b.loadingIndicator.style.display=e?"flex":"none",b.messageInput.disabled=e,l(b.messageInput,e?{...D,...W}:D),b.sendBtn.disabled=e,l(b.sendBtn,e?{...P,...F}:P),b.stopBtn.disabled=!e,l(b.stopBtn,e?N:{...N,...F});const t=y.getMessages().length>0;b.tryAgainBtn.disabled=e||!t,l(b.tryAgainBtn,e||!t?{...N,...F}:N)},x=async(t,n)=>{const o=t?t.trim():b.messageInput.value.trim();if(!o||b.isLoading)return;f(!0),b.messageInput.value="",b.abortController=new AbortController;const i=y.getMessagesHistory(),a="user-msg-"+Date.now()+Math.round(1e3*Math.random());y.addUserMessage(o,a,n);try{if("text"===e.type){const t=await r.mgr.prompt.freeText({namespace:e.namespace,context:e.context,prompt:o,field:e.field||"",messages:i},(e=>{y.updateAssistantMessage(e.id,e.content)}),b.abortController);y.updateAssistantMessage(t.id,t.content)}if("image"===e.type){const e=await r.mgr.prompt.image({prompt:o},b.abortController);y.addAssistantMessage(e.url,e.id,"image")}b.abortController=void 0}catch(e){if(e instanceof Error){if("AbortError"===e.name)return;return void d(e.message)}d("Unknown error")}f(!1)},y=h.init(`${e.key}/${e.type}`,(e=>m(e))),b=(()=>{const e=c("div",v),r=c("div",C),d=c("div",E),p=c("div",k,"modAI Assistant"),g=c("div",M),m=c("button",T,"✕");g.append(m),d.append(p,g);const u=c("div",I),h=c("div",z),f=c("div",B),b=c("div",H),w=c("textarea",D);w.placeholder="Type your message...";const S=c("div",R),A=c("button",P),_=c("span",U),$=document.createTextNode("Send");A.append(_,$);const L=c("div",j),O=c("button",{...N,...F}),W=c("span",V);O.appendChild(W),O.title="Stop Generation";const J=c("button",N),X=c("span",q);J.appendChild(X),J.title="Try Again",0===y.getMessages().length&&(J.disabled=!0,l(J,{...N,...F})),L.append(O,J),S.append(A,L),b.append(w),f.append(b,S);const G=c("div",Y);return G.innerHTML='\n        <style>\n            @keyframes loadingDotPulse {\n                0%, 80%, 100% { transform: scale(0.6); opacity: 0.3; }\n                40% { transform: scale(1); opacity: 1; }\n            }\n            .loading-dots {\n                display: flex;\n                gap: 4px;\n                padding: 8px 16px;\n                background-color: rgba(255, 255, 255, 0.8);\n                border-radius: 16px;\n            }\n            .loading-dot {\n                width: 8px;\n                height: 8px;\n                background-color: #6B7280;\n                border-radius: 50%;\n                display: inline-block;\n                animation: loadingDotPulse 1.4s infinite ease-in-out both;\n            }\n            .loading-dot:nth-child(1) { animation-delay: -0.32s; }\n            .loading-dot:nth-child(2) { animation-delay: -0.16s; }\n            .loading-dot:nth-child(3) { animation-delay: 0s; }\n        </style>\n        <div class="loading-dots">\n            <div class="loading-dot"></div>\n            <div class="loading-dot"></div>\n            <div class="loading-dot"></div>\n        </div>\n    ',b.append(G),h.append(f),r.append(d,u,h),document.body.append(e,r),m.addEventListener("click",t),A.addEventListener("click",(()=>x())),O.addEventListener("click",a),J.addEventListener("click",s),w.addEventListener("keydown",(e=>{if("Enter"===e.key){if(e.shiftKey)return;e.preventDefault(),x()}})),d.addEventListener("mousedown",n),document.addEventListener("mousemove",o),document.addEventListener("mouseup",i),r.modalOverlay=e,r.chatHeader=d,r.closeBtn=m,r.chatMessages=u,r.messageInput=w,r.sendBtn=A,r.tryAgainBtn=J,r.stopBtn=O,r.loadingIndicator=G,r.isDragging=!1,r.isLoading=!1,r.abortController=void 0,r.offsetX=0,r.offsetY=0,r})();return b.api={sendMessage:x,closeModal:t},(()=>{b.chatMessages.innerHTML="",b.chatMessages.style.display="none",b.style.visibility="hidden",b.style.display="flex",b.modalOverlay.style.display="block";const e=y.getMessages().filter((e=>!e.hidden));e.length>0&&(b.chatMessages.style.display="block",e.forEach((e=>{m(e)}))),setTimeout((()=>{b.chatMessages.scrollTop=b.chatMessages.scrollHeight,b.style.visibility="visible"}),100)})(),b})(e)},Q=(e,t)=>{e.context.els.forEach((({wrapper:n,field:o})=>{const i=o.getValue();o.setValue(e.value),o.fireEvent("change",o,e.value,i),t&&(o.el.dom.scrollTop=o.el.dom.scrollHeight),e.total>0&&n.historyNav.show(),n.historyNav.info.update(e.current,e.total),e.prevStatus?n.historyNav.prevButton.enable():n.historyNav.prevButton.disable(),e.nextStatus?n.historyNav.nextButton.enable():n.historyNav.nextButton.disable()}))},Z=()=>{const e=document.createElement("button");return e.className="modai-generate",e.innerText="✦",e.type="button",e.title="Generate using AI",e},ee=e=>{const t=document.createElement("button");t.type="button",t.title="Previous Version",t.className="modai-history_prev",t.disable=()=>{t.disabled=!0},t.enable=()=>{t.disabled=!1},t.innerHTML="prev",t.addEventListener("click",(()=>{e.prev()}));const n=document.createElement("button");n.type="button",n.title="Next Version",n.className="modai-history_next",n.disable=()=>{n.disabled=!0},n.enable=()=>{n.disabled=!1},n.innerHTML="next",n.addEventListener("click",(()=>{e.next()}));const o=document.createElement("span");o.update=(e,t)=>{o.innerText=`${e}/${t}`},o.innerText="";const i=document.createElement("span");return i.show=()=>{i.style.display="initial"},i.hide=()=>{i.style.display="none"},i.prevButton=t,i.nextButton=n,i.info=o,i.appendChild(t),i.appendChild(n),i.appendChild(o),i.hide(),t.disable(),n.disable(),i},te=e=>{const t=Z();return t.addEventListener("click",(()=>{K.freePrompt({key:e,field:e,type:"text",resource:MODx.request.id})})),t},ne=(e,t)=>{const n=document.createElement("span"),o=Z();o.addEventListener("click",(async()=>{const n=G(e.el.dom);try{const e=await r.mgr.prompt.text({id:MODx.request.id,field:t});i.insert(e.content),n()}catch(e){n(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e.message}))}})),n.appendChild(o);const i=d.init(t,Q,e.getValue(),{});i.cachedItem.context.els||(i.cachedItem.context.els=[]),i.cachedItem.context.els.push({field:e,wrapper:n});const a=ee(i);return n.appendChild(a),n.historyNav=a,n},oe=(e,t,n)=>{const o=Z();return o.addEventListener("click",(()=>{K.freePrompt({key:t,field:t,type:"image",resource:MODx.request.id,image:{mediaSource:parseInt(e)||void 0},imageActions:{copy:!1,insert:(e,t)=>{n(e),t.api.closeModal()}}})})),o},ie=(e,t)=>{const n=Ext.getCmp(e);if(!n)return;const o=document.createElement("span"),i=Z();i.addEventListener("click",(async()=>{const e=G(n.el.dom);try{const n=await r.mgr.prompt.text({id:MODx.request.id,field:t},(e=>{a.insert(e.content,!0)}));a.insert(n.content),e()}catch(t){e(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:t.message}))}})),o.appendChild(i);const a=d.init(t,Q,n.getValue(),{});a.cachedItem.context.els||(a.cachedItem.context.els=[]),a.cachedItem.context.els.push({field:n,wrapper:o});const s=ee(a);o.appendChild(s),o.historyNav=s,n.label.appendChild(o)},ae=(e,t)=>{const n=Ext.getCmp(e.firstElementChild?.id),o=oe(n.imageBrowser.source,t,(function(e){n.imageBrowser.setValue(e.ctx.url),n.onImageChange(e.ctx.url)})),i=Z();i.style.marginTop="6px",i.addEventListener("click",(async()=>{const e=n.imagePreview.el.dom,o=document.createElement("canvas"),i=o.getContext("2d");if(!i)return;o.width=e.width,o.height=e.height,i.drawImage(e,0,0);const a=o.toDataURL("image/png"),s=G(n.altTextField.items.items[0].el.dom);try{const e=await r.mgr.prompt.vision({image:a,field:t},(e=>{n.altTextField.items.items[0].setValue(e.content),n.altTextField.items.items[0].el.dom.scrollTop=n.altTextField.items.items[0].el.dom.scrollHeight,n.image.altTag=e.content,n.updateValue()}));n.altTextField.items.items[0].setValue(e.content),n.image.altTag=e.content,n.updateValue(),s()}catch(e){s(),Ext.Msg.alert("Failed",_("modai.cmp.failed_try_again",{msg:e.message}))}})),n.altTextField.el.dom.style.display="flex",n.altTextField.el.dom.style.justifyItems="center",n.altTextField.el.dom.style.alignItems="center",n.el.dom.parentElement.parentElement.parentElement.querySelector("label").appendChild(o),n.altTextField.el.dom.appendChild(i)};Ext.onReady((function(){Ext.defer((function(){(()=>{const e={pagetitle:["modx-resource-pagetitle"],longtitle:["modx-resource-longtitle","seosuite-longtitle"],introtext:["modx-resource-introtext"],description:["modx-resource-description","seosuite-description"],content:["modx-resource-content"]};for(const t of modAI?.resourceFields||[])e[t]&&("content"!==t?e[t].forEach((e=>{ie(e,`res.${t}`)})):Ext.getCmp("modx-resource-content").el.dom.querySelector("label").appendChild(te("res.content")))})(),(()=>{const e=Ext.getCmp("modx-panel-resource").getForm();for(const[t,n]of modAI?.tvs||[]){const o=Ext.get(`tv${t}-tr`);if(!o)continue;const i=e.findField(`tv${t}`),a=`tv.${n}`;if(i){if("textfield"===i.xtype||"textarea"===i.xtype){const e=MODx.config[`modai.tv.${n}.text.prompt`],t=o.dom.querySelector("label");if(!t)return;e?t.appendChild(ne(i,a)):t.appendChild(te(a))}if("modx-panel-tv-image"===i.xtype){const e=oe(i.source,a,(function(e){const t={relativeUrl:e.ctx.url,url:e.ctx.url};i.items.items[1].fireEvent("select",t),i.fireEvent("select",t)})),t=o.dom.querySelector("label");if(!t)return;t.appendChild(e)}}else{const e=o.dom.querySelector(".imageplus-panel-input");e&&ae(e,a)}}})()}),500)}));const re={};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxHQUFvQixjQUFoQkEsRUFBTTZILE9BQXlDLGFBQWhCN0gsRUFBTTZILE1BQXNCLENBRTNELE1BQU01VixFQUFTMFMsS0FBS3JOLE9BQU8sWUFBWW9RLGlCQUVqQzdQLEVBQVFnRSxFQUFRNEgsSUFBSW1ELGNBQWMsU0FDeEMsSUFBSy9PLEVBQU8sT0FFUjVGLEVBQ0E0RixFQUFNUyxZQUFZdU0sR0FBdUI3RSxFQUFPMEUsSUFFaEQ3TSxFQUFNUyxZQUFZbU0sR0FBcUJDLEdBRS9DLENBRUEsR0FBb0Isd0JBQWhCMUUsRUFBTTZILE1BQWlDLENBQ3ZDLE1BQU0xQyxFQUFZRixHQUNkakYsRUFBTTRGLE9BQ05sQixHQUNBLFNBQVNuUCxHQUNELE1BQU11UyxFQUFZLENBQ2RDLFlBQWF4UyxFQUFJVixJQUFJL0gsSUFDckJBLElBQUt5SSxFQUFJVixJQUFJL0gsS0FHakJrVCxFQUFNd0csTUFBTUEsTUFBTSxHQUFHaEQsVUFBVSxTQUFVc0UsR0FDekM5SCxFQUFNd0QsVUFBVSxTQUFVc0UsRUFDbEMsSUFHRWpRLEVBQVFnRSxFQUFRNEgsSUFBSW1ELGNBQWMsU0FDeEMsSUFBSy9PLEVBQU8sT0FFWkEsRUFBTVMsWUFBWTZNLEVBQ3RCLENBbkNBLEtBTkEsQ0FDSSxNQUFNSyxFQUFlM0osRUFBUTRILElBQUltRCxjQUFjLDBCQUMzQ3BCLEdBQ0FELEdBQWdCQyxFQUFjZCxFQUd0QyxDQW9DSixHQXFDUXNELEVBQ0osR0FBRyxJQUNQLElDbGFHLE1BQU0sR0FBUyxDQUFDLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2RBSS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vbW9kQUkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbW9kQUkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21vZEFJL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbW9kQUkvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9tb2RBSS8uL19idWlsZC9qcy9zcmMvZXhlY3V0b3IudHMiLCJ3ZWJwYWNrOi8vbW9kQUkvLi9fYnVpbGQvanMvc3JjL2hpc3RvcnkudHMiLCJ3ZWJwYWNrOi8vbW9kQUkvLi9fYnVpbGQvanMvc3JjL3VpL3V0aWxzLnRzIiwid2VicGFjazovL21vZEFJLy4vX2J1aWxkL2pzL3NyYy9jaGF0SGlzdG9yeS50cyIsIndlYnBhY2s6Ly9tb2RBSS8uL19idWlsZC9qcy9zcmMvdWkvYWN0aW9uQnV0dG9uLnRzIiwid2VicGFjazovL21vZEFJLy4vX2J1aWxkL2pzL3NyYy91aS9tb2RhbC50cyIsIndlYnBhY2s6Ly9tb2RBSS8uL19idWlsZC9qcy9zcmMvdWkvb3ZlcmxheS50cyIsIndlYnBhY2s6Ly9tb2RBSS8uL19idWlsZC9qcy9zcmMvdWkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbW9kQUkvLi9fYnVpbGQvanMvc3JjL3VpL2lmcmFtZS50cyIsIndlYnBhY2s6Ly9tb2RBSS8uL19idWlsZC9qcy9zcmMvcmVzb3VyY2UudHMiLCJ3ZWJwYWNrOi8vbW9kQUkvLi9fYnVpbGQvanMvc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIm1vZEFJXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm1vZEFJXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidHlwZSBTZXJ2aWNlVHlwZSA9ICdjaGF0Z3B0JyB8ICdjbGF1ZGUnIHwgJ2dlbWluaSc7XG50eXBlIEJ1ZmZlck1vZGUgPSAnYnVmZmVyZWQnIHwgJ3N0cmVhbSc7XG5cbmV4cG9ydCB0eXBlIFNlcnZpY2VSZXNwb25zZSA9IFRleHREYXRhIHwgSW1hZ2VEYXRhO1xuXG50eXBlIFNlcnZpY2VIYW5kbGVycyA9IHtcbiAgICBidWZmZXJlZDoge1xuICAgICAgICBjaGF0Z3B0OiB7XG4gICAgICAgICAgICBjb250ZW50OiAoZGF0YTogYW55KSA9PiBUZXh0RGF0YTtcbiAgICAgICAgICAgIGltYWdlOiAoZGF0YTogYW55KSA9PiBJbWFnZURhdGE7XG4gICAgICAgIH07XG4gICAgICAgIGNsYXVkZToge1xuICAgICAgICAgICAgY29udGVudDogKGRhdGE6IGFueSkgPT4gVGV4dERhdGE7XG4gICAgICAgIH07XG4gICAgICAgIGdlbWluaToge1xuICAgICAgICAgICAgY29udGVudDogKGRhdGE6IGFueSkgPT4gVGV4dERhdGE7XG4gICAgICAgICAgICBpbWFnZTogKGRhdGE6IGFueSkgPT4gSW1hZ2VEYXRhO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgc3RyZWFtOiB7XG4gICAgICAgIGNoYXRncHQ6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IChuZXdEYXRhOiBhbnksIGN1cnJlbnREYXRhOiBUZXh0RGF0YSkgPT4gVGV4dERhdGE7XG4gICAgICAgIH07XG4gICAgICAgIGNsYXVkZToge1xuICAgICAgICAgICAgY29udGVudDogKG5ld0RhdGE6IGFueSwgY3VycmVudERhdGE6IFRleHREYXRhKSA9PiBUZXh0RGF0YTtcbiAgICAgICAgfTtcbiAgICAgICAgZ2VtaW5pOiB7XG4gICAgICAgICAgICBjb250ZW50OiAobmV3RGF0YTogYW55LCBjdXJyZW50RGF0YTogVGV4dERhdGEpID0+IFRleHREYXRhO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbnR5cGUgRm9yRXhlY3V0b3IgPSB7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgYm9keTogc3RyaW5nO1xuICAgIHNlcnZpY2U6IHN0cmluZztcbiAgICBoZWFkZXJzOiBIZWFkZXJzSW5pdDtcbiAgICBwYXJzZXI6IHN0cmluZztcbiAgICBzdHJlYW06IGJvb2xlYW47XG59O1xuXG50eXBlIEV4ZWN1dG9yRGF0YSA9IHtcbiAgICBmb3JFeGVjdXRvcjogRm9yRXhlY3V0b3I7XG59IHwgc3RyaW5nO1xuXG50eXBlIEZyZWVUZXh0UGFyYW1zID0ge1xuICAgIHByb21wdDogc3RyaW5nO1xuICAgIGZpZWxkPzogc3RyaW5nO1xuICAgIGNvbnRleHQ/OiBzdHJpbmc7XG4gICAgbmFtZXNwYWNlPzogc3RyaW5nO1xuICAgIG1lc3NhZ2VzOiB7cm9sZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmd9W107XG59XG5cbnR5cGUgVGV4dFBhcmFtcyA9IHtcbiAgICBmaWVsZD86IHN0cmluZztcbiAgICBuYW1lc3BhY2U/OiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZyB8IG51bWJlcjtcbn1cblxudHlwZSBWaXNpb25QYXJhbXMgPSB7XG4gICAgZmllbGQ/OiBzdHJpbmc7XG4gICAgbmFtZXNwYWNlPzogc3RyaW5nO1xuICAgIGltYWdlOiBzdHJpbmc7XG59XG5cbnR5cGUgSW1hZ2VQYXJhbXMgPSB7XG4gICAgcHJvbXB0OiBzdHJpbmc7XG4gICAgZmllbGQ/OiBzdHJpbmc7XG4gICAgbmFtZXNwYWNlPzogc3RyaW5nO1xufVxuXG50eXBlIERvd25sb2FkSW1hZ2VQYXJhbXMgPSB7XG4gICAgdXJsOiBzdHJpbmdcbiAgICBmaWVsZD86IHN0cmluZztcbiAgICBuYW1lc3BhY2U/OiBzdHJpbmc7XG4gICAgcmVzb3VyY2U/OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgbWVkaWFTb3VyY2U/OiBzdHJpbmcgfCBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBUZXh0RGF0YSA9IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgSW1hZ2VEYXRhID0ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG59XG5cbnR5cGUgQ2h1bmtTdHJlYW08RCA9IHVua25vd24+ID0gKGRhdGE6IEQpID0+IHZvaWQ7XG5cbmNvbnN0IHNlcnZpY2VzOiBTZXJ2aWNlSGFuZGxlcnMgPSB7XG4gICAgYnVmZmVyZWQ6IHtcbiAgICAgICAgY2hhdGdwdDoge1xuICAgICAgICAgICAgY29udGVudDogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZGF0YT8uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfKCdtb2RhaS5jbXAuZmFpbGVkX3JlcXVlc3QnKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhLmlkO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlOiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGRhdGE/LmRhdGE/LlswXT8udXJsO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF8oJ21vZGFpLmNtcC5mYWlsZWRfcmVxdWVzdCcpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZDogYGNoYXRncHQtJHtEYXRlLm5vdygpfS0ke01hdGgucm91bmQoTWF0aC5yYW5kb20oKSoxMDAwKX1gLFxuICAgICAgICAgICAgICAgICAgICB1cmxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsYXVkZToge1xuICAgICAgICAgICAgY29udGVudDogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZGF0YT8uY29udGVudD8uWzBdPy50ZXh0O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfKCdtb2RhaS5jbXAuZmFpbGVkX3JlcXVlc3QnKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhLmlkO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZW1pbmk6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGRhdGE/LmNhbmRpZGF0ZXM/LlswXT8uY29udGVudD8ucGFydHM/LlswXT8udGV4dDtcblxuICAgICAgICAgICAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXygnbW9kYWkuY21wLmZhaWxlZF9yZXF1ZXN0JykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBgZ2VtaW5pLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqMTAwMCl9YCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW1hZ2U6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gZGF0YT8ucHJlZGljdGlvbnM/LlswXT8uYnl0ZXNCYXNlNjRFbmNvZGVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFiYXNlNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF8oJ21vZGFpLmNtcC5mYWlsZWRfcmVxdWVzdCcpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZDogYGdlbWluaS0ke0RhdGUubm93KCl9LSR7TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKjEwMDApfWAsXG4gICAgICAgICAgICAgICAgICAgIHVybDogYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke2Jhc2U2NH1gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzdHJlYW06IHtcbiAgICAgICAgY2hhdGdwdDoge1xuICAgICAgICAgICAgY29udGVudDogKG5ld0RhdGEsIGN1cnJlbnREYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRlbnQgPSBjdXJyZW50RGF0YT8uY29udGVudCA/PyAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gbmV3RGF0YS5jaG9pY2VzWzBdPy5kZWx0YT8uY29udGVudCB8fCAnJztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmN1cnJlbnREYXRhLFxuICAgICAgICAgICAgICAgICAgICBpZDogbmV3RGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogYCR7Y3VycmVudENvbnRlbnR9JHtjb250ZW50fWBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbGF1ZGU6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IChuZXdEYXRhLCBjdXJyZW50RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZW50ID0gY3VycmVudERhdGE/LmNvbnRlbnQgPz8gJyc7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gbmV3RGF0YS5kZWx0YT8udGV4dCB8fCAnJztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmN1cnJlbnREYXRhLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBgJHtjdXJyZW50Q29udGVudH0ke2NvbnRlbnR9YFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdlbWluaToge1xuICAgICAgICAgICAgY29udGVudDogKG5ld0RhdGEsIGN1cnJlbnREYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRlbnQgPSBjdXJyZW50RGF0YT8uY29udGVudCA/PyAnJztcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBuZXdEYXRhLmNhbmRpZGF0ZXNbMF0/LmNvbnRlbnQ/LnBhcnRzWzBdPy50ZXh0IHx8ICcnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3VycmVudERhdGEsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGAke2N1cnJlbnRDb250ZW50fSR7Y29udGVudH1gXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG59O1xuXG5jb25zdCBlcnJvckhhbmRsZXIgPSBhc3luYyAocmVzOiBSZXNwb25zZSkgPT4ge1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICBpZiAoZGF0YT8uZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Jlcy5zdGF0dXN9ICR7cmVzLnN0YXR1c1RleHR9YCk7XG4gICAgfVxufVxuXG5jb25zdCBoYW5kbGVTdHJlYW0gPSBhc3luYyAocmVzOiBSZXNwb25zZSwgc2VydmljZTogc3RyaW5nLCBwYXJzZXI6ICdjb250ZW50Jywgb25DaHVua1N0cmVhbT86IENodW5rU3RyZWFtPFRleHREYXRhPiwgc2lnbmFsPzogQWJvcnRTaWduYWwpOiBQcm9taXNlPFRleHREYXRhPiA9PiB7XG4gICAgaWYgKCFyZXMuYm9keSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlYWRlciA9IHJlcy5ib2R5LmdldFJlYWRlcigpO1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04Jyk7XG4gICAgbGV0IGJ1ZmZlciA9ICcnO1xuICAgIGxldCBjdXJyZW50RGF0YTogVGV4dERhdGEgPSB7XG4gICAgICAgIGlkOiBgJHtzZXJ2aWNlfS0ke0RhdGUubm93KCl9LSR7TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKjEwMDApfWAsXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgIH07XG5cblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChzaWduYWwgJiYgc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgIGlmIChkb25lKSBicmVhaztcblxuICAgICAgICBjb25zdCBjaHVuayA9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7c3RyZWFtOiB0cnVlfSk7XG5cbiAgICAgICAgaWYgKHNlcnZpY2UgPT09ICdnZW1pbmknKSB7XG4gICAgICAgICAgICBjb25zdCBqc29uTGluZXMgPSBjaHVuay50cmltKCkuc3BsaXQoXCIsXFxyXFxuXCIpLm1hcCgobGluZSkgPT4gbGluZS5yZXBsYWNlKC9eXFxbfF0kL2csICcnKSkuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkgIT09ICcnKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBqc29uTGluZXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGEgPSBzZXJ2aWNlcy5zdHJlYW1bc2VydmljZV1bcGFyc2VyXShwYXJzZWREYXRhLCBjdXJyZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbkNodW5rU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNodW5rU3RyZWFtKGN1cnJlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXJ2aWNlID09PSAnY2hhdGdwdCcpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHVuaztcblxuICAgICAgICAgICAgbGV0IGxhc3ROZXdsaW5lSW5kZXggPSAwO1xuICAgICAgICAgICAgbGV0IG5ld2xpbmVJbmRleDtcblxuICAgICAgICAgICAgd2hpbGUgKChuZXdsaW5lSW5kZXggPSBidWZmZXIuaW5kZXhPZignXFxuJywgbGFzdE5ld2xpbmVJbmRleCkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBidWZmZXIuc2xpY2UobGFzdE5ld2xpbmVJbmRleCwgbmV3bGluZUluZGV4KS50cmltKCk7XG4gICAgICAgICAgICAgICAgbGFzdE5ld2xpbmVJbmRleCA9IG5ld2xpbmVJbmRleCArIDE7XG5cbiAgICAgICAgICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKCdkYXRhOiAnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbGluZS5zbGljZSg2KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PT0gJ1tET05FXScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGEgPSBzZXJ2aWNlcy5zdHJlYW1bc2VydmljZV1bcGFyc2VyXShwYXJzZWREYXRhLCBjdXJyZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25DaHVua1N0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2h1bmtTdHJlYW0oY3VycmVudERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGxhc3ROZXdsaW5lSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlcnZpY2UgPT09ICdjbGF1ZGUnKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2h1bms7XG5cbiAgICAgICAgICAgIGxldCBsYXN0TmV3bGluZUluZGV4ID0gMDtcbiAgICAgICAgICAgIGxldCBuZXdsaW5lSW5kZXg7XG5cbiAgICAgICAgICAgIHdoaWxlICgobmV3bGluZUluZGV4ID0gYnVmZmVyLmluZGV4T2YoJ1xcbicsIGxhc3ROZXdsaW5lSW5kZXgpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gYnVmZmVyLnNsaWNlKGxhc3ROZXdsaW5lSW5kZXgsIG5ld2xpbmVJbmRleCkudHJpbSgpO1xuICAgICAgICAgICAgICAgIGxhc3ROZXdsaW5lSW5kZXggPSBuZXdsaW5lSW5kZXggKyAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aCgnZGF0YTogJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGxpbmUuc2xpY2UoNik7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZERhdGEudHlwZSA9PT0gJ21lc3NhZ2Vfc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGEuaWQgPSBwYXJzZWREYXRhLm1lc3NhZ2UuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWREYXRhLnR5cGUgIT09ICdjb250ZW50X2Jsb2NrX2RlbHRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0YSA9IHNlcnZpY2VzLnN0cmVhbVtzZXJ2aWNlXVtwYXJzZXJdKHBhcnNlZERhdGEsIGN1cnJlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbkNodW5rU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaHVua1N0cmVhbShjdXJyZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShsYXN0TmV3bGluZUluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50RGF0YTtcblxufVxuXG5jb25zdCBzZXJ2aWNlRXhlY3V0b3IgPSBhc3luYyA8RCBleHRlbmRzIFNlcnZpY2VSZXNwb25zZT4oZGV0YWlsczogRXhlY3V0b3JEYXRhLCBvbkNodW5rU3RyZWFtPzogQ2h1bmtTdHJlYW08RD4sIGNvbnRyb2xsZXI/OiBBYm9ydENvbnRyb2xsZXIpOiBQcm9taXNlPEQ+ID0+IHtcbiAgICBpZiAodHlwZW9mIGRldGFpbHMgIT09ICdvYmplY3QnIHx8ICFkZXRhaWxzLmZvckV4ZWN1dG9yKSB7XG4gICAgICAgIHJldHVybiBkZXRhaWxzIGFzIHVua25vd24gYXMgRDtcbiAgICB9XG5cbiAgICBjb25zdCBleGVjdXRvckRldGFpbHMgPSBkZXRhaWxzLmZvckV4ZWN1dG9yO1xuXG4gICAgY29udHJvbGxlciA9ICFjb250cm9sbGVyID8gbmV3IEFib3J0Q29udHJvbGxlcigpIDogY29udHJvbGxlcjtcbiAgICBjb25zdCBzaWduYWwgPSBjb250cm9sbGVyLnNpZ25hbDtcblxuICAgIGNvbnN0IGNhbGxTZXJ2aWNlID0gYXN5bmMgKGRldGFpbHM6IEZvckV4ZWN1dG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGRldGFpbHMudXJsLCB7XG4gICAgICAgICAgICBzaWduYWwsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGJvZHk6IGRldGFpbHMuYm9keSxcbiAgICAgICAgICAgIGhlYWRlcnM6IGRldGFpbHMuaGVhZGVyc1xuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBlcnJvckhhbmRsZXIocmVzKTtcblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBjb25zdCBjYWxsU3RyZWFtU2VydmljZSA9IGFzeW5jIChkZXRhaWxzOiBGb3JFeGVjdXRvcikgPT4ge1xuICAgICAgICBpZiAoZXhlY3V0b3JEZXRhaWxzLnBhcnNlciAhPT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXygnbW9kYWkuY21wLnNlcnZpY2VfdW5zdXBwb3J0ZWQnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChkZXRhaWxzLnVybCwge1xuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBib2R5OiBkZXRhaWxzLmJvZHksXG4gICAgICAgICAgICBoZWFkZXJzOiBkZXRhaWxzLmhlYWRlcnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgZXJyb3JIYW5kbGVyKHJlcyk7XG5cbiAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmVhbShyZXMsIGV4ZWN1dG9yRGV0YWlscy5zZXJ2aWNlLCBleGVjdXRvckRldGFpbHMucGFyc2VyLCBvbkNodW5rU3RyZWFtIGFzIENodW5rU3RyZWFtPFRleHREYXRhPik7XG4gICAgfVxuXG4gICAgaWYgKCFleGVjdXRvckRldGFpbHMuc2VydmljZSB8fCAhZXhlY3V0b3JEZXRhaWxzLnBhcnNlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXygnbW9kYWkuY21wLnNlcnZpY2VfcmVxdWlyZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFzZXJ2aWNlc1tleGVjdXRvckRldGFpbHMuc3RyZWFtID8gJ3N0cmVhbScgOiAnYnVmZmVyZWQnIGFzIEJ1ZmZlck1vZGVdPy5bZXhlY3V0b3JEZXRhaWxzLnNlcnZpY2UgYXMgU2VydmljZVR5cGVdPy5bZXhlY3V0b3JEZXRhaWxzLnBhcnNlciBhcyBrZXlvZiBTZXJ2aWNlSGFuZGxlcnNbQnVmZmVyTW9kZV1bU2VydmljZVR5cGVdXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXygnbW9kYWkuY21wLnNlcnZpY2VfdW5zdXBwb3J0ZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKGV4ZWN1dG9yRGV0YWlscy5zdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIGNhbGxTdHJlYW1TZXJ2aWNlKGV4ZWN1dG9yRGV0YWlscykgYXMgUHJvbWlzZTxEPjtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgY2FsbFNlcnZpY2UoZXhlY3V0b3JEZXRhaWxzKTtcbiAgICByZXR1cm4gc2VydmljZXNbJ2J1ZmZlcmVkJ11bZXhlY3V0b3JEZXRhaWxzLnNlcnZpY2UgYXMgU2VydmljZVR5cGVdW2V4ZWN1dG9yRGV0YWlscy5wYXJzZXIgYXMga2V5b2YgU2VydmljZUhhbmRsZXJzWydidWZmZXJlZCddW1NlcnZpY2VUeXBlXV0oZGF0YSkgYXMgRDtcbn1cblxuY29uc3QgbW9keEZldGNoID0gYXN5bmMgPFI+KGFjdGlvbjogc3RyaW5nLCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7bW9kQUkuYXBpVVJMfT9hY3Rpb249JHthY3Rpb259YCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgaWYgKGRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZGV0YWlsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKSBhcyBSO1xufVxuXG5jb25zdCBhaUZldGNoID0gYXN5bmMgPEQgZXh0ZW5kcyBTZXJ2aWNlUmVzcG9uc2U+KGFjdGlvbjogc3RyaW5nLCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBvbkNodW5rU3RyZWFtPzogQ2h1bmtTdHJlYW08RD4sIGNvbnRyb2xsZXI/OiBBYm9ydENvbnRyb2xsZXIpOiBQcm9taXNlPEQ+ID0+IHtcbiAgICBjb250cm9sbGVyID0gIWNvbnRyb2xsZXIgPyBuZXcgQWJvcnRDb250cm9sbGVyKCkgOiBjb250cm9sbGVyO1xuICAgIGNvbnN0IHNpZ25hbCA9IGNvbnRyb2xsZXIuc2lnbmFsO1xuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7bW9kQUkuYXBpVVJMfT9hY3Rpb249JHthY3Rpb259YCwge1xuICAgICAgICBzaWduYWwsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5kZXRhaWwpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcnZpY2UgPSByZXMuaGVhZGVycy5nZXQoJ3gtbW9kYWktc2VydmljZScpID8/ICdjaGF0Z3B0JztcbiAgICBjb25zdCBwYXJzZXIgPSByZXMuaGVhZGVycy5nZXQoJ3gtbW9kYWktcGFyc2VyJykgPz8gJ2NvbnRlbnQnO1xuICAgIGNvbnN0IHN0cmVhbSA9IHBhcnNlSW50KHJlcy5oZWFkZXJzLmdldCgneC1tb2RhaS1zdHJlYW0nKSA/PyAnMCcpID09PSAxO1xuICAgIGNvbnN0IHByb3h5ID0gcGFyc2VJbnQocmVzLmhlYWRlcnMuZ2V0KCd4LW1vZGFpLXByb3h5JykgPz8gJzAnKSA9PT0gMTtcblxuICAgIGlmICghcHJveHkpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgICAgIHJldHVybiBzZXJ2aWNlRXhlY3V0b3I8RD4oZGF0YSwgb25DaHVua1N0cmVhbSwgY29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgaWYgKCFzZXJ2aWNlIHx8ICFwYXJzZXIpIHtcbiAgICAgICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXygnbW9kYWkuY21wLnNlcnZpY2VfcmVxdWlyZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFzZXJ2aWNlc1tzdHJlYW0gPyAnc3RyZWFtJyA6ICdidWZmZXJlZCcgYXMgQnVmZmVyTW9kZV0/LltzZXJ2aWNlIGFzIFNlcnZpY2VUeXBlXT8uW3BhcnNlciBhcyBrZXlvZiBTZXJ2aWNlSGFuZGxlcnNbQnVmZmVyTW9kZV1bU2VydmljZVR5cGVdXSkge1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihfKCdtb2RhaS5jbXAuc2VydmljZV91bnN1cHBvcnRlZCcpKTtcbiAgICB9XG5cbiAgICBpZiAoIXN0cmVhbSkge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2VzWydidWZmZXJlZCddW3NlcnZpY2UgYXMgU2VydmljZVR5cGVdW3BhcnNlciBhcyBrZXlvZiBTZXJ2aWNlSGFuZGxlcnNbJ2J1ZmZlcmVkJ11bU2VydmljZVR5cGVdXShkYXRhKSBhcyBEO1xuICAgIH1cblxuICAgIGlmIChwYXJzZXIgIT09ICdjb250ZW50Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXygnbW9kYWkuY21wLnNlcnZpY2VfdW5zdXBwb3J0ZWQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IGhhbmRsZVN0cmVhbShyZXMsIHNlcnZpY2UsIHBhcnNlciwgb25DaHVua1N0cmVhbSBhcyBDaHVua1N0cmVhbTxUZXh0RGF0YT4sIHNpZ25hbCkgYXMgRDtcbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dG9yID0ge1xuICAgIG1ncjoge1xuICAgICAgICBkb3dubG9hZDoge1xuICAgICAgICAgICAgaW1hZ2U6IGFzeW5jIChwYXJhbXM6IERvd25sb2FkSW1hZ2VQYXJhbXMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgbW9keEZldGNoPHt1cmw6IHN0cmluZzsgZnVsbFVybDogc3RyaW5nfT4oJ0Rvd25sb2FkXFxcXEltYWdlJywgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJvbXB0OiB7XG4gICAgICAgICAgICBmcmVlVGV4dDogYXN5bmMgKHBhcmFtczogRnJlZVRleHRQYXJhbXMsIG9uQ2h1bmtTdHJlYW0/OiBDaHVua1N0cmVhbTxUZXh0RGF0YT4sIGNvbnRyb2xsZXI/OiBBYm9ydENvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWlGZXRjaCgnUHJvbXB0XFxcXEZyZWVUZXh0JywgcGFyYW1zLCBvbkNodW5rU3RyZWFtLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZXh0OiBhc3luYyAocGFyYW1zOiBUZXh0UGFyYW1zLCBvbkNodW5rU3RyZWFtPzogQ2h1bmtTdHJlYW08VGV4dERhdGE+LCBjb250cm9sbGVyPzogQWJvcnRDb250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFpRmV0Y2goJ1Byb21wdFxcXFxUZXh0JywgcGFyYW1zLCBvbkNodW5rU3RyZWFtLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpb246IGFzeW5jIChwYXJhbXM6IFZpc2lvblBhcmFtcywgb25DaHVua1N0cmVhbT86IENodW5rU3RyZWFtPFRleHREYXRhPiwgY29udHJvbGxlcj86IEFib3J0Q29udHJvbGxlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhaUZldGNoKCdQcm9tcHRcXFxcVmlzaW9uJywgcGFyYW1zLCBvbkNodW5rU3RyZWFtLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZTogYXN5bmMgKHBhcmFtczogSW1hZ2VQYXJhbXMsIGNvbnRyb2xsZXI/OiBBYm9ydENvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWlGZXRjaDxJbWFnZURhdGE+KCdQcm9tcHRcXFxcSW1hZ2UnLCBwYXJhbXMsIHVuZGVmaW5lZCwgY29udHJvbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsInR5cGUgQ2FjaGU8QyA9IHVua25vd24+ID0ge1xuICAgIHZpc2libGU6IG51bWJlcjtcbiAgICB2YWx1ZXM6IHN0cmluZ1tdO1xuICAgIGNvbnRleHQ6IEM7XG4gICAgc3luY1VJPzogKGRhdGE6IERhdGFPdXRwdXQ8Qz4sIG5vU3RvcmU/OiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBEYXRhT3V0cHV0PEMgPSB1bmtub3duPiA9IHtcbiAgICB2YWx1ZTogc3RyaW5nLFxuICAgIG5leHRTdGF0dXM6IGJvb2xlYW4sXG4gICAgcHJldlN0YXR1czogYm9vbGVhbixcbiAgICBjdXJyZW50OiBudW1iZXIsXG4gICAgdG90YWw6IG51bWJlcixcbiAgICBjb250ZXh0OiBDLFxufVxuXG5jb25zdCBfY2FjaGU6IFJlY29yZDxzdHJpbmcsIENhY2hlPiA9IHt9O1xuXG5leHBvcnQgY29uc3QgaGlzdG9yeSA9IHtcbiAgICBfZm9ybWF0T3V0cHV0KGtleTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IERhdGFPdXRwdXQge1xuICAgICAgICBjb25zdCBjYWNoZWRJdGVtID0gX2NhY2hlW2tleV07XG5cbiAgICAgICAgY29uc3QgcHJldlN0YXR1cyA9IChjYWNoZWRJdGVtLnZpc2libGUgPiAwKTtcbiAgICAgICAgY29uc3QgbmV4dFN0YXR1cyA9IChjYWNoZWRJdGVtLnZpc2libGUgIT09IGNhY2hlZEl0ZW0udmFsdWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogKGNhY2hlZEl0ZW0udmFsdWVzW2NhY2hlZEl0ZW0udmlzaWJsZV0gPz8gbnVsbCksXG4gICAgICAgICAgICBuZXh0U3RhdHVzLFxuICAgICAgICAgICAgcHJldlN0YXR1cyxcbiAgICAgICAgICAgIGN1cnJlbnQ6IGNhY2hlZEl0ZW0udmlzaWJsZSArIDEsXG4gICAgICAgICAgICB0b3RhbDogY2FjaGVkSXRlbS52YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgICAgY29udGV4dDogY2FjaGVkSXRlbS5jb250ZXh0LFxuICAgICAgICB9XG4gICAgfSxcbiAgICBpbnNlcnQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG5vU3RvcmU6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBjYWNoZWRJdGVtID0gX2NhY2hlW2tleV07XG5cbiAgICAgICAgaWYgKCFub1N0b3JlKSB7XG4gICAgICAgICAgICBjYWNoZWRJdGVtLnZpc2libGUgPSBjYWNoZWRJdGVtLnZhbHVlcy5wdXNoKHZhbHVlKSAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvdXRwdXQgPSB0aGlzLl9mb3JtYXRPdXRwdXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FjaGVkSXRlbS5zeW5jVUkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZEl0ZW0uc3luY1VJKG91dHB1dCwgbm9TdG9yZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0sXG4gICAgbmV4dChrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjYWNoZWRJdGVtID0gX2NhY2hlW2tleV07XG5cbiAgICAgICAgaWYgKGNhY2hlZEl0ZW0udmlzaWJsZSA9PT0gY2FjaGVkSXRlbS52YWx1ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdE91dHB1dChrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGVkSXRlbS52aXNpYmxlKys7XG5cbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gdGhpcy5fZm9ybWF0T3V0cHV0KGtleSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjYWNoZWRJdGVtLnN5bmNVSSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkSXRlbS5zeW5jVUkob3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSxcbiAgICBwcmV2KGtleTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZEl0ZW0gPSBfY2FjaGVba2V5XTtcblxuICAgICAgICBpZiAoY2FjaGVkSXRlbS52aXNpYmxlIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRPdXRwdXQoa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhY2hlZEl0ZW0udmlzaWJsZS0tO1xuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHRoaXMuX2Zvcm1hdE91dHB1dChrZXkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2FjaGVkSXRlbS5zeW5jVUkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZEl0ZW0uc3luY1VJKG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0sXG4gICAgaW5pdDxDPihrZXk6IHN0cmluZywgc3luY1VJPzogKGRhdGE6IERhdGFPdXRwdXQ8Qz4sIG5vU3RvcmU/OiBib29sZWFuKSA9PiB2b2lkLCBpbml0VmFsdWU/OiBzdHJpbmcsIGNvbnRleHQ/OiBDKSB7XG4gICAgICAgIGlmICghX2NhY2hlW2tleV0pIHtcbiAgICAgICAgICAgIF9jYWNoZVtrZXldID0ge1xuICAgICAgICAgICAgICAgIHZpc2libGU6IC0xLFxuICAgICAgICAgICAgICAgIHZhbHVlczogW10sXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgX2NhY2hlW2tleV0uc3luY1VJID0gc3luY1VJO1xuXG4gICAgICAgIGlmIChpbml0VmFsdWUpIHtcbiAgICAgICAgICAgIF9jYWNoZVtrZXldLnZhbHVlcyA9IFtpbml0VmFsdWVdO1xuICAgICAgICAgICAgX2NhY2hlW2tleV0udmlzaWJsZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FjaGVkSXRlbTogX2NhY2hlW2tleV0gYXMgQ2FjaGU8Qz4sXG4gICAgICAgICAgICBnZXREYXRhOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdE91dHB1dChrZXkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEFsbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBfY2FjaGVba2V5XS52YWx1ZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3luY1VJOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfY2FjaGVba2V5XS5zeW5jVUkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NhY2hlW2tleV0uc3luY1VJKHRoaXMuX2Zvcm1hdE91dHB1dChrZXkpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluc2VydDogKHZhbHVlOiBzdHJpbmcsIG5vU3RvcmU6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluc2VydChrZXksIHZhbHVlLCBub1N0b3JlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dChrZXkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXY6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufTtcbiIsImV4cG9ydCBjb25zdCBhcHBseVN0eWxlcyA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgc3R5bGVPYmo6IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj4pID0+IHtcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlT2JqKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSA8SyBleHRlbmRzIGtleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcD4odHlwZTogSywgc3R5bGVPYmo/OiBQYXJ0aWFsPENTU1N0eWxlRGVjbGFyYXRpb24+LCB0ZXh0Q29udGVudDogc3RyaW5nID0gJycpOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10gPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXG4gICAgaWYgKHN0eWxlT2JqKSB7XG4gICAgICAgIGFwcGx5U3R5bGVzKGVsZW1lbnQsIHN0eWxlT2JqKTtcbiAgICB9XG5cbiAgICBpZiAodGV4dENvbnRlbnQpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgY29uc3QgbmxUb0JyID0gKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiAvPFtePl0qPi9nLnRlc3QoY29udGVudCkgPyBjb250ZW50IDogY29udGVudC5yZXBsYWNlKC9cXHJcXG58XFxufFxcci9nLCAnPGJyPicpO1xufVxuIiwiZXhwb3J0IHR5cGUgTWVzc2FnZVR5cGUgPSAndGV4dCcgfCAnaW1hZ2UnO1xuXG5leHBvcnQgdHlwZSBVcGRhdGFibGVIVE1MRWxlbWVudCA9IEhUTUxFbGVtZW50ICYge1xuICAgIHVwZGF0ZT86IChtc2c6IE1lc3NhZ2UpID0+IHZvaWRcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2UgPSB7XG4gICAgY29udGVudDogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIHJvbGU6IHN0cmluZztcbiAgICB0eXBlOiBNZXNzYWdlVHlwZTtcbiAgICBlbD86IFVwZGF0YWJsZUhUTUxFbGVtZW50O1xuICAgIGN0eDogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59O1xuXG50eXBlIE5hbWVzcGFjZSA9IHtcbiAgICBoaXN0b3J5OiBNZXNzYWdlW107XG4gICAgaWRSZWY6IFJlY29yZDxzdHJpbmcsIE1lc3NhZ2U+O1xuICAgIG9uQWRkTWVzc2FnZTogKG1zZzogTWVzc2FnZSkgPT4gVXBkYXRhYmxlSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBfbmFtZXNwYWNlOiBSZWNvcmQ8c3RyaW5nLCBOYW1lc3BhY2U+ID0ge307XG5cbmNvbnN0IFJPTEVTID0ge1xuICAgICd1c2VyJzogJ3VzZXInLFxuICAgICdhc3Npc3RhbnQnOiAnYXNzaXN0YW50Jyxcbn07XG5cbmNvbnN0IGFkZE1lc3NhZ2UgPSAoa2V5OiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgcm9sZTogc3RyaW5nLCBpZDogc3RyaW5nLCBoaWRkZW46IGJvb2xlYW4gPSBmYWxzZSwgdHlwZTogTWVzc2FnZVR5cGUgPSAndGV4dCcpID0+IHtcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBfbmFtZXNwYWNlW2tleV07XG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG1zZ09iamVjdDogTWVzc2FnZSA9IHtjb250ZW50LCByb2xlLCBpZCwgaGlkZGVuLCB0eXBlLCBjdHg6IHt9fTtcblxuICAgIGNvbnN0IGluZGV4ID0gbmFtZXNwYWNlLmhpc3RvcnkucHVzaChtc2dPYmplY3QpIC0gMTtcbiAgICBpZiAoaWQpIHtcbiAgICAgICAgbmFtZXNwYWNlLmlkUmVmW2lkXSA9IG5hbWVzcGFjZS5oaXN0b3J5W2luZGV4XTtcbiAgICB9XG5cbiAgICBtc2dPYmplY3QuZWwgPSBuYW1lc3BhY2Uub25BZGRNZXNzYWdlKG1zZ09iamVjdCk7XG59XG5cbmNvbnN0IHVwZGF0ZU1lc3NhZ2UgPSAoa2V5OiBzdHJpbmcsIGlkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgdHlwZTogTWVzc2FnZVR5cGUgPSAndGV4dCcpID0+IHtcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBfbmFtZXNwYWNlW2tleV07XG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghbmFtZXNwYWNlLmlkUmVmW2lkXSkge1xuICAgICAgICBhZGRNZXNzYWdlKGtleSwgY29udGVudCwgUk9MRVMuYXNzaXN0YW50LCBpZCwgZmFsc2UsIHR5cGUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbXNnID0gbmFtZXNwYWNlLmlkUmVmW2lkXTtcbiAgICBtc2cuY29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICBpZiAobXNnLmVsICYmIG1zZy5lbC51cGRhdGUpIHtcbiAgICAgICAgbXNnLmVsLnVwZGF0ZShtc2cpO1xuICAgIH1cbn1cblxuY29uc3QgZ2V0TWVzc2FnZSA9IChrZXk6IHN0cmluZywgaWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IF9uYW1lc3BhY2Vba2V5XTtcbiAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVzcGFjZS5pZFJlZltpZF07XG59XG5cbmV4cG9ydCBjb25zdCBjaGF0SGlzdG9yeSA9IHtcbiAgICBpbml0OiAoa2V5OiBzdHJpbmcsIG9uQWRkTWVzc2FnZTogTmFtZXNwYWNlWydvbkFkZE1lc3NhZ2UnXSkgPT4ge1xuICAgICAgICBpZiAoIV9uYW1lc3BhY2Vba2V5XSkge1xuICAgICAgICAgICAgX25hbWVzcGFjZVtrZXldID0ge1xuICAgICAgICAgICAgICAgIGhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgICAgIGlkUmVmOiB7fSxcbiAgICAgICAgICAgICAgICBvbkFkZE1lc3NhZ2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgX25hbWVzcGFjZVtrZXldLm9uQWRkTWVzc2FnZSA9IG9uQWRkTWVzc2FnZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkVXNlck1lc3NhZ2U6IChjb250ZW50OiBzdHJpbmcsIGlkOiBzdHJpbmcsIGhpZGRlbj86IGJvb2xlYW4sIHR5cGU6IE1lc3NhZ2VUeXBlID0gJ3RleHQnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkTWVzc2FnZShrZXksIGNvbnRlbnQsIFJPTEVTLnVzZXIsIGlkLCBoaWRkZW4sIHR5cGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZEFzc2lzdGFudE1lc3NhZ2U6IChjb250ZW50OiBzdHJpbmcsIGlkOiBzdHJpbmcsIHR5cGU6IE1lc3NhZ2VUeXBlID0gJ3RleHQnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkTWVzc2FnZShrZXksIGNvbnRlbnQsIFJPTEVTLmFzc2lzdGFudCwgaWQsIGZhbHNlLCB0eXBlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGVBc3Npc3RhbnRNZXNzYWdlOiAoaWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nLCB0eXBlOiBNZXNzYWdlVHlwZSA9ICd0ZXh0JykgPT4ge1xuICAgICAgICAgICAgICAgIHVwZGF0ZU1lc3NhZ2Uoa2V5LCBpZCwgY29udGVudCwgdHlwZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QXNzaXN0YW50TWVzc2FnZTogKGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWVzc2FnZShrZXksIGlkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRNZXNzYWdlczogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbmFtZXNwYWNlW2tleV0uaGlzdG9yeTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRNZXNzYWdlc0hpc3Rvcnk6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX25hbWVzcGFjZVtrZXldLmhpc3RvcnkubWFwKChtKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICByb2xlOiBtLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG0uY29udGVudCxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufTtcbiIsImltcG9ydCB7Y3JlYXRlRWxlbWVudH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7TWVzc2FnZX0gZnJvbSBcIi4uL2NoYXRIaXN0b3J5XCI7XG5pbXBvcnQge01vZGFsfSBmcm9tIFwiLi9tb2RhbFwiO1xuXG50eXBlIEFjdGlvbkJ1dHRvbkNvbmZpZyA9IHtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGljb246IGtleW9mIHR5cGVvZiBpY29ucztcbiAgICBtZXNzYWdlOiBNZXNzYWdlO1xuICAgIGxvYWRpbmdUZXh0Pzogc3RyaW5nO1xuICAgIGNvbXBsZXRlZFRleHQ/OiBzdHJpbmc7XG4gICAgbW9kYWw6IE1vZGFsO1xuICAgIGNvbXBsZXRlZFRleHREdXJhdGlvbj86IG51bWJlcjtcbiAgICBvbkNsaWNrOiAobXNnOiBNZXNzYWdlLCBtb2RhbDogTW9kYWwpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xufVxuXG5jb25zdCBkZWZhdWx0Q29uZmlnOiBQYXJ0aWFsPEFjdGlvbkJ1dHRvbkNvbmZpZz4gPSB7XG4gICAgbG9hZGluZ1RleHQ6ICdMb2FkaW5nLi4uJyxcbiAgICBjb21wbGV0ZWRUZXh0OiAnQ29tcGxldGVkIScsXG4gICAgY29tcGxldGVkVGV4dER1cmF0aW9uOiAyMDAwLFxufTtcblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIGFjdGlvbkJ1dHRvbjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZWRmMmY3JyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjYmQ1ZTAnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBwYWRkaW5nOiAnM3B4IDhweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBjb2xvcjogJyM0YTU1NjgnXG4gICAgfSxcbiAgICBpY29uOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB3aWR0aDogJzE0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJ1xuICAgIH0sXG59O1xuXG5jb25zdCBpY29ucyA9IHtcbiAgICBjb3B5OiBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9XFwnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXCcgd2lkdGg9XFwnMTZcXCcgaGVpZ2h0PVxcJzE2XFwnIGZpbGw9XFwnJTIzNGE1NTY4XFwnIHZpZXdCb3g9XFwnMCAwIDE2IDE2XFwnJTNFJTNDcGF0aCBkPVxcJ000IDEuNUgzYTIgMiAwIDAgMC0yIDJWMTRhMiAyIDAgMCAwIDIgMmgxMGEyIDIgMCAwIDAgMi0yVjMuNWEyIDIgMCAwIDAtMi0yaC0xdjFoMWExIDEgMCAwIDEgMSAxVjE0YTEgMSAwIDAgMS0xIDFIM2ExIDEgMCAwIDEtMS0xVjMuNWExIDEgMCAwIDEgMS0xaDF2LTF6XFwnLyUzRSUzQ3BhdGggZD1cXCdNOS41IDFhLjUuNSAwIDAgMSAuNS41djFhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV2LTFhLjUuNSAwIDAgMSAuNS0uNWgzem0tMy0xQTEuNSAxLjUgMCAwIDAgNSAxLjV2MUExLjUgMS41IDAgMCAwIDYuNSA0aDNBMS41IDEuNSAwIDAgMCAxMSAyLjV2LTFBMS41IDEuNSAwIDAgMCA5LjUgMGgtM3pcXCcvJTNFJTNDL3N2ZyUzRVwiLFxuICAgIGluc2VydDogXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPVxcJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFwnIHdpZHRoPVxcJzE2XFwnIGhlaWdodD1cXCcxNlxcJyBmaWxsPVxcJyUyMzRhNTU2OFxcJyB2aWV3Qm94PVxcJzAgMCAxNiAxNlxcJyUzRSUzQ3BhdGggZD1cXCdNOCAxNUE3IDcgMCAxIDEgOCAxYTcgNyAwIDAgMSAwIDE0em0wIDFBOCA4IDAgMSAwIDggMGE4IDggMCAwIDAgMCAxNnpcXCcvJTNFJTNDcGF0aCBkPVxcJ004IDRhLjUuNSAwIDAgMSAuNS41djNoM2EuNS41IDAgMCAxIDAgMWgtM3YzYS41LjUgMCAwIDEtMSAwdi0zaC0zYS41LjUgMCAwIDEgMC0xaDN2LTNBLjUuNSAwIDAgMSA4IDR6XFwnLyUzRSUzQy9zdmclM0VcIixcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFjdGlvbkJ1dHRvbiA9IChjb25maWc6IEFjdGlvbkJ1dHRvbkNvbmZpZykgPT4ge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uZGVmYXVsdENvbmZpZyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgIH07XG5cbiAgICBjb25zdCBjb3B5QnRuID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgc3R5bGVzLmFjdGlvbkJ1dHRvbik7XG5cbiAgICBjb25zdCBjb3B5SWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgIC4uLnN0eWxlcy5pY29uLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoXCIke2ljb25zW2NvbmZpZy5pY29uXX1cIilgXG4gICAgfSk7XG4gICAgY29weUJ0bi5hcHBlbmQoY29weUljb24pO1xuXG4gICAgY29weUJ0bi5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29uZmlnLmxhYmVsKSk7XG4gICAgY29weUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxIVE1MID0gY29weUJ0bi5pbm5lckhUTUw7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbmZpZy5vbkNsaWNrKGNvbmZpZy5tZXNzYWdlLCBjb25maWcubW9kYWwpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBjb3B5QnRuLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIlxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTJweDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMnB4O1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogc3BpbiAxcyBsaW5lYXIgaW5maW5pdGU7XG4gICAgICAgICAgICAgICAgXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogM3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogM3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xuICAgICAgICAgICAgICAgICAgICBcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogM3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDNweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogM3B4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gICAgICAgICAgICAgICAgICAgIFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgJHtjb25maWcubG9hZGluZ1RleHR9XG4gICAgICAgICAgICBgO1xuXG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAgICAgICAgICAgICBAa2V5ZnJhbWVzIHNwaW4ge1xuICAgICAgICAgICAgICAgICAgICBmcm9tIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAgICAgICAgICAgICAgICAgICAgdG8geyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG4gICAgICAgICAgICBhd2FpdCByZXN1bHQ7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29weUJ0bi5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDVweDtcIj7inJM8L3NwYW4+XG4gICAgICAgICAgICAgICAgJHtjb25maWcuY29tcGxldGVkVGV4dH1cbiAgICAgICAgICAgIGA7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7XG4gICAgICAgIGNvcHlCdG4uaW5uZXJIVE1MID0gb3JpZ2luYWxIVE1MO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvcHlCdG47XG59XG4iLCJpbXBvcnQge2FwcGx5U3R5bGVzLCBjcmVhdGVFbGVtZW50LCBubFRvQnJ9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge2NyZWF0ZUNvbnRlbnRJZnJhbWV9IGZyb20gXCIuL2lmcmFtZVwiO1xuaW1wb3J0IHtleGVjdXRvcn0gZnJvbSBcIi4uL2V4ZWN1dG9yXCI7XG5pbXBvcnQge2NoYXRIaXN0b3J5LCBNZXNzYWdlLCBVcGRhdGFibGVIVE1MRWxlbWVudH0gZnJvbSBcIi4uL2NoYXRIaXN0b3J5XCI7XG5pbXBvcnQge2NyZWF0ZUFjdGlvbkJ1dHRvbn0gZnJvbSBcIi4vYWN0aW9uQnV0dG9uXCI7XG5cbmV4cG9ydCB0eXBlIE1vZGFsQ29uZmlnID0ge1xuICAgIGtleTogc3RyaW5nO1xuICAgIG5hbWVzcGFjZT86IHN0cmluZztcbiAgICBjb250ZXh0Pzogc3RyaW5nO1xuICAgIGZpZWxkPzogc3RyaW5nO1xuICAgIGN1c3RvbUNTUz86IHN0cmluZ1tdO1xuICAgIHR5cGU/OiAndGV4dCcgfCAnaW1hZ2UnLFxuICAgIHJlc291cmNlPzogbnVtYmVyO1xuICAgIGltYWdlPzoge1xuICAgICAgICBtZWRpYVNvdXJjZT86IG51bWJlcjtcbiAgICB9O1xuICAgIHRleHRBY3Rpb25zPzoge1xuICAgICAgICBjb3B5PzogYm9vbGVhbiB8ICgobXNnOiBNZXNzYWdlLCBtb2RhbDogTW9kYWwpID0+IHZvaWQpO1xuICAgICAgICBpbnNlcnQ/OiAobXNnOiBNZXNzYWdlLCBtb2RhbDogTW9kYWwpID0+IHZvaWQ7XG4gICAgfSxcbiAgICBpbWFnZUFjdGlvbnM/OiB7XG4gICAgICAgIGNvcHk/OiBib29sZWFuIHwgKChtc2c6IE1lc3NhZ2UsIG1vZGFsOiBNb2RhbCkgPT4gdm9pZCk7XG4gICAgICAgIGluc2VydD86IChtc2c6IE1lc3NhZ2UsIG1vZGFsOiBNb2RhbCkgPT4gdm9pZDtcbiAgICB9XG59O1xuXG5leHBvcnQgdHlwZSBNb2RhbCA9IEhUTUxEaXZFbGVtZW50ICYge1xuICAgIG1vZGFsT3ZlcmxheTogSFRNTERpdkVsZW1lbnQ7XG4gICAgY2hhdEhlYWRlcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgY2hhdE1lc3NhZ2VzOiBIVE1MRGl2RWxlbWVudDtcbiAgICBsb2FkaW5nSW5kaWNhdG9yOiBIVE1MRGl2RWxlbWVudDtcblxuICAgIG1lc3NhZ2VJbnB1dDogSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICAgIGNsb3NlQnRuOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBzZW5kQnRuOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB0cnlBZ2FpbkJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgc3RvcEJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgICBpc0RyYWdnaW5nOiBib29sZWFuO1xuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgICBhYm9ydENvbnRyb2xsZXI/OiBBYm9ydENvbnRyb2xsZXI7XG4gICAgb2Zmc2V0WDogbnVtYmVyO1xuICAgIG9mZnNldFk6IG51bWJlcjtcblxuICAgIGFwaToge1xuICAgICAgICBzZW5kTWVzc2FnZTogKHByb3ZpZGVkTWVzc2FnZT86IHN0cmluZywgaGlkZVByb21wdD86IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD47XG4gICAgICAgIGNsb3NlTW9kYWw6ICgpID0+IHZvaWQ7XG4gICAgfVxufTtcblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIHJlc2V0U3R5bGVzOiB7XG4gICAgICAgIG1hcmdpbjogJzAnLFxuICAgICAgICBwYWRkaW5nOiAnMCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBmb250RmFtaWx5OiAnQXJpYWwsIHNhbnMtc2VyaWYnXG4gICAgfSxcbiAgICBtb2RhbE92ZXJsYXk6IHtcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIHRvcDogJzAnLFxuICAgICAgICBsZWZ0OiAnMCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMyknLFxuICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgIHpJbmRleDogJzEwMCdcbiAgICB9LFxuICAgIGNoYXRNb2RhbDoge1xuICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgd2lkdGg6ICcxMDAwcHgnLFxuICAgICAgICBtaW5IZWlnaHQ6ICcxNzBweCcsXG4gICAgICAgIG1heEhlaWdodDogJzYwMHB4JyxcbiAgICAgICAgLy9oZWlnaHQ6ICcxNzBweCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCA1cHggMTVweCByZ2JhKDAsIDAsIDAsIDAuMyknLFxuICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHpJbmRleDogJzEwMScsXG4gICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgICB0cmFuc2l0aW9uOiAnaGVpZ2h0IDAuM3MgZWFzZS1pbi1vdXQnXG4gICAgfSxcbiAgICBjaGF0SGVhZGVyOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMwMEI2REUnLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgcGFkZGluZzogJzE1cHgnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBjdXJzb3I6ICdtb3ZlJ1xuICAgIH0sXG4gICAgY2hhdFRpdGxlOiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgZm9udFNpemU6ICcxNnB4J1xuICAgIH0sXG4gICAgY2hhdENvbnRyb2xzOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZ2FwOiAnMTBweCdcbiAgICB9LFxuICAgIGNvbnRyb2xCdXR0b246IHtcbiAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgIGZvbnRTaXplOiAnMTZweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgfSxcbiAgICBjaGF0TWVzc2FnZXM6IHtcbiAgICAgICAgZmxleDogJzEnLFxuICAgICAgICBwYWRkaW5nOiAnMTVweCcsXG4gICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjlmOWY5JyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgbWVzc2FnZToge1xuICAgICAgICBtYXJnaW5Cb3R0b206ICcyMHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHdvcmRXcmFwOiAnYnJlYWstd29yZCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgfSxcbiAgICBhaU1lc3NhZ2U6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjZTJlOGYwJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC4wNSknXG4gICAgfSxcbiAgICB1c2VyTWVzc2FnZToge1xuICAgICAgICB3aWR0aDogJ2ZpdC1jb250ZW50JyxcbiAgICAgICAgcGFkZGluZzogJzEwcHggMTVweCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM0Mjk5ZTEnLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJzVweCdcbiAgICB9LFxuICAgIG1lc3NhZ2VDb250ZW50OiB7XG4gICAgICAgIHBhZGRpbmc6ICcxMnB4JyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgIH0sXG4gICAgbWVzc2FnZUFjdGlvbnM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nOiAnOHB4IDEycHgnLFxuICAgICAgICBnYXA6ICc4cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjdmYWZjJyxcbiAgICAgICAgYm9yZGVyVG9wOiAnMXB4IHNvbGlkICNlMmU4ZjAnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcwIDAgOHB4IDhweCdcbiAgICB9LFxuICAgIGFjdGlvbkJ1dHRvbjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZWRmMmY3JyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjYmQ1ZTAnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBwYWRkaW5nOiAnM3B4IDhweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBjb2xvcjogJyM0YTU1NjgnXG4gICAgfSxcbiAgICBjaGF0SW5wdXQ6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nOiAnMTVweCcsXG4gICAgICAgIGJvcmRlclRvcDogJzFweCBzb2xpZCAjZTJlOGYwJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG4gICAgaW5wdXRSb3c6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBnYXA6ICcxMHB4J1xuICAgIH0sXG4gICAgaW5wdXRXcmFwcGVyOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1pbkhlaWdodDogJzQ4cHgnLFxuICAgICAgICBtYXhIZWlnaHQ6ICcxNTBweCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH0sXG4gICAgaW5wdXQ6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFkZGluZzogJzEycHggMTVweCcsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjZTJlOGYwJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTBweCcsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICAgIG1pbkhlaWdodDogJzQ4cHgnLFxuICAgICAgICBtYXhIZWlnaHQ6ICcxNTBweCcsXG4gICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgY3Vyc29yOiAnaW5oZXJpdCdcbiAgICB9LFxuICAgIGJ1dHRvbnNDb2x1bW46IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgZ2FwOiAnNHB4JyxcbiAgICAgICAgd2lkdGg6ICcxMDBweCdcbiAgICB9LFxuICAgIHNlbmRCdXR0b246IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzZDQjI0QScsXG4gICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTJweCcsXG4gICAgICAgIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgIGhlaWdodDogJzQwcHgnLFxuICAgICAgICBtaW5XaWR0aDogJzEwMHB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBnYXA6ICc2cHgnLFxuICAgICAgICBvcGFjaXR5OiAnMScsXG4gICAgfSxcbiAgICBhY3Rpb25CdXR0b25zUm93OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZ2FwOiAnNHB4JyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG4gICAgaWNvbkJ1dHRvbjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjZTJlOGYwJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICAgICAgd2lkdGg6ICc0OHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMzJweCcsXG4gICAgICAgIHBhZGRpbmc6ICcwJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ2JhY2tncm91bmQtY29sb3IgMC4ycycsXG4gICAgICAgIG9wYWNpdHk6ICcxJyxcbiAgICB9LFxuICAgIHNlbmRJY29uOiB7XG4gICAgICAgIHdpZHRoOiAnMTZweCcsXG4gICAgICAgIGhlaWdodDogJzE2cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPVxcJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFwnIHZpZXdCb3g9XFwnMCAwIDI0IDI0XFwnIGZpbGw9XFwnd2hpdGVcXCclM0UlM0NwYXRoIGQ9XFwnTTIuMDEgMjFMMjMgMTIgMi4wMSAzIDIgMTBsMTUgMi0xNSAyelxcJy8lM0UlM0Mvc3ZnJTNFXCIpJyxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJyxcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcidcbiAgICB9LFxuICAgIHN0b3BJY29uOiB7XG4gICAgICAgIHdpZHRoOiAnMTZweCcsXG4gICAgICAgIGhlaWdodDogJzE2cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPVxcJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFwnIHZpZXdCb3g9XFwnMCAwIDI0IDI0XFwnIGZpbGw9XFwnJTIzREMyNjI2XFwnJTNFJTNDcGF0aCBkPVxcJ00wIDBoMjR2MjRIMHpcXCcgZmlsbD1cXCdub25lXFwnLyUzRSUzQ3BhdGggZD1cXCdNNiA2aDEydjEySDZ6XFwnLyUzRSUzQy9zdmclM0VcIiknLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgcmVmcmVzaEljb246IHtcbiAgICAgICAgd2lkdGg6ICcxNnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTZweCcsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9XFwnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXCcgdmlld0JveD1cXCcwIDAgMjQgMjRcXCcgZmlsbD1cXCclMjM0QjU1NjNcXCclM0UlM0NwYXRoIGQ9XFwnTTAgMGgyNHYyNEgwelxcJyBmaWxsPVxcJ25vbmVcXCcvJTNFJTNDcGF0aCBkPVxcJ00xNy42NSA2LjM1QTcuOTU4IDcuOTU4IDAgMCAwIDEyIDRjLTQuNDIgMC03Ljk5IDMuNTgtNy45OSA4czMuNTcgOCA3Ljk5IDhjMy43MyAwIDYuODQtMi41NSA3LjczLTZoLTIuMDhBNS45OSA1Ljk5IDAgMCAxIDEyIDE4Yy0zLjMxIDAtNi0yLjY5LTYtNnMyLjY5LTYgNi02YzEuNjYgMCAzLjE0LjY5IDQuMjIgMS43OEwxMyAxMWg3VjRsLTIuMzUgMi4zNXpcXCcvJTNFJTNDL3N2ZyUzRVwiKScsXG4gICAgICAgIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInXG4gICAgfSxcbiAgICBpY29uOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB3aWR0aDogJzE0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgZGlzYWJsZWRCdXR0b246IHtcbiAgICAgICAgb3BhY2l0eTogJzAuNScsXG4gICAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJ1xuICAgIH0sXG4gICAgbG9hZGluZ0lucHV0OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmM2Y0ZjYnLFxuICAgICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCdcbiAgICB9LFxuICAgIGxvYWRpbmdJbmRpY2F0b3I6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMCcsXG4gICAgICAgIGxlZnQ6ICcwJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjQzLCAyNDQsIDI0NiwgMC45KScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzEwcHgnLFxuICAgICAgICBjb2xvcjogJyM2QjcyODAnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBnYXA6ICc0cHgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgekluZGV4OiAnMTAnLFxuICAgICAgICBiYWNrZHJvcEZpbHRlcjogJ2JsdXIoMnB4KScsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjZTJlOGYwJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfSxcbiAgICBsb2FkaW5nRG90OiB7XG4gICAgICAgIHdpZHRoOiAnNnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnNnB4JyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzlDQTNBRicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIGFuaW1hdGlvbjogJ2xvYWRpbmdEb3RQdWxzZSAxLjRzIGluZmluaXRlJyxcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgICB9LFxuICAgIGVycm9yTWVzc2FnZToge1xuICAgICAgICB3aWR0aDogJ2ZpdC1jb250ZW50JyxcbiAgICAgICAgcGFkZGluZzogJzEwcHggMTVweCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNEQzI2MjYnLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJzVweCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGdhcDogJzhweCdcbiAgICB9LFxuICAgIGVycm9ySWNvbjoge1xuICAgICAgICB3aWR0aDogJzE2cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiAndXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz1cXCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcJyB2aWV3Qm94PVxcJzAgMCAyNCAyNFxcJyBmaWxsPVxcJ3doaXRlXFwnJTNFJTNDcGF0aCBkPVxcJ00xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0xIDE1aC0ydi0yaDJ2MnptMC00aC0yVjdoMnY2elxcJy8lM0UlM0Mvc3ZnJTNFXCIpJyxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJyxcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcidcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vZGFsID0gKGNvbmZpZzogTW9kYWxDb25maWcpID0+IHtcbiAgICBpZiAoIWNvbmZpZy5rZXkpIHtcbiAgICAgICAgYWxlcnQoJ2tleSBpcyByZXF1aXJlZCBjb25maWcgcHJvcGVydHknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghY29uZmlnLnR5cGUpIHtcbiAgICAgICAgY29uZmlnLnR5cGUgPSAndGV4dCc7XG4gICAgfVxuXG4gICAgY29uc3QgYnVpbGRNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgLy8gQ3JlYXRlIG92ZXJsYXlcbiAgICAgICAgY29uc3QgbW9kYWxPdmVybGF5ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3R5bGVzLm1vZGFsT3ZlcmxheSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIG1vZGFsXG4gICAgICAgIGNvbnN0IGNoYXRNb2RhbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN0eWxlcy5jaGF0TW9kYWwpIGFzIE1vZGFsO1xuXG4gICAgICAgIC8vIENyZWF0ZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY2hhdEhlYWRlciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN0eWxlcy5jaGF0SGVhZGVyKTtcbiAgICAgICAgY29uc3QgY2hhdFRpdGxlID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3R5bGVzLmNoYXRUaXRsZSwgJ21vZEFJIEFzc2lzdGFudCcpO1xuICAgICAgICBjb25zdCBjaGF0Q29udHJvbHMgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzdHlsZXMuY2hhdENvbnRyb2xzKTtcblxuICAgICAgICBjb25zdCBjbG9zZUJ0biA9IGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHN0eWxlcy5jb250cm9sQnV0dG9uLCAn4pyVJyk7XG4gICAgICAgIGNoYXRDb250cm9scy5hcHBlbmQoY2xvc2VCdG4pO1xuICAgICAgICBjaGF0SGVhZGVyLmFwcGVuZChjaGF0VGl0bGUsIGNoYXRDb250cm9scyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIG1lc3NhZ2VzIGNvbnRhaW5lclxuICAgICAgICBjb25zdCBjaGF0TWVzc2FnZXMgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzdHlsZXMuY2hhdE1lc3NhZ2VzKTtcblxuICAgICAgICAvLyBDcmVhdGUgaW5wdXQgYXJlYVxuICAgICAgICBjb25zdCBjaGF0SW5wdXRBcmVhID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3R5bGVzLmNoYXRJbnB1dCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGlucHV0IHJvdyBmaXJzdFxuICAgICAgICBjb25zdCBpbnB1dFJvdyA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN0eWxlcy5pbnB1dFJvdyk7XG4gICAgICAgIGNvbnN0IGlucHV0V3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN0eWxlcy5pbnB1dFdyYXBwZXIpO1xuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VJbnB1dCA9IGNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJywgc3R5bGVzLmlucHV0KTtcbiAgICAgICAgbWVzc2FnZUlucHV0LnBsYWNlaG9sZGVyID0gJ1R5cGUgeW91ciBtZXNzYWdlLi4uJztcblxuICAgICAgICAvLyBDcmVhdGUgYnV0dG9ucyBjb2x1bW5cbiAgICAgICAgY29uc3QgYnV0dG9uc0NvbHVtbiA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN0eWxlcy5idXR0b25zQ29sdW1uKTtcblxuICAgICAgICAvLyBDcmVhdGUgc2VuZCBidXR0b24gd2l0aCBpY29uIGFuZCB0ZXh0XG4gICAgICAgIGNvbnN0IHNlbmRCdG4gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCBzdHlsZXMuc2VuZEJ1dHRvbik7XG4gICAgICAgIGNvbnN0IHNlbmRJY29uID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHN0eWxlcy5zZW5kSWNvbik7XG4gICAgICAgIGNvbnN0IHNlbmRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1NlbmQnKTtcbiAgICAgICAgc2VuZEJ0bi5hcHBlbmQoc2VuZEljb24sIHNlbmRUZXh0KTtcblxuICAgICAgICAvLyBDcmVhdGUgYWN0aW9uIGJ1dHRvbnMgcm93XG4gICAgICAgIGNvbnN0IGFjdGlvbkJ1dHRvbnNSb3cgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzdHlsZXMuYWN0aW9uQnV0dG9uc1Jvdyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIFN0b3AgYnV0dG9uIHdpdGggaWNvblxuICAgICAgICBjb25zdCBzdG9wQnRuID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgey4uLnN0eWxlcy5pY29uQnV0dG9uLCAuLi5zdHlsZXMuZGlzYWJsZWRCdXR0b259KTtcbiAgICAgICAgY29uc3Qgc3RvcEljb24gPSBjcmVhdGVFbGVtZW50KCdzcGFuJywgc3R5bGVzLnN0b3BJY29uKTtcbiAgICAgICAgc3RvcEJ0bi5hcHBlbmRDaGlsZChzdG9wSWNvbik7XG4gICAgICAgIHN0b3BCdG4udGl0bGUgPSAnU3RvcCBHZW5lcmF0aW9uJztcblxuICAgICAgICAvLyBDcmVhdGUgVHJ5IEFnYWluIGJ1dHRvbiB3aXRoIGljb25cbiAgICAgICAgY29uc3QgdHJ5QWdhaW5CdG4gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCBzdHlsZXMuaWNvbkJ1dHRvbik7XG4gICAgICAgIGNvbnN0IHJlZnJlc2hJY29uID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHN0eWxlcy5yZWZyZXNoSWNvbik7XG4gICAgICAgIHRyeUFnYWluQnRuLmFwcGVuZENoaWxkKHJlZnJlc2hJY29uKTtcbiAgICAgICAgdHJ5QWdhaW5CdG4udGl0bGUgPSAnVHJ5IEFnYWluJztcblxuICAgICAgICBpZiAoaGlzdG9yeS5nZXRNZXNzYWdlcygpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdHJ5QWdhaW5CdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgYXBwbHlTdHlsZXModHJ5QWdhaW5CdG4sIHsuLi5zdHlsZXMuaWNvbkJ1dHRvbiwgLi4uc3R5bGVzLmRpc2FibGVkQnV0dG9ufSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBc3NlbWJsZSBhY3Rpb24gYnV0dG9ucyByb3dcbiAgICAgICAgYWN0aW9uQnV0dG9uc1Jvdy5hcHBlbmQoc3RvcEJ0biwgdHJ5QWdhaW5CdG4pO1xuXG4gICAgICAgIC8vIEFzc2VtYmxlIGJ1dHRvbnMgY29sdW1uXG4gICAgICAgIGJ1dHRvbnNDb2x1bW4uYXBwZW5kKHNlbmRCdG4sIGFjdGlvbkJ1dHRvbnNSb3cpO1xuXG4gICAgICAgIGlucHV0V3JhcHBlci5hcHBlbmQobWVzc2FnZUlucHV0KTtcbiAgICAgICAgLy8gQXNzZW1ibGUgaW5wdXQgcm93XG4gICAgICAgIGlucHV0Um93LmFwcGVuZChpbnB1dFdyYXBwZXIsIGJ1dHRvbnNDb2x1bW4pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBsb2FkaW5nIGluZGljYXRvclxuICAgICAgICBjb25zdCBsb2FkaW5nSW5kaWNhdG9yID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3R5bGVzLmxvYWRpbmdJbmRpY2F0b3IpO1xuICAgICAgICBsb2FkaW5nSW5kaWNhdG9yLmlubmVySFRNTCA9IGBcbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgQGtleWZyYW1lcyBsb2FkaW5nRG90UHVsc2Uge1xuICAgICAgICAgICAgICAgIDAlLCA4MCUsIDEwMCUgeyB0cmFuc2Zvcm06IHNjYWxlKDAuNik7IG9wYWNpdHk6IDAuMzsgfVxuICAgICAgICAgICAgICAgIDQwJSB7IHRyYW5zZm9ybTogc2NhbGUoMSk7IG9wYWNpdHk6IDE7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5sb2FkaW5nLWRvdHMge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZ2FwOiA0cHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDE2cHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubG9hZGluZy1kb3Qge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA4cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzZCNzI4MDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZGluZ0RvdFB1bHNlIDEuNHMgaW5maW5pdGUgZWFzZS1pbi1vdXQgYm90aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5sb2FkaW5nLWRvdDpudGgtY2hpbGQoMSkgeyBhbmltYXRpb24tZGVsYXk6IC0wLjMyczsgfVxuICAgICAgICAgICAgLmxvYWRpbmctZG90Om50aC1jaGlsZCgyKSB7IGFuaW1hdGlvbi1kZWxheTogLTAuMTZzOyB9XG4gICAgICAgICAgICAubG9hZGluZy1kb3Q6bnRoLWNoaWxkKDMpIHsgYW5pbWF0aW9uLWRlbGF5OiAwczsgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZy1kb3RzXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZy1kb3RcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nLWRvdFwiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctZG90XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIGA7XG5cbiAgICAgICAgaW5wdXRXcmFwcGVyLmFwcGVuZChsb2FkaW5nSW5kaWNhdG9yKTtcblxuICAgICAgICAvLyBBZGQgbG9hZGluZyBpbmRpY2F0b3IgYW5kIGlucHV0IHJvdyB0byBjaGF0IGlucHV0IGFyZWFcbiAgICAgICAgY2hhdElucHV0QXJlYS5hcHBlbmQoaW5wdXRSb3cpO1xuXG4gICAgICAgIC8vIEFzc2VtYmxlIG1vZGFsXG4gICAgICAgIGNoYXRNb2RhbC5hcHBlbmQoY2hhdEhlYWRlciwgY2hhdE1lc3NhZ2VzLCBjaGF0SW5wdXRBcmVhKTtcblxuICAgICAgICAvLyBBcHBlbmQgdG8gYm9keVxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChtb2RhbE92ZXJsYXksIGNoYXRNb2RhbCk7XG5cbiAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlTW9kYWwpO1xuICAgICAgICBzZW5kQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2VuZE1lc3NhZ2UoKSk7XG4gICAgICAgIHN0b3BCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdG9wR2VuZXJhdGlvbik7XG4gICAgICAgIHRyeUFnYWluQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdHJ5QWdhaW4pO1xuICAgICAgICBtZXNzYWdlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdyB0aGUgZGVmYXVsdCBiZWhhdmlvciBmb3IgU2hpZnQrRW50ZXIgKG5ldyBsaW5lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgRW50ZXIgYmVoYXZpb3IgYW5kIHNlbmQgbWVzc2FnZVxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB2b2lkIHNlbmRNZXNzYWdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIERyYWcgZnVuY3Rpb25hbGl0eVxuICAgICAgICBjaGF0SGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGluaXREcmFnKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZHJhZyk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBlbmREcmFnKTtcblxuICAgICAgICBjaGF0TW9kYWwubW9kYWxPdmVybGF5ID0gbW9kYWxPdmVybGF5O1xuICAgICAgICBjaGF0TW9kYWwuY2hhdEhlYWRlciA9IGNoYXRIZWFkZXI7XG4gICAgICAgIGNoYXRNb2RhbC5jbG9zZUJ0biA9IGNsb3NlQnRuO1xuICAgICAgICBjaGF0TW9kYWwuY2hhdE1lc3NhZ2VzID0gY2hhdE1lc3NhZ2VzO1xuICAgICAgICBjaGF0TW9kYWwubWVzc2FnZUlucHV0ID0gbWVzc2FnZUlucHV0O1xuICAgICAgICBjaGF0TW9kYWwuc2VuZEJ0biA9IHNlbmRCdG47XG4gICAgICAgIGNoYXRNb2RhbC50cnlBZ2FpbkJ0biA9IHRyeUFnYWluQnRuO1xuICAgICAgICBjaGF0TW9kYWwuc3RvcEJ0biA9IHN0b3BCdG47XG4gICAgICAgIGNoYXRNb2RhbC5sb2FkaW5nSW5kaWNhdG9yID0gbG9hZGluZ0luZGljYXRvcjtcblxuICAgICAgICBjaGF0TW9kYWwuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBjaGF0TW9kYWwuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIGNoYXRNb2RhbC5hYm9ydENvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNoYXRNb2RhbC5vZmZzZXRYID0gMDtcbiAgICAgICAgY2hhdE1vZGFsLm9mZnNldFkgPSAwO1xuXG4gICAgICAgIHJldHVybiBjaGF0TW9kYWw7XG4gICAgfVxuXG4gICAgY29uc3Qgb3Blbk1vZGFsID0gKCkgPT4ge1xuICAgICAgICBtb2RhbC5jaGF0TWVzc2FnZXMuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIG1vZGFsLmNoYXRNZXNzYWdlcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIG1vZGFsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgbW9kYWwubW9kYWxPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gaGlzdG9yeS5nZXRNZXNzYWdlcygpLmZpbHRlcigobSkgPT4gIW0uaGlkZGVuKTtcbiAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG1vZGFsLmNoYXRNZXNzYWdlcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2goKG1zZykgPT4ge1xuICAgICAgICAgICAgICAgIHJlbmRlck1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBtb2RhbC5jaGF0TWVzc2FnZXMuc2Nyb2xsVG9wID0gbW9kYWwuY2hhdE1lc3NhZ2VzLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgIG1vZGFsLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgcmV0dXJuIG1vZGFsO1xuICAgIH1cblxuICAgIGNvbnN0IGNsb3NlTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZHJhZyk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBlbmREcmFnKTtcblxuICAgICAgICBpZiAobW9kYWwubW9kYWxPdmVybGF5KSB7XG4gICAgICAgICAgICBtb2RhbC5tb2RhbE92ZXJsYXkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICAgIG1vZGFsLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW5pdERyYWcgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBtb2RhbC5pc0RyYWdnaW5nID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCByZWN0ID0gbW9kYWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgbW9kYWwub2Zmc2V0WCA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgICAgbW9kYWwub2Zmc2V0WSA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudXNlclNlbGVjdCA9ICdub25lJztcbiAgICB9XG5cbiAgICBjb25zdCBkcmFnID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFtb2RhbC5pc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbmV3WCA9IGUuY2xpZW50WCAtIG1vZGFsLm9mZnNldFg7XG4gICAgICAgIGNvbnN0IG5ld1kgPSBlLmNsaWVudFkgLSBtb2RhbC5vZmZzZXRZO1xuXG4gICAgICAgIG1vZGFsLnN0eWxlLmxlZnQgPSBuZXdYICsgJ3B4JztcbiAgICAgICAgbW9kYWwuc3R5bGUudG9wID0gbmV3WSArICdweCc7XG5cbiAgICAgICAgbW9kYWwuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgIH1cblxuICAgIGNvbnN0IGVuZERyYWcgPSAoKSA9PiB7XG4gICAgICAgIG1vZGFsLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS51c2VyU2VsZWN0ID0gJyc7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcEdlbmVyYXRpb24gPSAoKSA9PiB7XG4gICAgICAgIGlmICghbW9kYWwuaXNMb2FkaW5nIHx8ICFtb2RhbC5hYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGFsLmFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICBtb2RhbC5hYm9ydENvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHNldExvYWRpbmdTdGF0ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdHJ5QWdhaW4gPSAoKSA9PiB7XG4gICAgICAgIGlmIChoaXN0b3J5LmdldE1lc3NhZ2VzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgdm9pZCBzZW5kTWVzc2FnZSgnVHJ5IGFnYWluJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLnR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhdGVzdFVzZXJNc2cgPSBoaXN0b3J5LmdldE1lc3NhZ2VzKCkucmV2ZXJzZSgpLmZpbmQoKG1zZykgPT4gbXNnLnJvbGUgPT09ICd1c2VyJyk7XG4gICAgICAgICAgICBpZiAobGF0ZXN0VXNlck1zZykge1xuICAgICAgICAgICAgICAgIHZvaWQgc2VuZE1lc3NhZ2UobGF0ZXN0VXNlck1zZy5jb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWRkVXNlck1lc3NhZ2UgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChtb2RhbC5jaGF0TWVzc2FnZXMuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBtb2RhbC5jaGF0TWVzc2FnZXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlRGl2OiBVcGRhdGFibGVIVE1MRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgIC4uLnN0eWxlcy5tZXNzYWdlLFxuICAgICAgICAgICAgLi4uc3R5bGVzLnVzZXJNZXNzYWdlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lc3NhZ2VEaXYuaW5uZXJIVE1MID0gbmxUb0JyKGNvbnRlbnQpO1xuXG4gICAgICAgIG1lc3NhZ2VEaXYudXBkYXRlID0gKG1zZykgPT4ge1xuICAgICAgICAgICAgbWVzc2FnZURpdi5pbm5lckhUTUwgPSBubFRvQnIobXNnLmNvbnRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kYWwuY2hhdE1lc3NhZ2VzLmFwcGVuZENoaWxkKG1lc3NhZ2VEaXYpO1xuICAgICAgICBtb2RhbC5jaGF0TWVzc2FnZXMuc2Nyb2xsVG9wID0gbW9kYWwuY2hhdE1lc3NhZ2VzLnNjcm9sbEhlaWdodDtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZURpdjtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRFcnJvck1lc3NhZ2UgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChtb2RhbC5jaGF0TWVzc2FnZXMuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBtb2RhbC5jaGF0TWVzc2FnZXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlRGl2ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAgLi4uc3R5bGVzLm1lc3NhZ2UsXG4gICAgICAgICAgICAuLi5zdHlsZXMuZXJyb3JNZXNzYWdlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGVycm9ySWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBzdHlsZXMuZXJyb3JJY29uKTtcbiAgICAgICAgbWVzc2FnZURpdi5hcHBlbmRDaGlsZChlcnJvckljb24pO1xuXG4gICAgICAgIGNvbnN0IHRleHRTcGFuID0gY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB0ZXh0U3Bhbi50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIG1lc3NhZ2VEaXYuYXBwZW5kQ2hpbGQodGV4dFNwYW4pO1xuXG4gICAgICAgIG1vZGFsLmNoYXRNZXNzYWdlcy5hcHBlbmRDaGlsZChtZXNzYWdlRGl2KTtcbiAgICAgICAgbW9kYWwuY2hhdE1lc3NhZ2VzLnNjcm9sbFRvcCA9IG1vZGFsLmNoYXRNZXNzYWdlcy5zY3JvbGxIZWlnaHQ7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VEaXY7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkQXNzaXN0YW50TWVzc2FnZSA9IChjb250ZW50OiBzdHJpbmcsIHByb3ZpZGVkSWQ/OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKG1vZGFsLmNoYXRNZXNzYWdlcy5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgIG1vZGFsLmNoYXRNZXNzYWdlcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VEaXY6IFVwZGF0YWJsZUhUTUxFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAgLi4uc3R5bGVzLm1lc3NhZ2UsXG4gICAgICAgICAgICAuLi5zdHlsZXMuYWlNZXNzYWdlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VJZCA9IHByb3ZpZGVkSWQgfHwgJ21zZy0nICsgRGF0ZS5ub3coKTtcblxuICAgICAgICBjb25zdCBjb250ZW50RGl2ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3R5bGVzLm1lc3NhZ2VDb250ZW50KTtcblxuICAgICAgICBjb25zdCBpZnJhbWUgPSBjcmVhdGVDb250ZW50SWZyYW1lKGNvbnRlbnQsIG1vZGFsLCBjb25maWcuY3VzdG9tQ1NTID8/IFtdKTtcblxuICAgICAgICBjb250ZW50RGl2LmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cbiAgICAgICAgY29uc3QgYWN0aW9uc0RpdiA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN0eWxlcy5tZXNzYWdlQWN0aW9ucyk7XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGhpc3RvcnkuZ2V0QXNzaXN0YW50TWVzc2FnZShtZXNzYWdlSWQpO1xuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRleHRBY3Rpb25zPy5jb3B5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zRGl2LmFwcGVuZChjcmVhdGVBY3Rpb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2NvcHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDb3B5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZFRleHQ6ICdDb3BpZWQhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHR5cGVvZiBjb25maWcudGV4dEFjdGlvbnM/LmNvcHkgPT09ICdmdW5jdGlvbicgPyBjb25maWcudGV4dEFjdGlvbnMuY29weSA6IGNvcHlUb0NsaXBib2FyZFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcudGV4dEFjdGlvbnM/Lmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zRGl2LmFwcGVuZChjcmVhdGVBY3Rpb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2luc2VydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0luc2VydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRUZXh0OiAnSW5zZXJ0ZWQhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGNvbmZpZy50ZXh0QWN0aW9ucy5pbnNlcnRcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZy50eXBlID09PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5pbWFnZUFjdGlvbnM/LmNvcHkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnNEaXYuYXBwZW5kKGNyZWF0ZUFjdGlvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnY29weScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvcHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZ1RleHQ6ICdEb3dubG9hZGluZy4uLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRUZXh0OiAnQ29waWVkIScsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBhc3luYyAobXNnLCBtb2RhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0eXBlb2YgY29uZmlnLnRleHRBY3Rpb25zPy5jb3B5ID09PSAnZnVuY3Rpb24nID8gY29uZmlnLnRleHRBY3Rpb25zLmNvcHkgOiBjb3B5VG9DbGlwYm9hcmQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLmN0eC5kb3dubG9hZGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIobXNnLCBtb2RhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGV4ZWN1dG9yLm1nci5kb3dubG9hZC5pbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbXNnLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBjb25maWcuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogY29uZmlnLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IGNvbmZpZy5yZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFTb3VyY2U6IGNvbmZpZy5pbWFnZT8ubWVkaWFTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuY29udGVudCA9IGRhdGEuZnVsbFVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuY3R4LmRvd25sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5jdHgudXJsID0gZGF0YS51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmN0eC5mdWxsVXJsID0gZGF0YS5mdWxsVXJsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihtc2csIG1vZGFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGluc2VydENiID0gY29uZmlnLmltYWdlQWN0aW9ucz8uaW5zZXJ0O1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5zZXJ0Q2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uc0Rpdi5hcHBlbmQoY3JlYXRlQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdpbnNlcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdJbnNlcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkVGV4dDogJ0luc2VydGVkIScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nVGV4dDogJ0Rvd25sb2FkaW5nLi4uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGFzeW5jIChtc2csIG1vZGFsKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLmN0eC5kb3dubG9hZGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydENiKG1zZywgbW9kYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBleGVjdXRvci5tZ3IuZG93bmxvYWQuaW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG1zZy5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogY29uZmlnLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IGNvbmZpZy5uYW1lc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlOiBjb25maWcucmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhU291cmNlOiBjb25maWcuaW1hZ2U/Lm1lZGlhU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmNvbnRlbnQgPSBkYXRhLmZ1bGxVcmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmN0eC5kb3dubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuY3R4LnVybCA9IGRhdGEudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5jdHguZnVsbFVybCA9IGRhdGEuZnVsbFVybDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydENiKG1zZywgbW9kYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZURpdi5hcHBlbmQoY29udGVudERpdiwgYWN0aW9uc0Rpdik7XG5cbiAgICAgICAgbW9kYWwuY2hhdE1lc3NhZ2VzLmFwcGVuZENoaWxkKG1lc3NhZ2VEaXYpO1xuICAgICAgICBtb2RhbC5jaGF0TWVzc2FnZXMuc2Nyb2xsVG9wID0gbW9kYWwuY2hhdE1lc3NhZ2VzLnNjcm9sbEhlaWdodDtcblxuICAgICAgICBtZXNzYWdlRGl2LnVwZGF0ZSA9IChtc2cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgICAgIGlmICghaWZyYW1lRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXNnLnR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWVEb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IGA8aW1nIHNyYz1cIiR7bXNnLmNvbnRlbnR9XCIgLz5gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZnJhbWVEb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IG5sVG9Ccihtc2cuY29udGVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmcmFtZS5zeW5jSGVpZ2h0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVzc2FnZURpdjtcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJNZXNzYWdlID0gKG1zZzogTWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAobXNnLmhpZGRlbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1zZy5yb2xlID09PSAndXNlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGRVc2VyTWVzc2FnZShtc2cuY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobXNnLnR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGRBc3Npc3RhbnRNZXNzYWdlKGA8aW1nIHNyYz1cIiR7bXNnLmNvbnRlbnR9XCIgLz5gLCBtc2cuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFkZEFzc2lzdGFudE1lc3NhZ2UobXNnLmNvbnRlbnQsIG1zZy5pZCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29weVRvQ2xpcGJvYXJkID0gYXN5bmMgKG1lc3NhZ2U6IE1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKG5hdmlnYXRvci5jbGlwYm9hcmQgJiYgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQobWVzc2FnZS5jb250ZW50KTtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yTWVzc2FnZShfKCdtb2RhaS5jbXAuZmFpbGVkX2NvcHknKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhID0gY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYS52YWx1ZSA9IG1lc3NhZ2UuY29udGVudDtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRhcmVhKTtcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYS5zZWxlY3QoKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRleHRhcmVhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yTWVzc2FnZShfKCdtb2RhaS5jbXAuZmFpbGVkX2NvcHknKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRMb2FkaW5nU3RhdGUgPSAobG9hZGluZzogYm9vbGVhbikgPT4ge1xuICAgICAgICBtb2RhbC5pc0xvYWRpbmcgPSBsb2FkaW5nO1xuXG4gICAgICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgICAgICBtb2RhbC5sb2FkaW5nSW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2RhbC5sb2FkaW5nSW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbC5tZXNzYWdlSW5wdXQuZGlzYWJsZWQgPSBsb2FkaW5nO1xuICAgICAgICBpZiAobG9hZGluZykge1xuICAgICAgICAgICAgYXBwbHlTdHlsZXMobW9kYWwubWVzc2FnZUlucHV0LCB7Li4uc3R5bGVzLmlucHV0LCAuLi5zdHlsZXMubG9hZGluZ0lucHV0fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlcyhtb2RhbC5tZXNzYWdlSW5wdXQsIHN0eWxlcy5pbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbC5zZW5kQnRuLmRpc2FibGVkID0gbG9hZGluZztcbiAgICAgICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgICAgICAgIGFwcGx5U3R5bGVzKG1vZGFsLnNlbmRCdG4sIHsuLi5zdHlsZXMuc2VuZEJ1dHRvbiwgLi4uc3R5bGVzLmRpc2FibGVkQnV0dG9ufSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlcyhtb2RhbC5zZW5kQnRuLCBzdHlsZXMuc2VuZEJ1dHRvbik7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbC5zdG9wQnRuLmRpc2FibGVkID0gIWxvYWRpbmc7XG4gICAgICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlcyhtb2RhbC5zdG9wQnRuLCBzdHlsZXMuaWNvbkJ1dHRvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlcyhtb2RhbC5zdG9wQnRuLCB7Li4uc3R5bGVzLmljb25CdXR0b24sIC4uLnN0eWxlcy5kaXNhYmxlZEJ1dHRvbn0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzTWVzc2FnZXMgPSBoaXN0b3J5LmdldE1lc3NhZ2VzKCkubGVuZ3RoID4gMDtcbiAgICAgICAgbW9kYWwudHJ5QWdhaW5CdG4uZGlzYWJsZWQgPSBsb2FkaW5nIHx8ICFoYXNNZXNzYWdlcztcbiAgICAgICAgaWYgKGxvYWRpbmcgfHwgIWhhc01lc3NhZ2VzKSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlcyhtb2RhbC50cnlBZ2FpbkJ0biwgey4uLnN0eWxlcy5pY29uQnV0dG9uLCAuLi5zdHlsZXMuZGlzYWJsZWRCdXR0b259KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcGx5U3R5bGVzKG1vZGFsLnRyeUFnYWluQnRuLCBzdHlsZXMuaWNvbkJ1dHRvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZW5kTWVzc2FnZSA9IGFzeW5jIChwcm92aWRlZE1lc3NhZ2U/OiBzdHJpbmcsIGhpZGVQcm9tcHQ/OiBib29sZWFuKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBwcm92aWRlZE1lc3NhZ2UgPyBwcm92aWRlZE1lc3NhZ2UudHJpbSgpIDogbW9kYWwubWVzc2FnZUlucHV0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKCFtZXNzYWdlIHx8IG1vZGFsLmlzTG9hZGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0TG9hZGluZ1N0YXRlKHRydWUpO1xuXG4gICAgICAgIG1vZGFsLm1lc3NhZ2VJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICBtb2RhbC5hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBoaXN0b3J5LmdldE1lc3NhZ2VzSGlzdG9yeSgpO1xuICAgICAgICBjb25zdCBtZXNzYWdlSWQgPSAndXNlci1tc2ctJyArIERhdGUubm93KCkgKyAoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCkpO1xuICAgICAgICBoaXN0b3J5LmFkZFVzZXJNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2VJZCwgaGlkZVByb21wdCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChjb25maWcudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGV4ZWN1dG9yLm1nci5wcm9tcHQuZnJlZVRleHQoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogY29uZmlnLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbmZpZy5jb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0OiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGNvbmZpZy5maWVsZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS51cGRhdGVBc3Npc3RhbnRNZXNzYWdlKGRhdGEuaWQsIGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmFib3J0Q29udHJvbGxlclxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBoaXN0b3J5LnVwZGF0ZUFzc2lzdGFudE1lc3NhZ2UoZGF0YS5pZCwgZGF0YS5jb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZy50eXBlID09PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGV4ZWN1dG9yLm1nci5wcm9tcHQuaW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBwcm9tcHQ6IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9LCBtb2RhbC5hYm9ydENvbnRyb2xsZXIpO1xuXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5hZGRBc3Npc3RhbnRNZXNzYWdlKGRhdGEudXJsLCBkYXRhLmlkLCAnaW1hZ2UnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kYWwuYWJvcnRDb250cm9sbGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFkZEVycm9yTWVzc2FnZShlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRFcnJvck1lc3NhZ2UoJ1Vua25vd24gZXJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldExvYWRpbmdTdGF0ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGlzdG9yeSA9IGNoYXRIaXN0b3J5LmluaXQoXG4gICAgICAgIGAke2NvbmZpZy5rZXl9LyR7Y29uZmlnLnR5cGV9YCxcbiAgICAgICAgKG1zZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlck1lc3NhZ2UobXNnKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBtb2RhbCA9IGJ1aWxkTW9kYWwoKTtcblxuICAgIG1vZGFsLmFwaSA9IHtcbiAgICAgICAgc2VuZE1lc3NhZ2UsXG4gICAgICAgIGNsb3NlTW9kYWwsXG4gICAgfVxuXG4gICAgb3Blbk1vZGFsKCk7XG5cbiAgICByZXR1cm4gbW9kYWw7XG59XG4iLCJ0eXBlIFRleHRhcmVhT3ZlcmxheU9wdGlvbnMgPSB7XG4gICAgaW5kaWNhdG9yVHlwZT86ICdzcGlubmVyJyB8ICdkb3RzJztcbiAgICBvdmVybGF5Q29sb3I/OiBzdHJpbmc7XG4gICAgaW5kaWNhdG9yQ29sb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkaW5nT3ZlcmxheSA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgb3B0aW9uczogVGV4dGFyZWFPdmVybGF5T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBpbmRpY2F0b3JUeXBlOiBvcHRpb25zLmluZGljYXRvclR5cGUgfHwgJ3NwaW5uZXInLFxuICAgICAgICBvdmVybGF5Q29sb3I6IG9wdGlvbnMub3ZlcmxheUNvbG9yIHx8ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgICAgICBpbmRpY2F0b3JDb2xvcjogb3B0aW9ucy5pbmRpY2F0b3JDb2xvciB8fCAnIzM0OThkYidcbiAgICB9O1xuXG4gICAgY29uc3Qgb3ZlcmxheTogSFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBpbmRpY2F0b3I6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBjb25zdCB0ZXh0YXJlYVN0eWxlczogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IHRleHRhcmVhUmVjdDogRE9NUmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBpZiAoIW9wdGlvbnMuaW5kaWNhdG9yQ29sb3IpIHtcbiAgICAgICAgY29uZmlnLmluZGljYXRvclR5cGUgPSB0ZXh0YXJlYVJlY3QuaGVpZ2h0IDw9IDUwID8gJ2RvdHMnIDogJ3NwaW5uZXInO1xuICAgIH1cblxuICAgIG92ZXJsYXkuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIG92ZXJsYXkuc3R5bGUudG9wID0gJzAnO1xuICAgIG92ZXJsYXkuc3R5bGUubGVmdCA9ICcwJztcbiAgICBvdmVybGF5LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIG92ZXJsYXkuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgIG92ZXJsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29uZmlnLm92ZXJsYXlDb2xvcjtcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgb3ZlcmxheS5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xuICAgIG92ZXJsYXkuc3R5bGUuYWxpZ25JdGVtcyA9ICdjZW50ZXInO1xuICAgIG92ZXJsYXkuc3R5bGUuekluZGV4ID0gJzEwMDAwJztcbiAgICBvdmVybGF5LnN0eWxlLmJvcmRlclJhZGl1cyA9IHRleHRhcmVhU3R5bGVzLmJvcmRlclJhZGl1cztcblxuICAgIGxldCBzdHlsZVRleHQgPSAnJztcblxuICAgIGlmIChjb25maWcuaW5kaWNhdG9yVHlwZSA9PT0gJ3NwaW5uZXInKSB7XG4gICAgICAgIC8vIEFwcGx5IHN0eWxlcyB0byB0aGUgc3Bpbm5lclxuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuYm9yZGVyID0gYDRweCBzb2xpZCAjZjNmM2YzYDtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmJvcmRlclRvcCA9IGA0cHggc29saWQgJHtjb25maWcuaW5kaWNhdG9yQ29sb3J9YDtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MCUnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUud2lkdGggPSAnMzBweCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5oZWlnaHQgPSAnMzBweCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5hbmltYXRpb24gPSAndGV4dGFyZWFPdmVybGF5U3BpbiAxcyBsaW5lYXIgaW5maW5pdGUnO1xuXG4gICAgICAgIC8vIEFkZCBzcGlubmVyIGFuaW1hdGlvblxuICAgICAgICBzdHlsZVRleHQgPSBgXG4gICAgICBAa2V5ZnJhbWVzIHRleHRhcmVhT3ZlcmxheVNwaW4ge1xuICAgICAgICAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XG4gICAgICAgIDEwMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XG4gICAgICB9XG4gICAgYDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5pbmRpY2F0b3JUeXBlID09PSAnZG90cycpIHtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuaGVpZ2h0ID0gJzIwcHgnO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRvdC5zdHlsZS53aWR0aCA9ICc4cHgnO1xuICAgICAgICAgICAgZG90LnN0eWxlLmhlaWdodCA9ICc4cHgnO1xuICAgICAgICAgICAgZG90LnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MCUnO1xuICAgICAgICAgICAgZG90LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbmZpZy5pbmRpY2F0b3JDb2xvcjtcbiAgICAgICAgICAgIGRvdC5zdHlsZS5tYXJnaW4gPSAnMCA0cHgnO1xuICAgICAgICAgICAgZG90LnN0eWxlLmFuaW1hdGlvbiA9IGB0ZXh0YXJlYU92ZXJsYXlEb3RQdWxzZSAxLjRzIGluZmluaXRlIGVhc2UtaW4tb3V0YDtcbiAgICAgICAgICAgIGRvdC5zdHlsZS5hbmltYXRpb25EZWxheSA9IGAke2kgKiAwLjJ9c2A7XG4gICAgICAgICAgICBpbmRpY2F0b3IuYXBwZW5kQ2hpbGQoZG90KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlVGV4dCA9IGBcbiAgICAgIEBrZXlmcmFtZXMgdGV4dGFyZWFPdmVybGF5RG90UHVsc2Uge1xuICAgICAgICAwJSwgODAlLCAxMDAlIHsgdHJhbnNmb3JtOiBzY2FsZSgwKTsgb3BhY2l0eTogMC41OyB9XG4gICAgICAgIDQwJSB7IHRyYW5zZm9ybTogc2NhbGUoMSk7IG9wYWNpdHk6IDE7IH1cbiAgICAgIH1cbiAgICBgO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlU2hlZXQ6IEhUTUxTdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlU2hlZXQudGV4dENvbnRlbnQgPSBzdHlsZVRleHQ7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVNoZWV0KTtcblxuICAgIG92ZXJsYXkuYXBwZW5kQ2hpbGQoaW5kaWNhdG9yKTtcblxuICAgIGNvbnN0IHBhcmVudFN0eWxlczogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQucGFyZW50RWxlbWVudCBhcyBFbGVtZW50KTtcbiAgICBsZXQgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XG5cbiAgICBpZiAoWydyZWxhdGl2ZScsICdhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YocGFyZW50U3R5bGVzLnBvc2l0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB3cmFwcGVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgd3JhcHBlci5zdHlsZS53aWR0aCA9IGAke3RleHRhcmVhUmVjdC53aWR0aH1weGA7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gYCR7dGV4dGFyZWFSZWN0LmhlaWdodH1weGA7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIGVsZW1lbnQpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXIgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG5cbiAgICBjb25zdCB1cGRhdGVkUmVjdDogRE9NUmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKHdyYXBwZXIgIT09IGVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICB3cmFwcGVyLnN0eWxlLndpZHRoID0gYCR7dXBkYXRlZFJlY3Qud2lkdGh9cHhgO1xuICAgICAgICB3cmFwcGVyLnN0eWxlLmhlaWdodCA9IGAke3VwZGF0ZWRSZWN0LmhlaWdodH1weGA7XG4gICAgfVxuXG4gICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuXG4gICAgcmV0dXJuICgpOiB2b2lkID0+IHtcbiAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcblxuICAgICAgICBvdmVybGF5LnJlbW92ZSgpO1xuICAgICAgICBzdHlsZVNoZWV0LnJlbW92ZSgpO1xuICAgICAgICBpZiAod3JhcHBlciAhPT0gZWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICB3cmFwcGVyLnBhcmVudE5vZGU/Lmluc2VydEJlZm9yZShlbGVtZW50LCB3cmFwcGVyKTtcbiAgICAgICAgICAgIHdyYXBwZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuIiwiaW1wb3J0IHtjcmVhdGVNb2RhbCwgdHlwZSBNb2RhbENvbmZpZ30gZnJvbSBcIi4vbW9kYWxcIjtcbmltcG9ydCB7IGNyZWF0ZUxvYWRpbmdPdmVybGF5IH0gZnJvbSAnLi9vdmVybGF5J1xuXG5cbmV4cG9ydCBjb25zdCB1aSA9IHtcbiAgICBjcmVhdGVMb2FkaW5nT3ZlcmxheSxcbiAgICBmcmVlUHJvbXB0OiAoY29uZmlnOiBNb2RhbENvbmZpZykgPT4ge1xuICAgICAgICByZXR1cm4gY3JlYXRlTW9kYWwoY29uZmlnKTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHtjcmVhdGVFbGVtZW50LCBubFRvQnJ9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgdHlwZSB7IE1vZGFsIH0gZnJvbSBcIi4vbW9kYWxcIjtcblxuZXhwb3J0IHR5cGUgSWZyYW1lID0gSFRNTElGcmFtZUVsZW1lbnQgJiB7XG4gICAgc3luY0hlaWdodDogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbnRlbnRJZnJhbWUgPSAocHJvdmlkZWRDb250ZW50OiBzdHJpbmcsIG1vZGFsOiBNb2RhbCwgY3VzdG9tQ1NTOiBzdHJpbmdbXSA9IFtdKSA9PiB7XG4gICAgY29uc3QgY29udGVudCA9IG5sVG9Ccihwcm92aWRlZENvbnRlbnQpO1xuXG4gICAgY29uc3QgaWZyYW1lID0gY3JlYXRlRWxlbWVudCgnaWZyYW1lJywge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgfSkgYXMgSWZyYW1lO1xuXG4gICAgaWZyYW1lLnNyY2RvYyA9IGBcbiAgICAgICAgPGh0bWw+XG4gICAgICAgIDxoZWFkPlxuICAgICAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgICAgIGh0bWwge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJvZHkge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAqIHtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmUge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gICAgICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMnB4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY3ZmE7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvZGUge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gICAgICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhYmxlIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xuICAgICAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHAge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMCAwLjVlbSAwO1xuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMCAwLjFlbSAwO1xuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgICAgICR7Y3VzdG9tQ1NTLm1hcCgoY3NzKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCIke2Nzc31cIiAvPmA7XG4gICAgfSkuam9pbignJyl9XG4gICAgICAgIDwvaGVhZD5cbiAgICAgICAgPGJvZHkgc3R5bGU9XCJwYWRkaW5nOiAwOyBtYXgtd2lkdGg6IDEwMCU7IHdpZHRoOiAxMDAlOyBib3gtc2l6aW5nOiBib3JkZXItYm94O1wiPiR7Y29udGVudH08L2JvZHk+XG4gICAgICAgIDwvaHRtbD5cbiAgICBgO1xuXG4gICAgaWZyYW1lLnN5bmNIZWlnaHQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBpZnJhbWUuY29udGVudFdpbmRvdz8uZG9jdW1lbnQuYm9keTtcbiAgICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGJvZHkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTtcbiAgICAgICAgbGV0IG1heEhlaWdodCA9IGJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGVsZW1lbnQub2Zmc2V0VG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBNYXRoLm1heChtYXhIZWlnaHQsIGJvdHRvbSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gKG1heEhlaWdodCArIDUpICsgJ3B4JztcbiAgICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXG4gICAgICAgIG1vZGFsLmNoYXRNZXNzYWdlcy5zY3JvbGxUb3AgPSBtb2RhbC5jaGF0TWVzc2FnZXMuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cblxuICAgIGlmcmFtZS5vbmxvYWQgPSBpZnJhbWUuc3luY0hlaWdodDtcblxuICAgIHJldHVybiBpZnJhbWU7XG59XG4iLCJpbXBvcnQge2V4ZWN1dG9yfSBmcm9tIFwiLi9leGVjdXRvclwiO1xuaW1wb3J0IHtEYXRhT3V0cHV0LCBoaXN0b3J5fSBmcm9tICcuL2hpc3RvcnknO1xuaW1wb3J0IHt1aX0gZnJvbSBcIi4vdWlcIjtcbmltcG9ydCB7Y3JlYXRlTG9hZGluZ092ZXJsYXl9IGZyb20gXCIuL3VpL292ZXJsYXlcIjtcbmltcG9ydCB7TWVzc2FnZX0gZnJvbSBcIi4vY2hhdEhpc3RvcnlcIjtcblxudHlwZSBEYXRhQ29udGV4dCA9IHtlbHM6IHsgZmllbGQ6IGFueSwgd3JhcHBlcjogSGlzdG9yeUVsZW1lbnQgfVtdfTtcbnR5cGUgSGlzdG9yeUJ1dHRvbiA9IEhUTUxCdXR0b25FbGVtZW50ICYge1xuICAgIGVuYWJsZTogKCkgPT4gdm9pZDtcbiAgICBkaXNhYmxlOiAoKSA9PiB2b2lkO1xufTtcbnR5cGUgSGlzdG9yeUluZm8gPSBIVE1MRWxlbWVudCAmIHtcbiAgICB1cGRhdGU6IChzaG93aW5nOiBudW1iZXIsIHRvdGFsOiBudW1iZXIpID0+IHZvaWQ7XG59O1xudHlwZSBIaXN0b3J5TmF2ID0gSFRNTEVsZW1lbnQgJiB7XG4gICAgc2hvdzogKCkgPT4gdm9pZDtcbiAgICBoaWRlOiAoKSA9PiB2b2lkO1xuICAgIHByZXZCdXR0b246IEhpc3RvcnlCdXR0b247XG4gICAgbmV4dEJ1dHRvbjogSGlzdG9yeUJ1dHRvbjtcbiAgICBpbmZvOiBIaXN0b3J5SW5mbztcbn07XG50eXBlIEhpc3RvcnlFbGVtZW50ID0gSFRNTEVsZW1lbnQgJiB7IGhpc3RvcnlOYXY6IEhpc3RvcnlOYXYgfVxuXG5jb25zdCBoaXN0b3J5TmF2U3luYyA9IChkYXRhOiBEYXRhT3V0cHV0PERhdGFDb250ZXh0Piwgbm9TdG9yZT86IGJvb2xlYW4pID0+IHtcbiAgICBkYXRhLmNvbnRleHQuZWxzLmZvckVhY2goKHt3cmFwcGVyLCBmaWVsZH0pID0+IHtcbiAgICAgICAgY29uc3QgcHJldlZhbHVlID0gZmllbGQuZ2V0VmFsdWUoKTtcbiAgICAgICAgZmllbGQuc2V0VmFsdWUoZGF0YS52YWx1ZSk7XG4gICAgICAgIGZpZWxkLmZpcmVFdmVudCgnY2hhbmdlJywgZmllbGQsIGRhdGEudmFsdWUsIHByZXZWYWx1ZSk7XG5cbiAgICAgICAgaWYgKG5vU3RvcmUpIHtcbiAgICAgICAgICAgIGZpZWxkLmVsLmRvbS5zY3JvbGxUb3AgPSBmaWVsZC5lbC5kb20uc2Nyb2xsSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEudG90YWwgPiAwKSB7XG4gICAgICAgICAgICB3cmFwcGVyLmhpc3RvcnlOYXYuc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgd3JhcHBlci5oaXN0b3J5TmF2LmluZm8udXBkYXRlKGRhdGEuY3VycmVudCwgZGF0YS50b3RhbCk7XG5cbiAgICAgICAgaWYgKGRhdGEucHJldlN0YXR1cykge1xuICAgICAgICAgICAgd3JhcHBlci5oaXN0b3J5TmF2LnByZXZCdXR0b24uZW5hYmxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyLmhpc3RvcnlOYXYucHJldkJ1dHRvbi5kaXNhYmxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YS5uZXh0U3RhdHVzKSB7XG4gICAgICAgICAgICB3cmFwcGVyLmhpc3RvcnlOYXYubmV4dEJ1dHRvbi5lbmFibGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIuaGlzdG9yeU5hdi5uZXh0QnV0dG9uLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuY29uc3QgY3JlYXRlV2FuZEVsID0gKCkgPT4ge1xuICAgIGNvbnN0IHdhbmRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHdhbmRFbC5jbGFzc05hbWUgPSAnbW9kYWktZ2VuZXJhdGUnO1xuICAgIHdhbmRFbC5pbm5lclRleHQgPSAn4pymJ1xuICAgIHdhbmRFbC50eXBlID0gJ2J1dHRvbidcbiAgICB3YW5kRWwudGl0bGUgPSAnR2VuZXJhdGUgdXNpbmcgQUknXG5cbiAgICByZXR1cm4gd2FuZEVsO1xufVxuXG5jb25zdCBjcmVhdGVIaXN0b3J5TmF2ID0gKGNhY2hlOiBSZXR1cm5UeXBlPHR5cGVvZiBoaXN0b3J5LmluaXQ8RGF0YUNvbnRleHQ+PikgPT4ge1xuICAgIGNvbnN0IHByZXZCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKSBhcyBIaXN0b3J5QnV0dG9uO1xuICAgIHByZXZCdXR0b24udHlwZSA9ICdidXR0b24nO1xuICAgIHByZXZCdXR0b24udGl0bGUgPSAnUHJldmlvdXMgVmVyc2lvbic7XG4gICAgcHJldkJ1dHRvbi5jbGFzc05hbWUgPSAnbW9kYWktaGlzdG9yeV9wcmV2JztcbiAgICBwcmV2QnV0dG9uLmRpc2FibGUgPSAoKSA9PiB7XG4gICAgICAgIHByZXZCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBwcmV2QnV0dG9uLmVuYWJsZSA9ICgpID0+IHtcbiAgICAgICAgcHJldkJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBwcmV2QnV0dG9uLmlubmVySFRNTCA9ICdwcmV2JztcbiAgICBwcmV2QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjYWNoZS5wcmV2KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBuZXh0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJykgYXMgSGlzdG9yeUJ1dHRvbjtcbiAgICBuZXh0QnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcbiAgICBuZXh0QnV0dG9uLnRpdGxlID0gJ05leHQgVmVyc2lvbic7XG4gICAgbmV4dEJ1dHRvbi5jbGFzc05hbWUgPSAnbW9kYWktaGlzdG9yeV9uZXh0JztcbiAgICBuZXh0QnV0dG9uLmRpc2FibGUgPSAoKSA9PiB7XG4gICAgICAgIG5leHRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBuZXh0QnV0dG9uLmVuYWJsZSA9ICgpID0+IHtcbiAgICAgICAgbmV4dEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBuZXh0QnV0dG9uLmlubmVySFRNTCA9ICduZXh0JztcbiAgICBuZXh0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjYWNoZS5uZXh0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpIGFzIEhpc3RvcnlJbmZvO1xuICAgIGluZm8udXBkYXRlID0gKHNob3dpbmcsIHRvdGFsKSA9PiB7XG4gICAgICAgIGluZm8uaW5uZXJUZXh0ID0gYCR7c2hvd2luZ30vJHt0b3RhbH1gO1xuICAgIH1cbiAgICBpbmZvLmlubmVyVGV4dCA9ICcnO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSBhcyBIaXN0b3J5TmF2O1xuICAgIHdyYXBwZXIuc2hvdyA9ICgpID0+IHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ2luaXRpYWwnO1xuICAgIH1cblxuICAgIHdyYXBwZXIuaGlkZSA9ICgpID0+IHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHdyYXBwZXIucHJldkJ1dHRvbiA9IHByZXZCdXR0b247XG4gICAgd3JhcHBlci5uZXh0QnV0dG9uID0gbmV4dEJ1dHRvbjtcbiAgICB3cmFwcGVyLmluZm8gPSBpbmZvO1xuXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChwcmV2QnV0dG9uKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG5leHRCdXR0b24pO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5mbyk7XG5cbiAgICB3cmFwcGVyLmhpZGUoKTtcbiAgICBwcmV2QnV0dG9uLmRpc2FibGUoKTtcbiAgICBuZXh0QnV0dG9uLmRpc2FibGUoKTtcblxuICAgIHJldHVybiB3cmFwcGVyO1xufVxuXG5jb25zdCBjcmVhdGVGcmVlVGV4dFByb21wdCA9IChmaWVsZE5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHdhbmRFbCA9IGNyZWF0ZVdhbmRFbCgpO1xuICAgIHdhbmRFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdWkuZnJlZVByb21wdCh7XG4gICAgICAgICAgICBrZXk6IGZpZWxkTmFtZSxcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZXNvdXJjZTogTU9EeC5yZXF1ZXN0LmlkLFxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB3YW5kRWw7XG59XG5cbmNvbnN0IGNyZWF0ZUZvcmNlZFRleHRQcm9tcHQgPSAoZmllbGQ6IGFueSwgZmllbGROYW1lOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBhaVdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJykgYXMgSGlzdG9yeUVsZW1lbnQ7XG5cbiAgICBjb25zdCB3YW5kRWwgPSBjcmVhdGVXYW5kRWwoKTtcbiAgICB3YW5kRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSBjcmVhdGVMb2FkaW5nT3ZlcmxheShmaWVsZC5lbC5kb20pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRvci5tZ3IucHJvbXB0LnRleHQoe1xuICAgICAgICAgICAgICAgIC8vQHRzLWV4cGVjdC1lcnJvciBFeHRcbiAgICAgICAgICAgICAgICBpZDogTU9EeC5yZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZE5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FjaGUuaW5zZXJ0KHJlc3VsdC5jb250ZW50KTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAvL0B0cy1leHBlY3QtZXJyb3IgRXh0XG4gICAgICAgICAgICBFeHQuTXNnLmFsZXJ0KFwiRmFpbGVkXCIsIF8oJ21vZGFpLmNtcC5mYWlsZWRfdHJ5X2FnYWluJywge1wibXNnXCI6IGVyci5tZXNzYWdlfSkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhaVdyYXBwZXIuYXBwZW5kQ2hpbGQod2FuZEVsKTtcblxuICAgIGNvbnN0IGNhY2hlID0gaGlzdG9yeS5pbml0KFxuICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgIGhpc3RvcnlOYXZTeW5jLFxuICAgICAgICBmaWVsZC5nZXRWYWx1ZSgpLFxuICAgICAgICB7fSBhcyBEYXRhQ29udGV4dFxuICAgICk7XG5cbiAgICBpZiAoIWNhY2hlLmNhY2hlZEl0ZW0uY29udGV4dC5lbHMpIHtcbiAgICAgICAgY2FjaGUuY2FjaGVkSXRlbS5jb250ZXh0LmVscyA9IFtdO1xuICAgIH1cbiAgICBjYWNoZS5jYWNoZWRJdGVtLmNvbnRleHQuZWxzLnB1c2goe2ZpZWxkLCB3cmFwcGVyOiBhaVdyYXBwZXJ9KTtcblxuICAgIGNvbnN0IGhpc3RvcnlOYXYgPSBjcmVhdGVIaXN0b3J5TmF2KGNhY2hlKTtcblxuICAgIGFpV3JhcHBlci5hcHBlbmRDaGlsZChoaXN0b3J5TmF2KTtcbiAgICBhaVdyYXBwZXIuaGlzdG9yeU5hdiA9IGhpc3RvcnlOYXY7XG5cbiAgICByZXR1cm4gYWlXcmFwcGVyO1xufVxuXG5jb25zdCBjcmVhdGVJbWFnZVByb21wdCA9IChtZWRpYVNvdXJjZTogc3RyaW5nLCBmaWVsZE5hbWU6IHN0cmluZywgb25TdWNjZXNzOiAobXNnOiBNZXNzYWdlKSA9PiB2b2lkKSA9PiB7XG4gICAgY29uc3QgaW1hZ2VXYW5kID0gY3JlYXRlV2FuZEVsKCk7XG4gICAgaW1hZ2VXYW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB1aS5mcmVlUHJvbXB0KHtcbiAgICAgICAgICAgIGtleTogZmllbGROYW1lLFxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkTmFtZSxcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZXNvdXJjZTogTU9EeC5yZXF1ZXN0LmlkLFxuICAgICAgICAgICAgaW1hZ2U6IHtcbiAgICAgICAgICAgICAgICBtZWRpYVNvdXJjZTogcGFyc2VJbnQobWVkaWFTb3VyY2UpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZUFjdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb3B5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbnNlcnQ6IChtc2csIG1vZGFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uU3VjY2Vzcyhtc2cpO1xuICAgICAgICAgICAgICAgICAgICBtb2RhbC5hcGkuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW1hZ2VXYW5kO1xufVxuXG5jb25zdCBhdHRhY2hGaWVsZCA9IChjbXA6IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcpID0+IHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEV4dFxuICAgIGNvbnN0IGZpZWxkID0gRXh0LmdldENtcChjbXApO1xuICAgIGlmICghZmllbGQpIHJldHVybjtcblxuICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJykgYXMgSGlzdG9yeUVsZW1lbnQ7XG5cbiAgICBjb25zdCB3YW5kRWwgPSBjcmVhdGVXYW5kRWwoKTtcbiAgICB3YW5kRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSBjcmVhdGVMb2FkaW5nT3ZlcmxheShmaWVsZC5lbC5kb20pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRvci5tZ3IucHJvbXB0LnRleHQoe1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTU9EeFxuICAgICAgICAgICAgICAgIGlkOiBNT0R4LnJlcXVlc3QuaWQsXG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTmFtZVxuICAgICAgICAgICAgfSwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjYWNoZS5pbnNlcnQoZGF0YS5jb250ZW50LCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FjaGUuaW5zZXJ0KHJlc3VsdC5jb250ZW50KTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEV4dFxuICAgICAgICAgICAgRXh0Lk1zZy5hbGVydChcIkZhaWxlZFwiLCBfKCdtb2RhaS5jbXAuZmFpbGVkX3RyeV9hZ2FpbicsIHtcIm1zZ1wiOiBlcnIubWVzc2FnZX0pKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZCh3YW5kRWwpO1xuXG4gICAgY29uc3QgY2FjaGUgPSBoaXN0b3J5LmluaXQ8RGF0YUNvbnRleHQ+KFxuICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgIGhpc3RvcnlOYXZTeW5jLFxuICAgICAgICBmaWVsZC5nZXRWYWx1ZSgpLFxuICAgICAgICB7fSBhcyBEYXRhQ29udGV4dCxcbiAgICApO1xuXG4gICAgaWYgKCFjYWNoZS5jYWNoZWRJdGVtLmNvbnRleHQuZWxzKSB7XG4gICAgICAgIGNhY2hlLmNhY2hlZEl0ZW0uY29udGV4dC5lbHMgPSBbXTtcbiAgICB9XG4gICAgY2FjaGUuY2FjaGVkSXRlbS5jb250ZXh0LmVscy5wdXNoKHtmaWVsZCwgd3JhcHBlcn0pO1xuXG4gICAgY29uc3QgaGlzdG9yeU5hdiA9IGNyZWF0ZUhpc3RvcnlOYXYoY2FjaGUpO1xuXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChoaXN0b3J5TmF2KTtcbiAgICB3cmFwcGVyLmhpc3RvcnlOYXYgPSBoaXN0b3J5TmF2O1xuXG4gICAgZmllbGQubGFiZWwuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG59XG5cbmNvbnN0IGF0dGFjaEltYWdlUGx1cyA9IChpbWdQbHVzUGFuZWw6IEVsZW1lbnQsIGZpZWxkTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBFeHRcbiAgICBjb25zdCBpbWFnZVBsdXMgPSBFeHQuZ2V0Q21wKGltZ1BsdXNQYW5lbC5maXJzdEVsZW1lbnRDaGlsZD8uaWQpO1xuXG4gICAgY29uc3QgaW1hZ2VXYW5kID0gY3JlYXRlSW1hZ2VQcm9tcHQoXG4gICAgICAgIGltYWdlUGx1cy5pbWFnZUJyb3dzZXIuc291cmNlLFxuICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgIGZ1bmN0aW9uKG1zZykge1xuICAgICAgICAgICAgaW1hZ2VQbHVzLmltYWdlQnJvd3Nlci5zZXRWYWx1ZShtc2cuY3R4LnVybCk7XG4gICAgICAgICAgICBpbWFnZVBsdXMub25JbWFnZUNoYW5nZShtc2cuY3R4LnVybClcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBhbHRUZXh0V2FuZCA9IGNyZWF0ZVdhbmRFbCgpO1xuICAgIGFsdFRleHRXYW5kLnN0eWxlLm1hcmdpblRvcCA9ICc2cHgnO1xuICAgIGFsdFRleHRXYW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBpbWdFbGVtZW50ID0gaW1hZ2VQbHVzLmltYWdlUHJldmlldy5lbC5kb207XG5cbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZiAoIWN0eCkgcmV0dXJuO1xuXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGltZ0VsZW1lbnQud2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWdFbGVtZW50LmhlaWdodDtcblxuICAgICAgICBjdHguZHJhd0ltYWdlKGltZ0VsZW1lbnQsIDAsIDApO1xuXG4gICAgICAgIGNvbnN0IGJhc2U2NERhdGEgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKTtcblxuICAgICAgICBjb25zdCBkb25lID0gY3JlYXRlTG9hZGluZ092ZXJsYXkoaW1hZ2VQbHVzLmFsdFRleHRGaWVsZC5pdGVtcy5pdGVtc1swXS5lbC5kb20pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRvci5tZ3IucHJvbXB0LnZpc2lvbih7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IGJhc2U2NERhdGEsXG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTmFtZVxuICAgICAgICAgICAgfSwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpbWFnZVBsdXMuYWx0VGV4dEZpZWxkLml0ZW1zLml0ZW1zWzBdLnNldFZhbHVlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgaW1hZ2VQbHVzLmFsdFRleHRGaWVsZC5pdGVtcy5pdGVtc1swXS5lbC5kb20uc2Nyb2xsVG9wID0gaW1hZ2VQbHVzLmFsdFRleHRGaWVsZC5pdGVtcy5pdGVtc1swXS5lbC5kb20uc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGltYWdlUGx1cy5pbWFnZS5hbHRUYWcgPSBkYXRhLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgaW1hZ2VQbHVzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGltYWdlUGx1cy5hbHRUZXh0RmllbGQuaXRlbXMuaXRlbXNbMF0uc2V0VmFsdWUocmVzdWx0LmNvbnRlbnQpO1xuICAgICAgICAgICAgaW1hZ2VQbHVzLmltYWdlLmFsdFRhZyA9IHJlc3VsdC5jb250ZW50O1xuICAgICAgICAgICAgaW1hZ2VQbHVzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBFeHRcbiAgICAgICAgICAgIEV4dC5Nc2cuYWxlcnQoXCJGYWlsZWRcIiwgXygnbW9kYWkuY21wLmZhaWxlZF90cnlfYWdhaW4nLCB7XCJtc2dcIjogZXJyLm1lc3NhZ2V9KSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgaW1hZ2VQbHVzLmFsdFRleHRGaWVsZC5lbC5kb20uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICBpbWFnZVBsdXMuYWx0VGV4dEZpZWxkLmVsLmRvbS5zdHlsZS5qdXN0aWZ5SXRlbXMgPSAnY2VudGVyJztcbiAgICBpbWFnZVBsdXMuYWx0VGV4dEZpZWxkLmVsLmRvbS5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XG5cbiAgICBpbWFnZVBsdXMuZWwuZG9tLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJykuYXBwZW5kQ2hpbGQoaW1hZ2VXYW5kKTtcbiAgICBpbWFnZVBsdXMuYWx0VGV4dEZpZWxkLmVsLmRvbS5hcHBlbmRDaGlsZChhbHRUZXh0V2FuZCk7XG59O1xuXG5jb25zdCBhdHRhY2hDb250ZW50ID0gKCkgPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgRXh0XG4gICAgY29uc3QgY21wID0gRXh0LmdldENtcCgnbW9keC1yZXNvdXJjZS1jb250ZW50Jyk7XG4gICAgY29uc3QgbGFiZWwgPSBjbXAuZWwuZG9tLnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJyk7XG4gICAgbGFiZWwuYXBwZW5kQ2hpbGQoY3JlYXRlRnJlZVRleHRQcm9tcHQoJ3Jlcy5jb250ZW50JykpO1xufTtcblxuY29uc3QgYXR0YWNoVFZzID0gKCkgPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgRXh0XG4gICAgY29uc3QgZm9ybSA9IEV4dC5nZXRDbXAoJ21vZHgtcGFuZWwtcmVzb3VyY2UnKS5nZXRGb3JtKCk7XG4gICAgZm9yIChjb25zdCBbdHZJZCwgdHZOYW1lXSBvZiAobW9kQUk/LnR2cyB8fCBbXSkpIHtcbiAgICAgICAgLy9AdHMtZXhwZWN0LWVycm9yIEV4dFxuICAgICAgICBjb25zdCB3cmFwcGVyID0gRXh0LmdldChgdHYke3R2SWR9LXRyYCk7XG4gICAgICAgIGlmICghd3JhcHBlcikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWVsZCA9IGZvcm0uZmluZEZpZWxkKGB0diR7dHZJZH1gKTtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYHR2LiR7dHZOYW1lfWA7XG5cbiAgICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICAgICAgY29uc3QgaW1nUGx1c1BhbmVsID0gd3JhcHBlci5kb20ucXVlcnlTZWxlY3RvcignLmltYWdlcGx1cy1wYW5lbC1pbnB1dCcpO1xuICAgICAgICAgICAgaWYgKGltZ1BsdXNQYW5lbCkge1xuICAgICAgICAgICAgICAgIGF0dGFjaEltYWdlUGx1cyhpbWdQbHVzUGFuZWwsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWVsZC54dHlwZSA9PT0gJ3RleHRmaWVsZCcgfHwgZmllbGQueHR5cGUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTU9EeFxuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gTU9EeC5jb25maWdbYG1vZGFpLnR2LiR7dHZOYW1lfS50ZXh0LnByb21wdGBdO1xuXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IHdyYXBwZXIuZG9tLnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJyk7XG4gICAgICAgICAgICBpZiAoIWxhYmVsKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChwcm9tcHQpIHtcbiAgICAgICAgICAgICAgICBsYWJlbC5hcHBlbmRDaGlsZChjcmVhdGVGb3JjZWRUZXh0UHJvbXB0KGZpZWxkLCBmaWVsZE5hbWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFiZWwuYXBwZW5kQ2hpbGQoY3JlYXRlRnJlZVRleHRQcm9tcHQoZmllbGROYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmllbGQueHR5cGUgPT09ICdtb2R4LXBhbmVsLXR2LWltYWdlJykge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VXYW5kID0gY3JlYXRlSW1hZ2VQcm9tcHQoXG4gICAgICAgICAgICAgICAgZmllbGQuc291cmNlLFxuICAgICAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVVybDogbXNnLmN0eC51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtc2cuY3R4LnVybFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuaXRlbXMuaXRlbXNbMV0uZmlyZUV2ZW50KCdzZWxlY3QnLCBldmVudERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5maXJlRXZlbnQoJ3NlbGVjdCcsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSB3cmFwcGVyLmRvbS5xdWVyeVNlbGVjdG9yKCdsYWJlbCcpO1xuICAgICAgICAgICAgaWYgKCFsYWJlbCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBsYWJlbC5hcHBlbmRDaGlsZChpbWFnZVdhbmQpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmNvbnN0IGF0dGFjaFJlc291cmNlRmllbGRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpZWxkc01hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge1xuICAgICAgICBwYWdldGl0bGU6IFsnbW9keC1yZXNvdXJjZS1wYWdldGl0bGUnXSxcbiAgICAgICAgbG9uZ3RpdGxlOiBbJ21vZHgtcmVzb3VyY2UtbG9uZ3RpdGxlJywgJ3Nlb3N1aXRlLWxvbmd0aXRsZSddLFxuICAgICAgICBpbnRyb3RleHQ6IFsnbW9keC1yZXNvdXJjZS1pbnRyb3RleHQnXSxcbiAgICAgICAgZGVzY3JpcHRpb246IFsnbW9keC1yZXNvdXJjZS1kZXNjcmlwdGlvbicsICdzZW9zdWl0ZS1kZXNjcmlwdGlvbiddLFxuICAgICAgICBjb250ZW50OiBbJ21vZHgtcmVzb3VyY2UtY29udGVudCddLFxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIG1vZEFJPy5yZXNvdXJjZUZpZWxkcyB8fCBbXSkge1xuICAgICAgICBpZiAoIWZpZWxkc01hcFtmaWVsZF0pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkID09PSAnY29udGVudCcpIHtcbiAgICAgICAgICAgIGF0dGFjaENvbnRlbnQoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZmllbGRzTWFwW2ZpZWxkXS5mb3JFYWNoKChjbXBJZCkgPT4ge1xuICAgICAgICAgICAgYXR0YWNoRmllbGQoY21wSWQsIGByZXMuJHtmaWVsZH1gKTtcbiAgICAgICAgfSlcblxuICAgIH1cbn1cblxuXG4oKCkgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBFeHQub25SZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBFeHQuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhdHRhY2hSZXNvdXJjZUZpZWxkcygpO1xuICAgICAgICAgICAgYXR0YWNoVFZzKCk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgfSk7XG59KSgpO1xuIiwiaW1wb3J0ICcuL3Jlc291cmNlJztcblxuZXhwb3J0IGNvbnN0IHdpbmRvdyA9IHt9O1xuXG5leHBvcnQgeyBjaGF0SGlzdG9yeSB9IGZyb20gJy4vY2hhdEhpc3RvcnknXG5leHBvcnQgeyBoaXN0b3J5IH0gZnJvbSAnLi9oaXN0b3J5J1xuZXhwb3J0IHsgZXhlY3V0b3IgfSBmcm9tICcuL2V4ZWN1dG9yJ1xuZXhwb3J0IHsgdWkgfSBmcm9tICcuL3VpJ1xuXG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwic2VydmljZXMiLCJidWZmZXJlZCIsImNoYXRncHQiLCJjb250ZW50IiwiZGF0YSIsImNob2ljZXMiLCJtZXNzYWdlIiwiRXJyb3IiLCJfIiwiaWQiLCJpbWFnZSIsInVybCIsIkRhdGUiLCJub3ciLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjbGF1ZGUiLCJ0ZXh0IiwiZ2VtaW5pIiwiY2FuZGlkYXRlcyIsInBhcnRzIiwiYmFzZTY0IiwicHJlZGljdGlvbnMiLCJieXRlc0Jhc2U2NEVuY29kZWQiLCJzdHJlYW0iLCJuZXdEYXRhIiwiY3VycmVudERhdGEiLCJjdXJyZW50Q29udGVudCIsImRlbHRhIiwiZXJyb3JIYW5kbGVyIiwiYXN5bmMiLCJyZXMiLCJvayIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJoYW5kbGVTdHJlYW0iLCJzZXJ2aWNlIiwicGFyc2VyIiwib25DaHVua1N0cmVhbSIsInNpZ25hbCIsImJvZHkiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJidWZmZXIiLCJhYm9ydGVkIiwiZG9uZSIsInJlYWQiLCJjaHVuayIsImRlY29kZSIsImpzb25MaW5lcyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsImxpbmUiLCJyZXBsYWNlIiwiZmlsdGVyIiwicGFyc2VkRGF0YSIsIkpTT04iLCJwYXJzZSIsIm5ld2xpbmVJbmRleCIsImxhc3ROZXdsaW5lSW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJzdGFydHNXaXRoIiwidHlwZSIsImFpRmV0Y2giLCJhY3Rpb24iLCJwYXJhbXMiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiZmV0Y2giLCJtb2RBSSIsImFwaVVSTCIsIm1ldGhvZCIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJkZXRhaWwiLCJwYXJzZUludCIsImRldGFpbHMiLCJmb3JFeGVjdXRvciIsImV4ZWN1dG9yRGV0YWlscyIsImNhbGxTdHJlYW1TZXJ2aWNlIiwiY2FsbFNlcnZpY2UiLCJzZXJ2aWNlRXhlY3V0b3IiLCJhYm9ydCIsImV4ZWN1dG9yIiwibWdyIiwiZG93bmxvYWQiLCJtb2R4RmV0Y2giLCJwcm9tcHQiLCJmcmVlVGV4dCIsInZpc2lvbiIsInVuZGVmaW5lZCIsIl9jYWNoZSIsIl9mb3JtYXRPdXRwdXQiLCJjYWNoZWRJdGVtIiwicHJldlN0YXR1cyIsInZpc2libGUiLCJuZXh0U3RhdHVzIiwidmFsdWVzIiwibGVuZ3RoIiwiY3VycmVudCIsInRvdGFsIiwiY29udGV4dCIsImluc2VydCIsIm5vU3RvcmUiLCJwdXNoIiwib3V0cHV0IiwidGhpcyIsInN5bmNVSSIsIm5leHQiLCJwcmV2IiwiaW5pdCIsImluaXRWYWx1ZSIsImdldERhdGEiLCJnZXRBbGwiLCJhcHBseVN0eWxlcyIsImVsZW1lbnQiLCJzdHlsZU9iaiIsImFzc2lnbiIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiZG9jdW1lbnQiLCJubFRvQnIiLCJ0ZXN0IiwiX25hbWVzcGFjZSIsIlJPTEVTIiwiYWRkTWVzc2FnZSIsInJvbGUiLCJoaWRkZW4iLCJuYW1lc3BhY2UiLCJtc2dPYmplY3QiLCJjdHgiLCJpbmRleCIsImhpc3RvcnkiLCJpZFJlZiIsImVsIiwib25BZGRNZXNzYWdlIiwiY2hhdEhpc3RvcnkiLCJhZGRVc2VyTWVzc2FnZSIsImFkZEFzc2lzdGFudE1lc3NhZ2UiLCJ1cGRhdGVBc3Npc3RhbnRNZXNzYWdlIiwibXNnIiwidXBkYXRlIiwidXBkYXRlTWVzc2FnZSIsImdldEFzc2lzdGFudE1lc3NhZ2UiLCJnZXRNZXNzYWdlIiwiZ2V0TWVzc2FnZXMiLCJnZXRNZXNzYWdlc0hpc3RvcnkiLCJtIiwiZGVmYXVsdENvbmZpZyIsImxvYWRpbmdUZXh0IiwiY29tcGxldGVkVGV4dCIsImNvbXBsZXRlZFRleHREdXJhdGlvbiIsInN0eWxlcyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsInBhZGRpbmciLCJmb250U2l6ZSIsImN1cnNvciIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwiY29sb3IiLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpblJpZ2h0IiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiaWNvbnMiLCJjb3B5IiwiY3JlYXRlQWN0aW9uQnV0dG9uIiwiY29uZmlnIiwiY29weUJ0biIsImNvcHlJY29uIiwiYmFja2dyb3VuZEltYWdlIiwiaWNvbiIsImFwcGVuZCIsImNyZWF0ZVRleHROb2RlIiwibGFiZWwiLCJhZGRFdmVudExpc3RlbmVyIiwib3JpZ2luYWxIVE1MIiwiaW5uZXJIVE1MIiwicmVzdWx0Iiwib25DbGljayIsIm1vZGFsIiwiUHJvbWlzZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ6SW5kZXgiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJib3hTaGFkb3ciLCJmbGV4RGlyZWN0aW9uIiwib3ZlcmZsb3ciLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJmb250V2VpZ2h0IiwiZ2FwIiwiYmFja2dyb3VuZCIsImZsZXgiLCJvdmVyZmxvd1kiLCJib3hTaXppbmciLCJtYXJnaW5Cb3R0b20iLCJ3b3JkV3JhcCIsIm1hcmdpbkxlZnQiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIm1heFdpZHRoIiwiYm9yZGVyVG9wIiwib3V0bGluZSIsInJlc2l6ZSIsIm1pbldpZHRoIiwib3BhY2l0eSIsImJhY2tkcm9wRmlsdGVyIiwicG9pbnRlckV2ZW50cyIsImNyZWF0ZUxvYWRpbmdPdmVybGF5Iiwib3B0aW9ucyIsImluZGljYXRvclR5cGUiLCJvdmVybGF5Q29sb3IiLCJpbmRpY2F0b3JDb2xvciIsIm92ZXJsYXkiLCJpbmRpY2F0b3IiLCJ0ZXh0YXJlYVN0eWxlcyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJ0ZXh0YXJlYVJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzdHlsZVRleHQiLCJhbmltYXRpb24iLCJpIiwiZG90IiwibWFyZ2luIiwiYW5pbWF0aW9uRGVsYXkiLCJzdHlsZVNoZWV0IiwicGFyZW50U3R5bGVzIiwicGFyZW50RWxlbWVudCIsIndyYXBwZXIiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwidXBkYXRlZFJlY3QiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZW1vdmUiLCJ1aSIsImZyZWVQcm9tcHQiLCJhbGVydCIsImNsb3NlTW9kYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZHJhZyIsImVuZERyYWciLCJtb2RhbE92ZXJsYXkiLCJpbml0RHJhZyIsImUiLCJpc0RyYWdnaW5nIiwicmVjdCIsIm9mZnNldFgiLCJjbGllbnRYIiwib2Zmc2V0WSIsImNsaWVudFkiLCJ1c2VyU2VsZWN0IiwibmV3WCIsIm5ld1kiLCJzdG9wR2VuZXJhdGlvbiIsImlzTG9hZGluZyIsImFib3J0Q29udHJvbGxlciIsInNldExvYWRpbmdTdGF0ZSIsInRyeUFnYWluIiwibGF0ZXN0VXNlck1zZyIsInJldmVyc2UiLCJmaW5kIiwic2VuZE1lc3NhZ2UiLCJhZGRFcnJvck1lc3NhZ2UiLCJjaGF0TWVzc2FnZXMiLCJtZXNzYWdlRGl2IiwiZXJyb3JJY29uIiwidGV4dFNwYW4iLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJwcm92aWRlZElkIiwibWVzc2FnZUlkIiwiY29udGVudERpdiIsImlmcmFtZSIsInByb3ZpZGVkQ29udGVudCIsImN1c3RvbUNTUyIsInNyY2RvYyIsImNzcyIsImpvaW4iLCJzeW5jSGVpZ2h0IiwiY29udGVudFdpbmRvdyIsImVsZW1lbnRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJvZmZzZXRIZWlnaHQiLCJib3R0b20iLCJvZmZzZXRUb3AiLCJtYXgiLCJvbmxvYWQiLCJjcmVhdGVDb250ZW50SWZyYW1lIiwiYWN0aW9uc0RpdiIsInRleHRBY3Rpb25zIiwiY29weVRvQ2xpcGJvYXJkIiwiaW1hZ2VBY3Rpb25zIiwiaGFuZGxlciIsImRvd25sb2FkZWQiLCJmaWVsZCIsInJlc291cmNlIiwibWVkaWFTb3VyY2UiLCJmdWxsVXJsIiwiaW5zZXJ0Q2IiLCJpZnJhbWVEb2N1bWVudCIsImNvbnRlbnREb2N1bWVudCIsInJlbmRlck1lc3NhZ2UiLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJ0ZXh0YXJlYSIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwiZXJyIiwibG9hZGluZyIsImxvYWRpbmdJbmRpY2F0b3IiLCJtZXNzYWdlSW5wdXQiLCJkaXNhYmxlZCIsInNlbmRCdG4iLCJzdG9wQnRuIiwiaGFzTWVzc2FnZXMiLCJ0cnlBZ2FpbkJ0biIsInByb3ZpZGVkTWVzc2FnZSIsImhpZGVQcm9tcHQiLCJtZXNzYWdlcyIsIm5hbWUiLCJjaGF0TW9kYWwiLCJjaGF0SGVhZGVyIiwiY2hhdFRpdGxlIiwiY2hhdENvbnRyb2xzIiwiY2xvc2VCdG4iLCJjaGF0SW5wdXRBcmVhIiwiaW5wdXRSb3ciLCJpbnB1dFdyYXBwZXIiLCJwbGFjZWhvbGRlciIsImJ1dHRvbnNDb2x1bW4iLCJzZW5kSWNvbiIsInNlbmRUZXh0IiwiYWN0aW9uQnV0dG9uc1JvdyIsInN0b3BJY29uIiwidGl0bGUiLCJyZWZyZXNoSWNvbiIsInNoaWZ0S2V5IiwicHJldmVudERlZmF1bHQiLCJidWlsZE1vZGFsIiwiYXBpIiwidmlzaWJpbGl0eSIsImZvckVhY2giLCJvcGVuTW9kYWwiLCJjcmVhdGVNb2RhbCIsImhpc3RvcnlOYXZTeW5jIiwiZWxzIiwicHJldlZhbHVlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsImZpcmVFdmVudCIsImRvbSIsImhpc3RvcnlOYXYiLCJzaG93IiwiaW5mbyIsInByZXZCdXR0b24iLCJlbmFibGUiLCJkaXNhYmxlIiwibmV4dEJ1dHRvbiIsImNyZWF0ZVdhbmRFbCIsIndhbmRFbCIsImNsYXNzTmFtZSIsImlubmVyVGV4dCIsImNyZWF0ZUhpc3RvcnlOYXYiLCJjYWNoZSIsInNob3dpbmciLCJoaWRlIiwiY3JlYXRlRnJlZVRleHRQcm9tcHQiLCJmaWVsZE5hbWUiLCJNT0R4IiwicmVxdWVzdCIsImNyZWF0ZUZvcmNlZFRleHRQcm9tcHQiLCJhaVdyYXBwZXIiLCJFeHQiLCJNc2ciLCJjcmVhdGVJbWFnZVByb21wdCIsIm9uU3VjY2VzcyIsImltYWdlV2FuZCIsImF0dGFjaEZpZWxkIiwiY21wIiwiZ2V0Q21wIiwiYXR0YWNoSW1hZ2VQbHVzIiwiaW1nUGx1c1BhbmVsIiwiaW1hZ2VQbHVzIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJpbWFnZUJyb3dzZXIiLCJzb3VyY2UiLCJvbkltYWdlQ2hhbmdlIiwiYWx0VGV4dFdhbmQiLCJtYXJnaW5Ub3AiLCJpbWdFbGVtZW50IiwiaW1hZ2VQcmV2aWV3IiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsImJhc2U2NERhdGEiLCJ0b0RhdGFVUkwiLCJhbHRUZXh0RmllbGQiLCJpdGVtcyIsImFsdFRhZyIsInVwZGF0ZVZhbHVlIiwianVzdGlmeUl0ZW1zIiwicXVlcnlTZWxlY3RvciIsIm9uUmVhZHkiLCJkZWZlciIsImZpZWxkc01hcCIsInBhZ2V0aXRsZSIsImxvbmd0aXRsZSIsImludHJvdGV4dCIsImRlc2NyaXB0aW9uIiwicmVzb3VyY2VGaWVsZHMiLCJjbXBJZCIsImF0dGFjaFJlc291cmNlRmllbGRzIiwiZm9ybSIsImdldEZvcm0iLCJ0dklkIiwidHZOYW1lIiwidHZzIiwiZmluZEZpZWxkIiwieHR5cGUiLCJldmVudERhdGEiLCJyZWxhdGl2ZVVybCIsImF0dGFjaFRWcyJdLCJzb3VyY2VSb290IjoiIn0=